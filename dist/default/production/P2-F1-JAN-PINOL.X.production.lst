

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Apr 24 18:23:43 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,space=0,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    86                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    87                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    88   000000                     
    89                           ; Generated 05/12/2024 GMT
    90                           ; 
    91                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution. Publication is not required when
   105                           ;        this file is used in an embedded application.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4321 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123   000FE0                     bsr             equ	4064
   124   000FE9                     fsr0            equ	4073
   125   000FEA                     fsr0h           equ	4074
   126   000FE9                     fsr0l           equ	4073
   127   000FE1                     fsr1            equ	4065
   128   000FE2                     fsr1h           equ	4066
   129   000FE1                     fsr1l           equ	4065
   130   000FD9                     fsr2            equ	4057
   131   000FDA                     fsr2h           equ	4058
   132   000FD9                     fsr2l           equ	4057
   133   000FEF                     indf0           equ	4079
   134   000FE7                     indf1           equ	4071
   135   000FDF                     indf2           equ	4063
   136   000FF2                     intcon          equ	4082
   137   000000                     nvmcon          equ	0
   138   000FF9                     pcl             equ	4089
   139   000FFA                     pclath          equ	4090
   140   000FFB                     pclatu          equ	4091
   141   000FEB                     plusw0          equ	4075
   142   000FE3                     plusw1          equ	4067
   143   000FDB                     plusw2          equ	4059
   144   000FED                     postdec0        equ	4077
   145   000FE5                     postdec1        equ	4069
   146   000FDD                     postdec2        equ	4061
   147   000FEE                     postinc0        equ	4078
   148   000FE6                     postinc1        equ	4070
   149   000FDE                     postinc2        equ	4062
   150   000FEC                     preinc0         equ	4076
   151   000FE4                     preinc1         equ	4068
   152   000FDC                     preinc2         equ	4060
   153   000FF3                     prod            equ	4083
   154   000FF4                     prodh           equ	4084
   155   000FF3                     prodl           equ	4083
   156   000FD8                     status          equ	4056
   157   000FF5                     tablat          equ	4085
   158   000FF6                     tblptr          equ	4086
   159   000FF7                     tblptrh         equ	4087
   160   000FF6                     tblptrl         equ	4086
   161   000FF8                     tblptru         equ	4088
   162   000FFD                     tosl            equ	4093
   163   000FE8                     wreg            equ	4072
   164   000F80                     PORTA           equ	3968	;# 
   165   000F81                     PORTB           equ	3969	;# 
   166   000F82                     PORTC           equ	3970	;# 
   167   000F83                     PORTD           equ	3971	;# 
   168   000F84                     PORTE           equ	3972	;# 
   169   000F89                     LATA            equ	3977	;# 
   170   000F8A                     LATB            equ	3978	;# 
   171   000F8B                     LATC            equ	3979	;# 
   172   000F8C                     LATD            equ	3980	;# 
   173   000F8D                     LATE            equ	3981	;# 
   174   000F92                     TRISA           equ	3986	;# 
   175   000F92                     DDRA            equ	3986	;# 
   176   000F93                     TRISB           equ	3987	;# 
   177   000F93                     DDRB            equ	3987	;# 
   178   000F94                     TRISC           equ	3988	;# 
   179   000F94                     DDRC            equ	3988	;# 
   180   000F95                     TRISD           equ	3989	;# 
   181   000F95                     DDRD            equ	3989	;# 
   182   000F96                     TRISE           equ	3990	;# 
   183   000F96                     DDRE            equ	3990	;# 
   184   000F9B                     OSCTUNE         equ	3995	;# 
   185   000F9D                     PIE1            equ	3997	;# 
   186   000F9E                     PIR1            equ	3998	;# 
   187   000F9F                     IPR1            equ	3999	;# 
   188   000FA0                     PIE2            equ	4000	;# 
   189   000FA1                     PIR2            equ	4001	;# 
   190   000FA2                     IPR2            equ	4002	;# 
   191   000FA6                     EECON1          equ	4006	;# 
   192   000FA7                     EECON2          equ	4007	;# 
   193   000FA8                     EEDATA          equ	4008	;# 
   194   000FA9                     EEADR           equ	4009	;# 
   195   000FAB                     RCSTA           equ	4011	;# 
   196   000FAB                     RCSTA1          equ	4011	;# 
   197   000FAC                     TXSTA           equ	4012	;# 
   198   000FAC                     TXSTA1          equ	4012	;# 
   199   000FAD                     TXREG           equ	4013	;# 
   200   000FAD                     TXREG1          equ	4013	;# 
   201   000FAE                     RCREG           equ	4014	;# 
   202   000FAE                     RCREG1          equ	4014	;# 
   203   000FAF                     SPBRG           equ	4015	;# 
   204   000FAF                     SPBRG1          equ	4015	;# 
   205   000FB0                     SPBRGH          equ	4016	;# 
   206   000FB1                     T3CON           equ	4017	;# 
   207   000FB2                     TMR3            equ	4018	;# 
   208   000FB2                     TMR3L           equ	4018	;# 
   209   000FB3                     TMR3H           equ	4019	;# 
   210   000FB4                     CMCON           equ	4020	;# 
   211   000FB5                     CVRCON          equ	4021	;# 
   212   000FB6                     ECCP1AS         equ	4022	;# 
   213   000FB7                     ECCP1DEL        equ	4023	;# 
   214   000FB7                     PWM1CON         equ	4023	;# 
   215   000FB8                     BAUDCON         equ	4024	;# 
   216   000FB8                     BAUDCTL         equ	4024	;# 
   217   000FBA                     CCP2CON         equ	4026	;# 
   218   000FBB                     CCPR2           equ	4027	;# 
   219   000FBB                     CCPR2L          equ	4027	;# 
   220   000FBC                     CCPR2H          equ	4028	;# 
   221   000FBD                     CCP1CON         equ	4029	;# 
   222   000FBD                     ECCP1CON        equ	4029	;# 
   223   000FBE                     CCPR1           equ	4030	;# 
   224   000FBE                     CCPR1L          equ	4030	;# 
   225   000FBF                     CCPR1H          equ	4031	;# 
   226   000FC0                     ADCON2          equ	4032	;# 
   227   000FC1                     ADCON1          equ	4033	;# 
   228   000FC2                     ADCON0          equ	4034	;# 
   229   000FC3                     ADRES           equ	4035	;# 
   230   000FC3                     ADRESL          equ	4035	;# 
   231   000FC4                     ADRESH          equ	4036	;# 
   232   000FC5                     SSPCON2         equ	4037	;# 
   233   000FC6                     SSPCON1         equ	4038	;# 
   234   000FC7                     SSPSTAT         equ	4039	;# 
   235   000FC8                     SSPADD          equ	4040	;# 
   236   000FC9                     SSPBUF          equ	4041	;# 
   237   000FCA                     T2CON           equ	4042	;# 
   238   000FCB                     PR2             equ	4043	;# 
   239   000FCB                     MEMCON          equ	4043	;# 
   240   000FCC                     TMR2            equ	4044	;# 
   241   000FCD                     T1CON           equ	4045	;# 
   242   000FCE                     TMR1            equ	4046	;# 
   243   000FCE                     TMR1L           equ	4046	;# 
   244   000FCF                     TMR1H           equ	4047	;# 
   245   000FD0                     RCON            equ	4048	;# 
   246   000FD1                     WDTCON          equ	4049	;# 
   247   000FD2                     HLVDCON         equ	4050	;# 
   248   000FD2                     LVDCON          equ	4050	;# 
   249   000FD3                     OSCCON          equ	4051	;# 
   250   000FD5                     T0CON           equ	4053	;# 
   251   000FD6                     TMR0            equ	4054	;# 
   252   000FD6                     TMR0L           equ	4054	;# 
   253   000FD7                     TMR0H           equ	4055	;# 
   254   000FD8                     STATUS          equ	4056	;# 
   255   000FD9                     FSR2            equ	4057	;# 
   256   000FD9                     FSR2L           equ	4057	;# 
   257   000FDA                     FSR2H           equ	4058	;# 
   258   000FDB                     PLUSW2          equ	4059	;# 
   259   000FDC                     PREINC2         equ	4060	;# 
   260   000FDD                     POSTDEC2        equ	4061	;# 
   261   000FDE                     POSTINC2        equ	4062	;# 
   262   000FDF                     INDF2           equ	4063	;# 
   263   000FE0                     BSR             equ	4064	;# 
   264   000FE1                     FSR1            equ	4065	;# 
   265   000FE1                     FSR1L           equ	4065	;# 
   266   000FE2                     FSR1H           equ	4066	;# 
   267   000FE3                     PLUSW1          equ	4067	;# 
   268   000FE4                     PREINC1         equ	4068	;# 
   269   000FE5                     POSTDEC1        equ	4069	;# 
   270   000FE6                     POSTINC1        equ	4070	;# 
   271   000FE7                     INDF1           equ	4071	;# 
   272   000FE8                     WREG            equ	4072	;# 
   273   000FE9                     FSR0            equ	4073	;# 
   274   000FE9                     FSR0L           equ	4073	;# 
   275   000FEA                     FSR0H           equ	4074	;# 
   276   000FEB                     PLUSW0          equ	4075	;# 
   277   000FEC                     PREINC0         equ	4076	;# 
   278   000FED                     POSTDEC0        equ	4077	;# 
   279   000FEE                     POSTINC0        equ	4078	;# 
   280   000FEF                     INDF0           equ	4079	;# 
   281   000FF0                     INTCON3         equ	4080	;# 
   282   000FF1                     INTCON2         equ	4081	;# 
   283   000FF2                     INTCON          equ	4082	;# 
   284   000FF3                     PROD            equ	4083	;# 
   285   000FF3                     PRODL           equ	4083	;# 
   286   000FF4                     PRODH           equ	4084	;# 
   287   000FF5                     TABLAT          equ	4085	;# 
   288   000FF6                     TBLPTR          equ	4086	;# 
   289   000FF6                     TBLPTRL         equ	4086	;# 
   290   000FF7                     TBLPTRH         equ	4087	;# 
   291   000FF8                     TBLPTRU         equ	4088	;# 
   292   000FF9                     PCLAT           equ	4089	;# 
   293   000FF9                     PC              equ	4089	;# 
   294   000FF9                     PCL             equ	4089	;# 
   295   000FFA                     PCLATH          equ	4090	;# 
   296   000FFB                     PCLATU          equ	4091	;# 
   297   000FFC                     STKPTR          equ	4092	;# 
   298   000FFD                     TOS             equ	4093	;# 
   299   000FFD                     TOSL            equ	4093	;# 
   300   000FFE                     TOSH            equ	4094	;# 
   301   000FFF                     TOSU            equ	4095	;# 
   302   000F80                     PORTA           equ	3968	;# 
   303   000F81                     PORTB           equ	3969	;# 
   304   000F82                     PORTC           equ	3970	;# 
   305   000F83                     PORTD           equ	3971	;# 
   306   000F84                     PORTE           equ	3972	;# 
   307   000F89                     LATA            equ	3977	;# 
   308   000F8A                     LATB            equ	3978	;# 
   309   000F8B                     LATC            equ	3979	;# 
   310   000F8C                     LATD            equ	3980	;# 
   311   000F8D                     LATE            equ	3981	;# 
   312   000F92                     TRISA           equ	3986	;# 
   313   000F92                     DDRA            equ	3986	;# 
   314   000F93                     TRISB           equ	3987	;# 
   315   000F93                     DDRB            equ	3987	;# 
   316   000F94                     TRISC           equ	3988	;# 
   317   000F94                     DDRC            equ	3988	;# 
   318   000F95                     TRISD           equ	3989	;# 
   319   000F95                     DDRD            equ	3989	;# 
   320   000F96                     TRISE           equ	3990	;# 
   321   000F96                     DDRE            equ	3990	;# 
   322   000F9B                     OSCTUNE         equ	3995	;# 
   323   000F9D                     PIE1            equ	3997	;# 
   324   000F9E                     PIR1            equ	3998	;# 
   325   000F9F                     IPR1            equ	3999	;# 
   326   000FA0                     PIE2            equ	4000	;# 
   327   000FA1                     PIR2            equ	4001	;# 
   328   000FA2                     IPR2            equ	4002	;# 
   329   000FA6                     EECON1          equ	4006	;# 
   330   000FA7                     EECON2          equ	4007	;# 
   331   000FA8                     EEDATA          equ	4008	;# 
   332   000FA9                     EEADR           equ	4009	;# 
   333   000FAB                     RCSTA           equ	4011	;# 
   334   000FAB                     RCSTA1          equ	4011	;# 
   335   000FAC                     TXSTA           equ	4012	;# 
   336   000FAC                     TXSTA1          equ	4012	;# 
   337   000FAD                     TXREG           equ	4013	;# 
   338   000FAD                     TXREG1          equ	4013	;# 
   339   000FAE                     RCREG           equ	4014	;# 
   340   000FAE                     RCREG1          equ	4014	;# 
   341   000FAF                     SPBRG           equ	4015	;# 
   342   000FAF                     SPBRG1          equ	4015	;# 
   343   000FB0                     SPBRGH          equ	4016	;# 
   344   000FB1                     T3CON           equ	4017	;# 
   345   000FB2                     TMR3            equ	4018	;# 
   346   000FB2                     TMR3L           equ	4018	;# 
   347   000FB3                     TMR3H           equ	4019	;# 
   348   000FB4                     CMCON           equ	4020	;# 
   349   000FB5                     CVRCON          equ	4021	;# 
   350   000FB6                     ECCP1AS         equ	4022	;# 
   351   000FB7                     ECCP1DEL        equ	4023	;# 
   352   000FB7                     PWM1CON         equ	4023	;# 
   353   000FB8                     BAUDCON         equ	4024	;# 
   354   000FB8                     BAUDCTL         equ	4024	;# 
   355   000FBA                     CCP2CON         equ	4026	;# 
   356   000FBB                     CCPR2           equ	4027	;# 
   357   000FBB                     CCPR2L          equ	4027	;# 
   358   000FBC                     CCPR2H          equ	4028	;# 
   359   000FBD                     CCP1CON         equ	4029	;# 
   360   000FBD                     ECCP1CON        equ	4029	;# 
   361   000FBE                     CCPR1           equ	4030	;# 
   362   000FBE                     CCPR1L          equ	4030	;# 
   363   000FBF                     CCPR1H          equ	4031	;# 
   364   000FC0                     ADCON2          equ	4032	;# 
   365   000FC1                     ADCON1          equ	4033	;# 
   366   000FC2                     ADCON0          equ	4034	;# 
   367   000FC3                     ADRES           equ	4035	;# 
   368   000FC3                     ADRESL          equ	4035	;# 
   369   000FC4                     ADRESH          equ	4036	;# 
   370   000FC5                     SSPCON2         equ	4037	;# 
   371   000FC6                     SSPCON1         equ	4038	;# 
   372   000FC7                     SSPSTAT         equ	4039	;# 
   373   000FC8                     SSPADD          equ	4040	;# 
   374   000FC9                     SSPBUF          equ	4041	;# 
   375   000FCA                     T2CON           equ	4042	;# 
   376   000FCB                     PR2             equ	4043	;# 
   377   000FCB                     MEMCON          equ	4043	;# 
   378   000FCC                     TMR2            equ	4044	;# 
   379   000FCD                     T1CON           equ	4045	;# 
   380   000FCE                     TMR1            equ	4046	;# 
   381   000FCE                     TMR1L           equ	4046	;# 
   382   000FCF                     TMR1H           equ	4047	;# 
   383   000FD0                     RCON            equ	4048	;# 
   384   000FD1                     WDTCON          equ	4049	;# 
   385   000FD2                     HLVDCON         equ	4050	;# 
   386   000FD2                     LVDCON          equ	4050	;# 
   387   000FD3                     OSCCON          equ	4051	;# 
   388   000FD5                     T0CON           equ	4053	;# 
   389   000FD6                     TMR0            equ	4054	;# 
   390   000FD6                     TMR0L           equ	4054	;# 
   391   000FD7                     TMR0H           equ	4055	;# 
   392   000FD8                     STATUS          equ	4056	;# 
   393   000FD9                     FSR2            equ	4057	;# 
   394   000FD9                     FSR2L           equ	4057	;# 
   395   000FDA                     FSR2H           equ	4058	;# 
   396   000FDB                     PLUSW2          equ	4059	;# 
   397   000FDC                     PREINC2         equ	4060	;# 
   398   000FDD                     POSTDEC2        equ	4061	;# 
   399   000FDE                     POSTINC2        equ	4062	;# 
   400   000FDF                     INDF2           equ	4063	;# 
   401   000FE0                     BSR             equ	4064	;# 
   402   000FE1                     FSR1            equ	4065	;# 
   403   000FE1                     FSR1L           equ	4065	;# 
   404   000FE2                     FSR1H           equ	4066	;# 
   405   000FE3                     PLUSW1          equ	4067	;# 
   406   000FE4                     PREINC1         equ	4068	;# 
   407   000FE5                     POSTDEC1        equ	4069	;# 
   408   000FE6                     POSTINC1        equ	4070	;# 
   409   000FE7                     INDF1           equ	4071	;# 
   410   000FE8                     WREG            equ	4072	;# 
   411   000FE9                     FSR0            equ	4073	;# 
   412   000FE9                     FSR0L           equ	4073	;# 
   413   000FEA                     FSR0H           equ	4074	;# 
   414   000FEB                     PLUSW0          equ	4075	;# 
   415   000FEC                     PREINC0         equ	4076	;# 
   416   000FED                     POSTDEC0        equ	4077	;# 
   417   000FEE                     POSTINC0        equ	4078	;# 
   418   000FEF                     INDF0           equ	4079	;# 
   419   000FF0                     INTCON3         equ	4080	;# 
   420   000FF1                     INTCON2         equ	4081	;# 
   421   000FF2                     INTCON          equ	4082	;# 
   422   000FF3                     PROD            equ	4083	;# 
   423   000FF3                     PRODL           equ	4083	;# 
   424   000FF4                     PRODH           equ	4084	;# 
   425   000FF5                     TABLAT          equ	4085	;# 
   426   000FF6                     TBLPTR          equ	4086	;# 
   427   000FF6                     TBLPTRL         equ	4086	;# 
   428   000FF7                     TBLPTRH         equ	4087	;# 
   429   000FF8                     TBLPTRU         equ	4088	;# 
   430   000FF9                     PCLAT           equ	4089	;# 
   431   000FF9                     PC              equ	4089	;# 
   432   000FF9                     PCL             equ	4089	;# 
   433   000FFA                     PCLATH          equ	4090	;# 
   434   000FFB                     PCLATU          equ	4091	;# 
   435   000FFC                     STKPTR          equ	4092	;# 
   436   000FFD                     TOS             equ	4093	;# 
   437   000FFD                     TOSL            equ	4093	;# 
   438   000FFE                     TOSH            equ	4094	;# 
   439   000FFF                     TOSU            equ	4095	;# 
   440   000F80                     PORTA           equ	3968	;# 
   441   000F81                     PORTB           equ	3969	;# 
   442   000F82                     PORTC           equ	3970	;# 
   443   000F83                     PORTD           equ	3971	;# 
   444   000F84                     PORTE           equ	3972	;# 
   445   000F89                     LATA            equ	3977	;# 
   446   000F8A                     LATB            equ	3978	;# 
   447   000F8B                     LATC            equ	3979	;# 
   448   000F8C                     LATD            equ	3980	;# 
   449   000F8D                     LATE            equ	3981	;# 
   450   000F92                     TRISA           equ	3986	;# 
   451   000F92                     DDRA            equ	3986	;# 
   452   000F93                     TRISB           equ	3987	;# 
   453   000F93                     DDRB            equ	3987	;# 
   454   000F94                     TRISC           equ	3988	;# 
   455   000F94                     DDRC            equ	3988	;# 
   456   000F95                     TRISD           equ	3989	;# 
   457   000F95                     DDRD            equ	3989	;# 
   458   000F96                     TRISE           equ	3990	;# 
   459   000F96                     DDRE            equ	3990	;# 
   460   000F9B                     OSCTUNE         equ	3995	;# 
   461   000F9D                     PIE1            equ	3997	;# 
   462   000F9E                     PIR1            equ	3998	;# 
   463   000F9F                     IPR1            equ	3999	;# 
   464   000FA0                     PIE2            equ	4000	;# 
   465   000FA1                     PIR2            equ	4001	;# 
   466   000FA2                     IPR2            equ	4002	;# 
   467   000FA6                     EECON1          equ	4006	;# 
   468   000FA7                     EECON2          equ	4007	;# 
   469   000FA8                     EEDATA          equ	4008	;# 
   470   000FA9                     EEADR           equ	4009	;# 
   471   000FAB                     RCSTA           equ	4011	;# 
   472   000FAB                     RCSTA1          equ	4011	;# 
   473   000FAC                     TXSTA           equ	4012	;# 
   474   000FAC                     TXSTA1          equ	4012	;# 
   475   000FAD                     TXREG           equ	4013	;# 
   476   000FAD                     TXREG1          equ	4013	;# 
   477   000FAE                     RCREG           equ	4014	;# 
   478   000FAE                     RCREG1          equ	4014	;# 
   479   000FAF                     SPBRG           equ	4015	;# 
   480   000FAF                     SPBRG1          equ	4015	;# 
   481   000FB0                     SPBRGH          equ	4016	;# 
   482   000FB1                     T3CON           equ	4017	;# 
   483   000FB2                     TMR3            equ	4018	;# 
   484   000FB2                     TMR3L           equ	4018	;# 
   485   000FB3                     TMR3H           equ	4019	;# 
   486   000FB4                     CMCON           equ	4020	;# 
   487   000FB5                     CVRCON          equ	4021	;# 
   488   000FB6                     ECCP1AS         equ	4022	;# 
   489   000FB7                     ECCP1DEL        equ	4023	;# 
   490   000FB7                     PWM1CON         equ	4023	;# 
   491   000FB8                     BAUDCON         equ	4024	;# 
   492   000FB8                     BAUDCTL         equ	4024	;# 
   493   000FBA                     CCP2CON         equ	4026	;# 
   494   000FBB                     CCPR2           equ	4027	;# 
   495   000FBB                     CCPR2L          equ	4027	;# 
   496   000FBC                     CCPR2H          equ	4028	;# 
   497   000FBD                     CCP1CON         equ	4029	;# 
   498   000FBD                     ECCP1CON        equ	4029	;# 
   499   000FBE                     CCPR1           equ	4030	;# 
   500   000FBE                     CCPR1L          equ	4030	;# 
   501   000FBF                     CCPR1H          equ	4031	;# 
   502   000FC0                     ADCON2          equ	4032	;# 
   503   000FC1                     ADCON1          equ	4033	;# 
   504   000FC2                     ADCON0          equ	4034	;# 
   505   000FC3                     ADRES           equ	4035	;# 
   506   000FC3                     ADRESL          equ	4035	;# 
   507   000FC4                     ADRESH          equ	4036	;# 
   508   000FC5                     SSPCON2         equ	4037	;# 
   509   000FC6                     SSPCON1         equ	4038	;# 
   510   000FC7                     SSPSTAT         equ	4039	;# 
   511   000FC8                     SSPADD          equ	4040	;# 
   512   000FC9                     SSPBUF          equ	4041	;# 
   513   000FCA                     T2CON           equ	4042	;# 
   514   000FCB                     PR2             equ	4043	;# 
   515   000FCB                     MEMCON          equ	4043	;# 
   516   000FCC                     TMR2            equ	4044	;# 
   517   000FCD                     T1CON           equ	4045	;# 
   518   000FCE                     TMR1            equ	4046	;# 
   519   000FCE                     TMR1L           equ	4046	;# 
   520   000FCF                     TMR1H           equ	4047	;# 
   521   000FD0                     RCON            equ	4048	;# 
   522   000FD1                     WDTCON          equ	4049	;# 
   523   000FD2                     HLVDCON         equ	4050	;# 
   524   000FD2                     LVDCON          equ	4050	;# 
   525   000FD3                     OSCCON          equ	4051	;# 
   526   000FD5                     T0CON           equ	4053	;# 
   527   000FD6                     TMR0            equ	4054	;# 
   528   000FD6                     TMR0L           equ	4054	;# 
   529   000FD7                     TMR0H           equ	4055	;# 
   530   000FD8                     STATUS          equ	4056	;# 
   531   000FD9                     FSR2            equ	4057	;# 
   532   000FD9                     FSR2L           equ	4057	;# 
   533   000FDA                     FSR2H           equ	4058	;# 
   534   000FDB                     PLUSW2          equ	4059	;# 
   535   000FDC                     PREINC2         equ	4060	;# 
   536   000FDD                     POSTDEC2        equ	4061	;# 
   537   000FDE                     POSTINC2        equ	4062	;# 
   538   000FDF                     INDF2           equ	4063	;# 
   539   000FE0                     BSR             equ	4064	;# 
   540   000FE1                     FSR1            equ	4065	;# 
   541   000FE1                     FSR1L           equ	4065	;# 
   542   000FE2                     FSR1H           equ	4066	;# 
   543   000FE3                     PLUSW1          equ	4067	;# 
   544   000FE4                     PREINC1         equ	4068	;# 
   545   000FE5                     POSTDEC1        equ	4069	;# 
   546   000FE6                     POSTINC1        equ	4070	;# 
   547   000FE7                     INDF1           equ	4071	;# 
   548   000FE8                     WREG            equ	4072	;# 
   549   000FE9                     FSR0            equ	4073	;# 
   550   000FE9                     FSR0L           equ	4073	;# 
   551   000FEA                     FSR0H           equ	4074	;# 
   552   000FEB                     PLUSW0          equ	4075	;# 
   553   000FEC                     PREINC0         equ	4076	;# 
   554   000FED                     POSTDEC0        equ	4077	;# 
   555   000FEE                     POSTINC0        equ	4078	;# 
   556   000FEF                     INDF0           equ	4079	;# 
   557   000FF0                     INTCON3         equ	4080	;# 
   558   000FF1                     INTCON2         equ	4081	;# 
   559   000FF2                     INTCON          equ	4082	;# 
   560   000FF3                     PROD            equ	4083	;# 
   561   000FF3                     PRODL           equ	4083	;# 
   562   000FF4                     PRODH           equ	4084	;# 
   563   000FF5                     TABLAT          equ	4085	;# 
   564   000FF6                     TBLPTR          equ	4086	;# 
   565   000FF6                     TBLPTRL         equ	4086	;# 
   566   000FF7                     TBLPTRH         equ	4087	;# 
   567   000FF8                     TBLPTRU         equ	4088	;# 
   568   000FF9                     PCLAT           equ	4089	;# 
   569   000FF9                     PC              equ	4089	;# 
   570   000FF9                     PCL             equ	4089	;# 
   571   000FFA                     PCLATH          equ	4090	;# 
   572   000FFB                     PCLATU          equ	4091	;# 
   573   000FFC                     STKPTR          equ	4092	;# 
   574   000FFD                     TOS             equ	4093	;# 
   575   000FFD                     TOSL            equ	4093	;# 
   576   000FFE                     TOSH            equ	4094	;# 
   577   000FFF                     TOSU            equ	4095	;# 
   578   000F80                     PORTA           equ	3968	;# 
   579   000F81                     PORTB           equ	3969	;# 
   580   000F82                     PORTC           equ	3970	;# 
   581   000F83                     PORTD           equ	3971	;# 
   582   000F84                     PORTE           equ	3972	;# 
   583   000F89                     LATA            equ	3977	;# 
   584   000F8A                     LATB            equ	3978	;# 
   585   000F8B                     LATC            equ	3979	;# 
   586   000F8C                     LATD            equ	3980	;# 
   587   000F8D                     LATE            equ	3981	;# 
   588   000F92                     TRISA           equ	3986	;# 
   589   000F92                     DDRA            equ	3986	;# 
   590   000F93                     TRISB           equ	3987	;# 
   591   000F93                     DDRB            equ	3987	;# 
   592   000F94                     TRISC           equ	3988	;# 
   593   000F94                     DDRC            equ	3988	;# 
   594   000F95                     TRISD           equ	3989	;# 
   595   000F95                     DDRD            equ	3989	;# 
   596   000F96                     TRISE           equ	3990	;# 
   597   000F96                     DDRE            equ	3990	;# 
   598   000F9B                     OSCTUNE         equ	3995	;# 
   599   000F9D                     PIE1            equ	3997	;# 
   600   000F9E                     PIR1            equ	3998	;# 
   601   000F9F                     IPR1            equ	3999	;# 
   602   000FA0                     PIE2            equ	4000	;# 
   603   000FA1                     PIR2            equ	4001	;# 
   604   000FA2                     IPR2            equ	4002	;# 
   605   000FA6                     EECON1          equ	4006	;# 
   606   000FA7                     EECON2          equ	4007	;# 
   607   000FA8                     EEDATA          equ	4008	;# 
   608   000FA9                     EEADR           equ	4009	;# 
   609   000FAB                     RCSTA           equ	4011	;# 
   610   000FAB                     RCSTA1          equ	4011	;# 
   611   000FAC                     TXSTA           equ	4012	;# 
   612   000FAC                     TXSTA1          equ	4012	;# 
   613   000FAD                     TXREG           equ	4013	;# 
   614   000FAD                     TXREG1          equ	4013	;# 
   615   000FAE                     RCREG           equ	4014	;# 
   616   000FAE                     RCREG1          equ	4014	;# 
   617   000FAF                     SPBRG           equ	4015	;# 
   618   000FAF                     SPBRG1          equ	4015	;# 
   619   000FB0                     SPBRGH          equ	4016	;# 
   620   000FB1                     T3CON           equ	4017	;# 
   621   000FB2                     TMR3            equ	4018	;# 
   622   000FB2                     TMR3L           equ	4018	;# 
   623   000FB3                     TMR3H           equ	4019	;# 
   624   000FB4                     CMCON           equ	4020	;# 
   625   000FB5                     CVRCON          equ	4021	;# 
   626   000FB6                     ECCP1AS         equ	4022	;# 
   627   000FB7                     ECCP1DEL        equ	4023	;# 
   628   000FB7                     PWM1CON         equ	4023	;# 
   629   000FB8                     BAUDCON         equ	4024	;# 
   630   000FB8                     BAUDCTL         equ	4024	;# 
   631   000FBA                     CCP2CON         equ	4026	;# 
   632   000FBB                     CCPR2           equ	4027	;# 
   633   000FBB                     CCPR2L          equ	4027	;# 
   634   000FBC                     CCPR2H          equ	4028	;# 
   635   000FBD                     CCP1CON         equ	4029	;# 
   636   000FBD                     ECCP1CON        equ	4029	;# 
   637   000FBE                     CCPR1           equ	4030	;# 
   638   000FBE                     CCPR1L          equ	4030	;# 
   639   000FBF                     CCPR1H          equ	4031	;# 
   640   000FC0                     ADCON2          equ	4032	;# 
   641   000FC1                     ADCON1          equ	4033	;# 
   642   000FC2                     ADCON0          equ	4034	;# 
   643   000FC3                     ADRES           equ	4035	;# 
   644   000FC3                     ADRESL          equ	4035	;# 
   645   000FC4                     ADRESH          equ	4036	;# 
   646   000FC5                     SSPCON2         equ	4037	;# 
   647   000FC6                     SSPCON1         equ	4038	;# 
   648   000FC7                     SSPSTAT         equ	4039	;# 
   649   000FC8                     SSPADD          equ	4040	;# 
   650   000FC9                     SSPBUF          equ	4041	;# 
   651   000FCA                     T2CON           equ	4042	;# 
   652   000FCB                     PR2             equ	4043	;# 
   653   000FCB                     MEMCON          equ	4043	;# 
   654   000FCC                     TMR2            equ	4044	;# 
   655   000FCD                     T1CON           equ	4045	;# 
   656   000FCE                     TMR1            equ	4046	;# 
   657   000FCE                     TMR1L           equ	4046	;# 
   658   000FCF                     TMR1H           equ	4047	;# 
   659   000FD0                     RCON            equ	4048	;# 
   660   000FD1                     WDTCON          equ	4049	;# 
   661   000FD2                     HLVDCON         equ	4050	;# 
   662   000FD2                     LVDCON          equ	4050	;# 
   663   000FD3                     OSCCON          equ	4051	;# 
   664   000FD5                     T0CON           equ	4053	;# 
   665   000FD6                     TMR0            equ	4054	;# 
   666   000FD6                     TMR0L           equ	4054	;# 
   667   000FD7                     TMR0H           equ	4055	;# 
   668   000FD8                     STATUS          equ	4056	;# 
   669   000FD9                     FSR2            equ	4057	;# 
   670   000FD9                     FSR2L           equ	4057	;# 
   671   000FDA                     FSR2H           equ	4058	;# 
   672   000FDB                     PLUSW2          equ	4059	;# 
   673   000FDC                     PREINC2         equ	4060	;# 
   674   000FDD                     POSTDEC2        equ	4061	;# 
   675   000FDE                     POSTINC2        equ	4062	;# 
   676   000FDF                     INDF2           equ	4063	;# 
   677   000FE0                     BSR             equ	4064	;# 
   678   000FE1                     FSR1            equ	4065	;# 
   679   000FE1                     FSR1L           equ	4065	;# 
   680   000FE2                     FSR1H           equ	4066	;# 
   681   000FE3                     PLUSW1          equ	4067	;# 
   682   000FE4                     PREINC1         equ	4068	;# 
   683   000FE5                     POSTDEC1        equ	4069	;# 
   684   000FE6                     POSTINC1        equ	4070	;# 
   685   000FE7                     INDF1           equ	4071	;# 
   686   000FE8                     WREG            equ	4072	;# 
   687   000FE9                     FSR0            equ	4073	;# 
   688   000FE9                     FSR0L           equ	4073	;# 
   689   000FEA                     FSR0H           equ	4074	;# 
   690   000FEB                     PLUSW0          equ	4075	;# 
   691   000FEC                     PREINC0         equ	4076	;# 
   692   000FED                     POSTDEC0        equ	4077	;# 
   693   000FEE                     POSTINC0        equ	4078	;# 
   694   000FEF                     INDF0           equ	4079	;# 
   695   000FF0                     INTCON3         equ	4080	;# 
   696   000FF1                     INTCON2         equ	4081	;# 
   697   000FF2                     INTCON          equ	4082	;# 
   698   000FF3                     PROD            equ	4083	;# 
   699   000FF3                     PRODL           equ	4083	;# 
   700   000FF4                     PRODH           equ	4084	;# 
   701   000FF5                     TABLAT          equ	4085	;# 
   702   000FF6                     TBLPTR          equ	4086	;# 
   703   000FF6                     TBLPTRL         equ	4086	;# 
   704   000FF7                     TBLPTRH         equ	4087	;# 
   705   000FF8                     TBLPTRU         equ	4088	;# 
   706   000FF9                     PCLAT           equ	4089	;# 
   707   000FF9                     PC              equ	4089	;# 
   708   000FF9                     PCL             equ	4089	;# 
   709   000FFA                     PCLATH          equ	4090	;# 
   710   000FFB                     PCLATU          equ	4091	;# 
   711   000FFC                     STKPTR          equ	4092	;# 
   712   000FFD                     TOS             equ	4093	;# 
   713   000FFD                     TOSL            equ	4093	;# 
   714   000FFE                     TOSH            equ	4094	;# 
   715   000FFF                     TOSU            equ	4095	;# 
   716   000F80                     PORTA           equ	3968	;# 
   717   000F81                     PORTB           equ	3969	;# 
   718   000F82                     PORTC           equ	3970	;# 
   719   000F83                     PORTD           equ	3971	;# 
   720   000F84                     PORTE           equ	3972	;# 
   721   000F89                     LATA            equ	3977	;# 
   722   000F8A                     LATB            equ	3978	;# 
   723   000F8B                     LATC            equ	3979	;# 
   724   000F8C                     LATD            equ	3980	;# 
   725   000F8D                     LATE            equ	3981	;# 
   726   000F92                     TRISA           equ	3986	;# 
   727   000F92                     DDRA            equ	3986	;# 
   728   000F93                     TRISB           equ	3987	;# 
   729   000F93                     DDRB            equ	3987	;# 
   730   000F94                     TRISC           equ	3988	;# 
   731   000F94                     DDRC            equ	3988	;# 
   732   000F95                     TRISD           equ	3989	;# 
   733   000F95                     DDRD            equ	3989	;# 
   734   000F96                     TRISE           equ	3990	;# 
   735   000F96                     DDRE            equ	3990	;# 
   736   000F9B                     OSCTUNE         equ	3995	;# 
   737   000F9D                     PIE1            equ	3997	;# 
   738   000F9E                     PIR1            equ	3998	;# 
   739   000F9F                     IPR1            equ	3999	;# 
   740   000FA0                     PIE2            equ	4000	;# 
   741   000FA1                     PIR2            equ	4001	;# 
   742   000FA2                     IPR2            equ	4002	;# 
   743   000FA6                     EECON1          equ	4006	;# 
   744   000FA7                     EECON2          equ	4007	;# 
   745   000FA8                     EEDATA          equ	4008	;# 
   746   000FA9                     EEADR           equ	4009	;# 
   747   000FAB                     RCSTA           equ	4011	;# 
   748   000FAB                     RCSTA1          equ	4011	;# 
   749   000FAC                     TXSTA           equ	4012	;# 
   750   000FAC                     TXSTA1          equ	4012	;# 
   751   000FAD                     TXREG           equ	4013	;# 
   752   000FAD                     TXREG1          equ	4013	;# 
   753   000FAE                     RCREG           equ	4014	;# 
   754   000FAE                     RCREG1          equ	4014	;# 
   755   000FAF                     SPBRG           equ	4015	;# 
   756   000FAF                     SPBRG1          equ	4015	;# 
   757   000FB0                     SPBRGH          equ	4016	;# 
   758   000FB1                     T3CON           equ	4017	;# 
   759   000FB2                     TMR3            equ	4018	;# 
   760   000FB2                     TMR3L           equ	4018	;# 
   761   000FB3                     TMR3H           equ	4019	;# 
   762   000FB4                     CMCON           equ	4020	;# 
   763   000FB5                     CVRCON          equ	4021	;# 
   764   000FB6                     ECCP1AS         equ	4022	;# 
   765   000FB7                     ECCP1DEL        equ	4023	;# 
   766   000FB7                     PWM1CON         equ	4023	;# 
   767   000FB8                     BAUDCON         equ	4024	;# 
   768   000FB8                     BAUDCTL         equ	4024	;# 
   769   000FBA                     CCP2CON         equ	4026	;# 
   770   000FBB                     CCPR2           equ	4027	;# 
   771   000FBB                     CCPR2L          equ	4027	;# 
   772   000FBC                     CCPR2H          equ	4028	;# 
   773   000FBD                     CCP1CON         equ	4029	;# 
   774   000FBD                     ECCP1CON        equ	4029	;# 
   775   000FBE                     CCPR1           equ	4030	;# 
   776   000FBE                     CCPR1L          equ	4030	;# 
   777   000FBF                     CCPR1H          equ	4031	;# 
   778   000FC0                     ADCON2          equ	4032	;# 
   779   000FC1                     ADCON1          equ	4033	;# 
   780   000FC2                     ADCON0          equ	4034	;# 
   781   000FC3                     ADRES           equ	4035	;# 
   782   000FC3                     ADRESL          equ	4035	;# 
   783   000FC4                     ADRESH          equ	4036	;# 
   784   000FC5                     SSPCON2         equ	4037	;# 
   785   000FC6                     SSPCON1         equ	4038	;# 
   786   000FC7                     SSPSTAT         equ	4039	;# 
   787   000FC8                     SSPADD          equ	4040	;# 
   788   000FC9                     SSPBUF          equ	4041	;# 
   789   000FCA                     T2CON           equ	4042	;# 
   790   000FCB                     PR2             equ	4043	;# 
   791   000FCB                     MEMCON          equ	4043	;# 
   792   000FCC                     TMR2            equ	4044	;# 
   793   000FCD                     T1CON           equ	4045	;# 
   794   000FCE                     TMR1            equ	4046	;# 
   795   000FCE                     TMR1L           equ	4046	;# 
   796   000FCF                     TMR1H           equ	4047	;# 
   797   000FD0                     RCON            equ	4048	;# 
   798   000FD1                     WDTCON          equ	4049	;# 
   799   000FD2                     HLVDCON         equ	4050	;# 
   800   000FD2                     LVDCON          equ	4050	;# 
   801   000FD3                     OSCCON          equ	4051	;# 
   802   000FD5                     T0CON           equ	4053	;# 
   803   000FD6                     TMR0            equ	4054	;# 
   804   000FD6                     TMR0L           equ	4054	;# 
   805   000FD7                     TMR0H           equ	4055	;# 
   806   000FD8                     STATUS          equ	4056	;# 
   807   000FD9                     FSR2            equ	4057	;# 
   808   000FD9                     FSR2L           equ	4057	;# 
   809   000FDA                     FSR2H           equ	4058	;# 
   810   000FDB                     PLUSW2          equ	4059	;# 
   811   000FDC                     PREINC2         equ	4060	;# 
   812   000FDD                     POSTDEC2        equ	4061	;# 
   813   000FDE                     POSTINC2        equ	4062	;# 
   814   000FDF                     INDF2           equ	4063	;# 
   815   000FE0                     BSR             equ	4064	;# 
   816   000FE1                     FSR1            equ	4065	;# 
   817   000FE1                     FSR1L           equ	4065	;# 
   818   000FE2                     FSR1H           equ	4066	;# 
   819   000FE3                     PLUSW1          equ	4067	;# 
   820   000FE4                     PREINC1         equ	4068	;# 
   821   000FE5                     POSTDEC1        equ	4069	;# 
   822   000FE6                     POSTINC1        equ	4070	;# 
   823   000FE7                     INDF1           equ	4071	;# 
   824   000FE8                     WREG            equ	4072	;# 
   825   000FE9                     FSR0            equ	4073	;# 
   826   000FE9                     FSR0L           equ	4073	;# 
   827   000FEA                     FSR0H           equ	4074	;# 
   828   000FEB                     PLUSW0          equ	4075	;# 
   829   000FEC                     PREINC0         equ	4076	;# 
   830   000FED                     POSTDEC0        equ	4077	;# 
   831   000FEE                     POSTINC0        equ	4078	;# 
   832   000FEF                     INDF0           equ	4079	;# 
   833   000FF0                     INTCON3         equ	4080	;# 
   834   000FF1                     INTCON2         equ	4081	;# 
   835   000FF2                     INTCON          equ	4082	;# 
   836   000FF3                     PROD            equ	4083	;# 
   837   000FF3                     PRODL           equ	4083	;# 
   838   000FF4                     PRODH           equ	4084	;# 
   839   000FF5                     TABLAT          equ	4085	;# 
   840   000FF6                     TBLPTR          equ	4086	;# 
   841   000FF6                     TBLPTRL         equ	4086	;# 
   842   000FF7                     TBLPTRH         equ	4087	;# 
   843   000FF8                     TBLPTRU         equ	4088	;# 
   844   000FF9                     PCLAT           equ	4089	;# 
   845   000FF9                     PC              equ	4089	;# 
   846   000FF9                     PCL             equ	4089	;# 
   847   000FFA                     PCLATH          equ	4090	;# 
   848   000FFB                     PCLATU          equ	4091	;# 
   849   000FFC                     STKPTR          equ	4092	;# 
   850   000FFD                     TOS             equ	4093	;# 
   851   000FFD                     TOSL            equ	4093	;# 
   852   000FFE                     TOSH            equ	4094	;# 
   853   000FFF                     TOSU            equ	4095	;# 
   854   000F80                     PORTA           equ	3968	;# 
   855   000F81                     PORTB           equ	3969	;# 
   856   000F82                     PORTC           equ	3970	;# 
   857   000F83                     PORTD           equ	3971	;# 
   858   000F84                     PORTE           equ	3972	;# 
   859   000F89                     LATA            equ	3977	;# 
   860   000F8A                     LATB            equ	3978	;# 
   861   000F8B                     LATC            equ	3979	;# 
   862   000F8C                     LATD            equ	3980	;# 
   863   000F8D                     LATE            equ	3981	;# 
   864   000F92                     TRISA           equ	3986	;# 
   865   000F92                     DDRA            equ	3986	;# 
   866   000F93                     TRISB           equ	3987	;# 
   867   000F93                     DDRB            equ	3987	;# 
   868   000F94                     TRISC           equ	3988	;# 
   869   000F94                     DDRC            equ	3988	;# 
   870   000F95                     TRISD           equ	3989	;# 
   871   000F95                     DDRD            equ	3989	;# 
   872   000F96                     TRISE           equ	3990	;# 
   873   000F96                     DDRE            equ	3990	;# 
   874   000F9B                     OSCTUNE         equ	3995	;# 
   875   000F9D                     PIE1            equ	3997	;# 
   876   000F9E                     PIR1            equ	3998	;# 
   877   000F9F                     IPR1            equ	3999	;# 
   878   000FA0                     PIE2            equ	4000	;# 
   879   000FA1                     PIR2            equ	4001	;# 
   880   000FA2                     IPR2            equ	4002	;# 
   881   000FA6                     EECON1          equ	4006	;# 
   882   000FA7                     EECON2          equ	4007	;# 
   883   000FA8                     EEDATA          equ	4008	;# 
   884   000FA9                     EEADR           equ	4009	;# 
   885   000FAB                     RCSTA           equ	4011	;# 
   886   000FAB                     RCSTA1          equ	4011	;# 
   887   000FAC                     TXSTA           equ	4012	;# 
   888   000FAC                     TXSTA1          equ	4012	;# 
   889   000FAD                     TXREG           equ	4013	;# 
   890   000FAD                     TXREG1          equ	4013	;# 
   891   000FAE                     RCREG           equ	4014	;# 
   892   000FAE                     RCREG1          equ	4014	;# 
   893   000FAF                     SPBRG           equ	4015	;# 
   894   000FAF                     SPBRG1          equ	4015	;# 
   895   000FB0                     SPBRGH          equ	4016	;# 
   896   000FB1                     T3CON           equ	4017	;# 
   897   000FB2                     TMR3            equ	4018	;# 
   898   000FB2                     TMR3L           equ	4018	;# 
   899   000FB3                     TMR3H           equ	4019	;# 
   900   000FB4                     CMCON           equ	4020	;# 
   901   000FB5                     CVRCON          equ	4021	;# 
   902   000FB6                     ECCP1AS         equ	4022	;# 
   903   000FB7                     ECCP1DEL        equ	4023	;# 
   904   000FB7                     PWM1CON         equ	4023	;# 
   905   000FB8                     BAUDCON         equ	4024	;# 
   906   000FB8                     BAUDCTL         equ	4024	;# 
   907   000FBA                     CCP2CON         equ	4026	;# 
   908   000FBB                     CCPR2           equ	4027	;# 
   909   000FBB                     CCPR2L          equ	4027	;# 
   910   000FBC                     CCPR2H          equ	4028	;# 
   911   000FBD                     CCP1CON         equ	4029	;# 
   912   000FBD                     ECCP1CON        equ	4029	;# 
   913   000FBE                     CCPR1           equ	4030	;# 
   914   000FBE                     CCPR1L          equ	4030	;# 
   915   000FBF                     CCPR1H          equ	4031	;# 
   916   000FC0                     ADCON2          equ	4032	;# 
   917   000FC1                     ADCON1          equ	4033	;# 
   918   000FC2                     ADCON0          equ	4034	;# 
   919   000FC3                     ADRES           equ	4035	;# 
   920   000FC3                     ADRESL          equ	4035	;# 
   921   000FC4                     ADRESH          equ	4036	;# 
   922   000FC5                     SSPCON2         equ	4037	;# 
   923   000FC6                     SSPCON1         equ	4038	;# 
   924   000FC7                     SSPSTAT         equ	4039	;# 
   925   000FC8                     SSPADD          equ	4040	;# 
   926   000FC9                     SSPBUF          equ	4041	;# 
   927   000FCA                     T2CON           equ	4042	;# 
   928   000FCB                     PR2             equ	4043	;# 
   929   000FCB                     MEMCON          equ	4043	;# 
   930   000FCC                     TMR2            equ	4044	;# 
   931   000FCD                     T1CON           equ	4045	;# 
   932   000FCE                     TMR1            equ	4046	;# 
   933   000FCE                     TMR1L           equ	4046	;# 
   934   000FCF                     TMR1H           equ	4047	;# 
   935   000FD0                     RCON            equ	4048	;# 
   936   000FD1                     WDTCON          equ	4049	;# 
   937   000FD2                     HLVDCON         equ	4050	;# 
   938   000FD2                     LVDCON          equ	4050	;# 
   939   000FD3                     OSCCON          equ	4051	;# 
   940   000FD5                     T0CON           equ	4053	;# 
   941   000FD6                     TMR0            equ	4054	;# 
   942   000FD6                     TMR0L           equ	4054	;# 
   943   000FD7                     TMR0H           equ	4055	;# 
   944   000FD8                     STATUS          equ	4056	;# 
   945   000FD9                     FSR2            equ	4057	;# 
   946   000FD9                     FSR2L           equ	4057	;# 
   947   000FDA                     FSR2H           equ	4058	;# 
   948   000FDB                     PLUSW2          equ	4059	;# 
   949   000FDC                     PREINC2         equ	4060	;# 
   950   000FDD                     POSTDEC2        equ	4061	;# 
   951   000FDE                     POSTINC2        equ	4062	;# 
   952   000FDF                     INDF2           equ	4063	;# 
   953   000FE0                     BSR             equ	4064	;# 
   954   000FE1                     FSR1            equ	4065	;# 
   955   000FE1                     FSR1L           equ	4065	;# 
   956   000FE2                     FSR1H           equ	4066	;# 
   957   000FE3                     PLUSW1          equ	4067	;# 
   958   000FE4                     PREINC1         equ	4068	;# 
   959   000FE5                     POSTDEC1        equ	4069	;# 
   960   000FE6                     POSTINC1        equ	4070	;# 
   961   000FE7                     INDF1           equ	4071	;# 
   962   000FE8                     WREG            equ	4072	;# 
   963   000FE9                     FSR0            equ	4073	;# 
   964   000FE9                     FSR0L           equ	4073	;# 
   965   000FEA                     FSR0H           equ	4074	;# 
   966   000FEB                     PLUSW0          equ	4075	;# 
   967   000FEC                     PREINC0         equ	4076	;# 
   968   000FED                     POSTDEC0        equ	4077	;# 
   969   000FEE                     POSTINC0        equ	4078	;# 
   970   000FEF                     INDF0           equ	4079	;# 
   971   000FF0                     INTCON3         equ	4080	;# 
   972   000FF1                     INTCON2         equ	4081	;# 
   973   000FF2                     INTCON          equ	4082	;# 
   974   000FF3                     PROD            equ	4083	;# 
   975   000FF3                     PRODL           equ	4083	;# 
   976   000FF4                     PRODH           equ	4084	;# 
   977   000FF5                     TABLAT          equ	4085	;# 
   978   000FF6                     TBLPTR          equ	4086	;# 
   979   000FF6                     TBLPTRL         equ	4086	;# 
   980   000FF7                     TBLPTRH         equ	4087	;# 
   981   000FF8                     TBLPTRU         equ	4088	;# 
   982   000FF9                     PCLAT           equ	4089	;# 
   983   000FF9                     PC              equ	4089	;# 
   984   000FF9                     PCL             equ	4089	;# 
   985   000FFA                     PCLATH          equ	4090	;# 
   986   000FFB                     PCLATU          equ	4091	;# 
   987   000FFC                     STKPTR          equ	4092	;# 
   988   000FFD                     TOS             equ	4093	;# 
   989   000FFD                     TOSL            equ	4093	;# 
   990   000FFE                     TOSH            equ	4094	;# 
   991   000FFF                     TOSU            equ	4095	;# 
   992   000F80                     PORTA           equ	3968	;# 
   993   000F81                     PORTB           equ	3969	;# 
   994   000F82                     PORTC           equ	3970	;# 
   995   000F83                     PORTD           equ	3971	;# 
   996   000F84                     PORTE           equ	3972	;# 
   997   000F89                     LATA            equ	3977	;# 
   998   000F8A                     LATB            equ	3978	;# 
   999   000F8B                     LATC            equ	3979	;# 
  1000   000F8C                     LATD            equ	3980	;# 
  1001   000F8D                     LATE            equ	3981	;# 
  1002   000F92                     TRISA           equ	3986	;# 
  1003   000F92                     DDRA            equ	3986	;# 
  1004   000F93                     TRISB           equ	3987	;# 
  1005   000F93                     DDRB            equ	3987	;# 
  1006   000F94                     TRISC           equ	3988	;# 
  1007   000F94                     DDRC            equ	3988	;# 
  1008   000F95                     TRISD           equ	3989	;# 
  1009   000F95                     DDRD            equ	3989	;# 
  1010   000F96                     TRISE           equ	3990	;# 
  1011   000F96                     DDRE            equ	3990	;# 
  1012   000F9B                     OSCTUNE         equ	3995	;# 
  1013   000F9D                     PIE1            equ	3997	;# 
  1014   000F9E                     PIR1            equ	3998	;# 
  1015   000F9F                     IPR1            equ	3999	;# 
  1016   000FA0                     PIE2            equ	4000	;# 
  1017   000FA1                     PIR2            equ	4001	;# 
  1018   000FA2                     IPR2            equ	4002	;# 
  1019   000FA6                     EECON1          equ	4006	;# 
  1020   000FA7                     EECON2          equ	4007	;# 
  1021   000FA8                     EEDATA          equ	4008	;# 
  1022   000FA9                     EEADR           equ	4009	;# 
  1023   000FAB                     RCSTA           equ	4011	;# 
  1024   000FAB                     RCSTA1          equ	4011	;# 
  1025   000FAC                     TXSTA           equ	4012	;# 
  1026   000FAC                     TXSTA1          equ	4012	;# 
  1027   000FAD                     TXREG           equ	4013	;# 
  1028   000FAD                     TXREG1          equ	4013	;# 
  1029   000FAE                     RCREG           equ	4014	;# 
  1030   000FAE                     RCREG1          equ	4014	;# 
  1031   000FAF                     SPBRG           equ	4015	;# 
  1032   000FAF                     SPBRG1          equ	4015	;# 
  1033   000FB0                     SPBRGH          equ	4016	;# 
  1034   000FB1                     T3CON           equ	4017	;# 
  1035   000FB2                     TMR3            equ	4018	;# 
  1036   000FB2                     TMR3L           equ	4018	;# 
  1037   000FB3                     TMR3H           equ	4019	;# 
  1038   000FB4                     CMCON           equ	4020	;# 
  1039   000FB5                     CVRCON          equ	4021	;# 
  1040   000FB6                     ECCP1AS         equ	4022	;# 
  1041   000FB7                     ECCP1DEL        equ	4023	;# 
  1042   000FB7                     PWM1CON         equ	4023	;# 
  1043   000FB8                     BAUDCON         equ	4024	;# 
  1044   000FB8                     BAUDCTL         equ	4024	;# 
  1045   000FBA                     CCP2CON         equ	4026	;# 
  1046   000FBB                     CCPR2           equ	4027	;# 
  1047   000FBB                     CCPR2L          equ	4027	;# 
  1048   000FBC                     CCPR2H          equ	4028	;# 
  1049   000FBD                     CCP1CON         equ	4029	;# 
  1050   000FBD                     ECCP1CON        equ	4029	;# 
  1051   000FBE                     CCPR1           equ	4030	;# 
  1052   000FBE                     CCPR1L          equ	4030	;# 
  1053   000FBF                     CCPR1H          equ	4031	;# 
  1054   000FC0                     ADCON2          equ	4032	;# 
  1055   000FC1                     ADCON1          equ	4033	;# 
  1056   000FC2                     ADCON0          equ	4034	;# 
  1057   000FC3                     ADRES           equ	4035	;# 
  1058   000FC3                     ADRESL          equ	4035	;# 
  1059   000FC4                     ADRESH          equ	4036	;# 
  1060   000FC5                     SSPCON2         equ	4037	;# 
  1061   000FC6                     SSPCON1         equ	4038	;# 
  1062   000FC7                     SSPSTAT         equ	4039	;# 
  1063   000FC8                     SSPADD          equ	4040	;# 
  1064   000FC9                     SSPBUF          equ	4041	;# 
  1065   000FCA                     T2CON           equ	4042	;# 
  1066   000FCB                     PR2             equ	4043	;# 
  1067   000FCB                     MEMCON          equ	4043	;# 
  1068   000FCC                     TMR2            equ	4044	;# 
  1069   000FCD                     T1CON           equ	4045	;# 
  1070   000FCE                     TMR1            equ	4046	;# 
  1071   000FCE                     TMR1L           equ	4046	;# 
  1072   000FCF                     TMR1H           equ	4047	;# 
  1073   000FD0                     RCON            equ	4048	;# 
  1074   000FD1                     WDTCON          equ	4049	;# 
  1075   000FD2                     HLVDCON         equ	4050	;# 
  1076   000FD2                     LVDCON          equ	4050	;# 
  1077   000FD3                     OSCCON          equ	4051	;# 
  1078   000FD5                     T0CON           equ	4053	;# 
  1079   000FD6                     TMR0            equ	4054	;# 
  1080   000FD6                     TMR0L           equ	4054	;# 
  1081   000FD7                     TMR0H           equ	4055	;# 
  1082   000FD8                     STATUS          equ	4056	;# 
  1083   000FD9                     FSR2            equ	4057	;# 
  1084   000FD9                     FSR2L           equ	4057	;# 
  1085   000FDA                     FSR2H           equ	4058	;# 
  1086   000FDB                     PLUSW2          equ	4059	;# 
  1087   000FDC                     PREINC2         equ	4060	;# 
  1088   000FDD                     POSTDEC2        equ	4061	;# 
  1089   000FDE                     POSTINC2        equ	4062	;# 
  1090   000FDF                     INDF2           equ	4063	;# 
  1091   000FE0                     BSR             equ	4064	;# 
  1092   000FE1                     FSR1            equ	4065	;# 
  1093   000FE1                     FSR1L           equ	4065	;# 
  1094   000FE2                     FSR1H           equ	4066	;# 
  1095   000FE3                     PLUSW1          equ	4067	;# 
  1096   000FE4                     PREINC1         equ	4068	;# 
  1097   000FE5                     POSTDEC1        equ	4069	;# 
  1098   000FE6                     POSTINC1        equ	4070	;# 
  1099   000FE7                     INDF1           equ	4071	;# 
  1100   000FE8                     WREG            equ	4072	;# 
  1101   000FE9                     FSR0            equ	4073	;# 
  1102   000FE9                     FSR0L           equ	4073	;# 
  1103   000FEA                     FSR0H           equ	4074	;# 
  1104   000FEB                     PLUSW0          equ	4075	;# 
  1105   000FEC                     PREINC0         equ	4076	;# 
  1106   000FED                     POSTDEC0        equ	4077	;# 
  1107   000FEE                     POSTINC0        equ	4078	;# 
  1108   000FEF                     INDF0           equ	4079	;# 
  1109   000FF0                     INTCON3         equ	4080	;# 
  1110   000FF1                     INTCON2         equ	4081	;# 
  1111   000FF2                     INTCON          equ	4082	;# 
  1112   000FF3                     PROD            equ	4083	;# 
  1113   000FF3                     PRODL           equ	4083	;# 
  1114   000FF4                     PRODH           equ	4084	;# 
  1115   000FF5                     TABLAT          equ	4085	;# 
  1116   000FF6                     TBLPTR          equ	4086	;# 
  1117   000FF6                     TBLPTRL         equ	4086	;# 
  1118   000FF7                     TBLPTRH         equ	4087	;# 
  1119   000FF8                     TBLPTRU         equ	4088	;# 
  1120   000FF9                     PCLAT           equ	4089	;# 
  1121   000FF9                     PC              equ	4089	;# 
  1122   000FF9                     PCL             equ	4089	;# 
  1123   000FFA                     PCLATH          equ	4090	;# 
  1124   000FFB                     PCLATU          equ	4091	;# 
  1125   000FFC                     STKPTR          equ	4092	;# 
  1126   000FFD                     TOS             equ	4093	;# 
  1127   000FFD                     TOSL            equ	4093	;# 
  1128   000FFE                     TOSH            equ	4094	;# 
  1129   000FFF                     TOSU            equ	4095	;# 
  1130   000F80                     PORTA           equ	3968	;# 
  1131   000F81                     PORTB           equ	3969	;# 
  1132   000F82                     PORTC           equ	3970	;# 
  1133   000F83                     PORTD           equ	3971	;# 
  1134   000F84                     PORTE           equ	3972	;# 
  1135   000F89                     LATA            equ	3977	;# 
  1136   000F8A                     LATB            equ	3978	;# 
  1137   000F8B                     LATC            equ	3979	;# 
  1138   000F8C                     LATD            equ	3980	;# 
  1139   000F8D                     LATE            equ	3981	;# 
  1140   000F92                     TRISA           equ	3986	;# 
  1141   000F92                     DDRA            equ	3986	;# 
  1142   000F93                     TRISB           equ	3987	;# 
  1143   000F93                     DDRB            equ	3987	;# 
  1144   000F94                     TRISC           equ	3988	;# 
  1145   000F94                     DDRC            equ	3988	;# 
  1146   000F95                     TRISD           equ	3989	;# 
  1147   000F95                     DDRD            equ	3989	;# 
  1148   000F96                     TRISE           equ	3990	;# 
  1149   000F96                     DDRE            equ	3990	;# 
  1150   000F9B                     OSCTUNE         equ	3995	;# 
  1151   000F9D                     PIE1            equ	3997	;# 
  1152   000F9E                     PIR1            equ	3998	;# 
  1153   000F9F                     IPR1            equ	3999	;# 
  1154   000FA0                     PIE2            equ	4000	;# 
  1155   000FA1                     PIR2            equ	4001	;# 
  1156   000FA2                     IPR2            equ	4002	;# 
  1157   000FA6                     EECON1          equ	4006	;# 
  1158   000FA7                     EECON2          equ	4007	;# 
  1159   000FA8                     EEDATA          equ	4008	;# 
  1160   000FA9                     EEADR           equ	4009	;# 
  1161   000FAB                     RCSTA           equ	4011	;# 
  1162   000FAB                     RCSTA1          equ	4011	;# 
  1163   000FAC                     TXSTA           equ	4012	;# 
  1164   000FAC                     TXSTA1          equ	4012	;# 
  1165   000FAD                     TXREG           equ	4013	;# 
  1166   000FAD                     TXREG1          equ	4013	;# 
  1167   000FAE                     RCREG           equ	4014	;# 
  1168   000FAE                     RCREG1          equ	4014	;# 
  1169   000FAF                     SPBRG           equ	4015	;# 
  1170   000FAF                     SPBRG1          equ	4015	;# 
  1171   000FB0                     SPBRGH          equ	4016	;# 
  1172   000FB1                     T3CON           equ	4017	;# 
  1173   000FB2                     TMR3            equ	4018	;# 
  1174   000FB2                     TMR3L           equ	4018	;# 
  1175   000FB3                     TMR3H           equ	4019	;# 
  1176   000FB4                     CMCON           equ	4020	;# 
  1177   000FB5                     CVRCON          equ	4021	;# 
  1178   000FB6                     ECCP1AS         equ	4022	;# 
  1179   000FB7                     ECCP1DEL        equ	4023	;# 
  1180   000FB7                     PWM1CON         equ	4023	;# 
  1181   000FB8                     BAUDCON         equ	4024	;# 
  1182   000FB8                     BAUDCTL         equ	4024	;# 
  1183   000FBA                     CCP2CON         equ	4026	;# 
  1184   000FBB                     CCPR2           equ	4027	;# 
  1185   000FBB                     CCPR2L          equ	4027	;# 
  1186   000FBC                     CCPR2H          equ	4028	;# 
  1187   000FBD                     CCP1CON         equ	4029	;# 
  1188   000FBD                     ECCP1CON        equ	4029	;# 
  1189   000FBE                     CCPR1           equ	4030	;# 
  1190   000FBE                     CCPR1L          equ	4030	;# 
  1191   000FBF                     CCPR1H          equ	4031	;# 
  1192   000FC0                     ADCON2          equ	4032	;# 
  1193   000FC1                     ADCON1          equ	4033	;# 
  1194   000FC2                     ADCON0          equ	4034	;# 
  1195   000FC3                     ADRES           equ	4035	;# 
  1196   000FC3                     ADRESL          equ	4035	;# 
  1197   000FC4                     ADRESH          equ	4036	;# 
  1198   000FC5                     SSPCON2         equ	4037	;# 
  1199   000FC6                     SSPCON1         equ	4038	;# 
  1200   000FC7                     SSPSTAT         equ	4039	;# 
  1201   000FC8                     SSPADD          equ	4040	;# 
  1202   000FC9                     SSPBUF          equ	4041	;# 
  1203   000FCA                     T2CON           equ	4042	;# 
  1204   000FCB                     PR2             equ	4043	;# 
  1205   000FCB                     MEMCON          equ	4043	;# 
  1206   000FCC                     TMR2            equ	4044	;# 
  1207   000FCD                     T1CON           equ	4045	;# 
  1208   000FCE                     TMR1            equ	4046	;# 
  1209   000FCE                     TMR1L           equ	4046	;# 
  1210   000FCF                     TMR1H           equ	4047	;# 
  1211   000FD0                     RCON            equ	4048	;# 
  1212   000FD1                     WDTCON          equ	4049	;# 
  1213   000FD2                     HLVDCON         equ	4050	;# 
  1214   000FD2                     LVDCON          equ	4050	;# 
  1215   000FD3                     OSCCON          equ	4051	;# 
  1216   000FD5                     T0CON           equ	4053	;# 
  1217   000FD6                     TMR0            equ	4054	;# 
  1218   000FD6                     TMR0L           equ	4054	;# 
  1219   000FD7                     TMR0H           equ	4055	;# 
  1220   000FD8                     STATUS          equ	4056	;# 
  1221   000FD9                     FSR2            equ	4057	;# 
  1222   000FD9                     FSR2L           equ	4057	;# 
  1223   000FDA                     FSR2H           equ	4058	;# 
  1224   000FDB                     PLUSW2          equ	4059	;# 
  1225   000FDC                     PREINC2         equ	4060	;# 
  1226   000FDD                     POSTDEC2        equ	4061	;# 
  1227   000FDE                     POSTINC2        equ	4062	;# 
  1228   000FDF                     INDF2           equ	4063	;# 
  1229   000FE0                     BSR             equ	4064	;# 
  1230   000FE1                     FSR1            equ	4065	;# 
  1231   000FE1                     FSR1L           equ	4065	;# 
  1232   000FE2                     FSR1H           equ	4066	;# 
  1233   000FE3                     PLUSW1          equ	4067	;# 
  1234   000FE4                     PREINC1         equ	4068	;# 
  1235   000FE5                     POSTDEC1        equ	4069	;# 
  1236   000FE6                     POSTINC1        equ	4070	;# 
  1237   000FE7                     INDF1           equ	4071	;# 
  1238   000FE8                     WREG            equ	4072	;# 
  1239   000FE9                     FSR0            equ	4073	;# 
  1240   000FE9                     FSR0L           equ	4073	;# 
  1241   000FEA                     FSR0H           equ	4074	;# 
  1242   000FEB                     PLUSW0          equ	4075	;# 
  1243   000FEC                     PREINC0         equ	4076	;# 
  1244   000FED                     POSTDEC0        equ	4077	;# 
  1245   000FEE                     POSTINC0        equ	4078	;# 
  1246   000FEF                     INDF0           equ	4079	;# 
  1247   000FF0                     INTCON3         equ	4080	;# 
  1248   000FF1                     INTCON2         equ	4081	;# 
  1249   000FF2                     INTCON          equ	4082	;# 
  1250   000FF3                     PROD            equ	4083	;# 
  1251   000FF3                     PRODL           equ	4083	;# 
  1252   000FF4                     PRODH           equ	4084	;# 
  1253   000FF5                     TABLAT          equ	4085	;# 
  1254   000FF6                     TBLPTR          equ	4086	;# 
  1255   000FF6                     TBLPTRL         equ	4086	;# 
  1256   000FF7                     TBLPTRH         equ	4087	;# 
  1257   000FF8                     TBLPTRU         equ	4088	;# 
  1258   000FF9                     PCLAT           equ	4089	;# 
  1259   000FF9                     PC              equ	4089	;# 
  1260   000FF9                     PCL             equ	4089	;# 
  1261   000FFA                     PCLATH          equ	4090	;# 
  1262   000FFB                     PCLATU          equ	4091	;# 
  1263   000FFC                     STKPTR          equ	4092	;# 
  1264   000FFD                     TOS             equ	4093	;# 
  1265   000FFD                     TOSL            equ	4093	;# 
  1266   000FFE                     TOSH            equ	4094	;# 
  1267   000FFF                     TOSU            equ	4095	;# 
  1268                           
  1269                           	psect	idataCOMRAM
  1270   001E22                     __pidataCOMRAM:
  1271                           	callstack 0
  1272                           
  1273                           ;initializer for MFRC522_ToCard_NOU@_status
  1274   001E22  02                 	db	2
  1275                           
  1276                           ;initializer for MFRC522_ToCard@_status
  1277   001E23  02                 	db	2
  1278                           
  1279                           ;initializer for MFRC522_CRC_NOU@step
  1280   001E24  01                 	db	1
  1281                           
  1282                           ;initializer for MFRC522_CRC@step
  1283   001E25  01                 	db	1
  1284                           
  1285                           	psect	idataBANK0
  1286   001CA8                     __pidataBANK0:
  1287                           	callstack 0
  1288                           
  1289                           ;initializer for _leds_saved@TAD_MENU$F1708
  1290   001CA8  00                 	db	0
  1291   001CA9  00                 	db	0
  1292   001CAA  00                 	db	0
  1293   001CAB  00                 	db	0
  1294   001CAC  00                 	db	0
  1295   001CAD  00                 	db	0
  1296   001CAE  01                 	db	1
  1297   001CAF  02                 	db	2
  1298   001CB0  03                 	db	3
  1299   001CB1  04                 	db	4
  1300   001CB2  05                 	db	5
  1301   001CB3  06                 	db	6
  1302   001CB4  0A                 	db	10
  1303   001CB5  0A                 	db	10
  1304   001CB6  0A                 	db	10
  1305   001CB7  0A                 	db	10
  1306   001CB8  0A                 	db	10
  1307   001CB9  0A                 	db	10
  1308   001CBA  01                 	db	1
  1309   001CBB  01                 	db	1
  1310   001CBC  01                 	db	1
  1311   001CBD  01                 	db	1
  1312   001CBE  01                 	db	1
  1313   001CBF  01                 	db	1
  1314   001CC0  00                 	db	0
  1315   001CC1  02                 	db	2
  1316   001CC2  04                 	db	4
  1317   001CC3  06                 	db	6
  1318   001CC4  08                 	db	8
  1319   001CC5  0A                 	db	10
  1320   001CC6  00                 	db	0
  1321   001CC7  02                 	db	2
  1322   001CC8  04                 	db	4
  1323   001CC9  06                 	db	6
  1324   001CCA  08                 	db	8
  1325   001CCB  0A                 	db	10
  1326                           
  1327                           ;initializer for _leds_saved@TAD_MENU$F1001
  1328                           
  1329                           	psect	idataBANK1
  1330   0019BA                     __pidataBANK1:
  1331                           	callstack 0
  1332   0019BA  00                 	db	0
  1333   0019BB  00                 	db	0
  1334   0019BC  00                 	db	0
  1335   0019BD  00                 	db	0
  1336   0019BE  00                 	db	0
  1337   0019BF  00                 	db	0
  1338   0019C0  01                 	db	1
  1339   0019C1  02                 	db	2
  1340   0019C2  03                 	db	3
  1341   0019C3  04                 	db	4
  1342   0019C4  05                 	db	5
  1343   0019C5  06                 	db	6
  1344   0019C6  0A                 	db	10
  1345   0019C7  0A                 	db	10
  1346   0019C8  0A                 	db	10
  1347   0019C9  0A                 	db	10
  1348   0019CA  0A                 	db	10
  1349   0019CB  0A                 	db	10
  1350   0019CC  01                 	db	1
  1351   0019CD  01                 	db	1
  1352   0019CE  01                 	db	1
  1353   0019CF  01                 	db	1
  1354   0019D0  01                 	db	1
  1355   0019D1  01                 	db	1
  1356   0019D2  00                 	db	0
  1357   0019D3  02                 	db	2
  1358   0019D4  04                 	db	4
  1359   0019D5  06                 	db	6
  1360   0019D6  08                 	db	8
  1361   0019D7  0A                 	db	10
  1362   0019D8  00                 	db	0
  1363   0019D9  02                 	db	2
  1364   0019DA  04                 	db	4
  1365   0019DB  06                 	db	6
  1366   0019DC  08                 	db	8
  1367   0019DD  0A                 	db	10
  1368                           
  1369                           ;initializer for _leds_saved
  1370   0019DE  00                 	db	0
  1371   0019DF  00                 	db	0
  1372   0019E0  00                 	db	0
  1373   0019E1  00                 	db	0
  1374   0019E2  00                 	db	0
  1375   0019E3  00                 	db	0
  1376   0019E4  01                 	db	1
  1377   0019E5  02                 	db	2
  1378   0019E6  03                 	db	3
  1379   0019E7  04                 	db	4
  1380   0019E8  05                 	db	5
  1381   0019E9  06                 	db	6
  1382   0019EA  0A                 	db	10
  1383   0019EB  0A                 	db	10
  1384   0019EC  0A                 	db	10
  1385   0019ED  0A                 	db	10
  1386   0019EE  0A                 	db	10
  1387   0019EF  0A                 	db	10
  1388   0019F0  01                 	db	1
  1389   0019F1  01                 	db	1
  1390   0019F2  01                 	db	1
  1391   0019F3  01                 	db	1
  1392   0019F4  01                 	db	1
  1393   0019F5  01                 	db	1
  1394   0019F6  00                 	db	0
  1395   0019F7  02                 	db	2
  1396   0019F8  04                 	db	4
  1397   0019F9  06                 	db	6
  1398   0019FA  08                 	db	8
  1399   0019FB  0A                 	db	10
  1400   0019FC  00                 	db	0
  1401   0019FD  02                 	db	2
  1402   0019FE  04                 	db	4
  1403   0019FF  06                 	db	6
  1404   001A00  08                 	db	8
  1405   001A01  0A                 	db	10
  1406                           
  1407                           	psect	mediumconst
  1408   001E54                     __pmediumconst:
  1409                           	callstack 0
  1410   001E54  00                 	db	0
  1411   001E55                     _uid_saved:
  1412                           	callstack 0
  1413   001E55  00                 	db	0
  1414   001E56  00                 	db	0
  1415   001E57  00                 	db	0
  1416   001E58  00                 	db	0
  1417   001E59  00                 	db	0
  1418   001E5A  E3                 	db	227
  1419   001E5B  C2                 	db	194
  1420   001E5C  26                 	db	38
  1421   001E5D  DB                 	db	219
  1422   001E5E  DC                 	db	220
  1423   001E5F  03                 	db	3
  1424   001E60  6D                 	db	109
  1425   001E61  D2                 	db	210
  1426   001E62  D9                 	db	217
  1427   001E63  65                 	db	101
  1428   001E64  3D                 	db	61
  1429   001E65  E6                 	db	230
  1430   001E66  97                 	db	151
  1431   001E67  3F                 	db	63
  1432   001E68  73                 	db	115
  1433   001E69  CC                 	db	204
  1434   001E6A  D3                 	db	211
  1435   001E6B  96                 	db	150
  1436   001E6C  3F                 	db	63
  1437   001E6D  B6                 	db	182
  1438   001E6E  88                 	db	136
  1439   001E6F  05                 	db	5
  1440   001E70  6A                 	db	106
  1441   001E71  CA                 	db	202
  1442   001E72  2D                 	db	45
  1443   001E73                     __end_of_uid_saved:
  1444                           	callstack 0
  1445   001E73                     printHex@F2821:
  1446                           	callstack 0
  1447   001E73  30                 	db	48
  1448   001E74  31                 	db	49
  1449   001E75  32                 	db	50
  1450   001E76  33                 	db	51
  1451   001E77  34                 	db	52
  1452   001E78  35                 	db	53
  1453   001E79  36                 	db	54
  1454   001E7A  37                 	db	55
  1455   001E7B  38                 	db	56
  1456   001E7C  39                 	db	57
  1457   001E7D  41                 	db	65
  1458   001E7E  42                 	db	66
  1459   001E7F  43                 	db	67
  1460   001E80  44                 	db	68
  1461   001E81  45                 	db	69
  1462   001E82  46                 	db	70
  1463   001E83  00                 	db	0
  1464   001E84                     __end_ofprintHex@F2821:
  1465                           	callstack 0
  1466   001E84                     _TECLAT_MATRIU:
  1467                           	callstack 0
  1468   001E84  31                 	db	49
  1469   001E85  32                 	db	50
  1470   001E86  33                 	db	51
  1471   001E87  34                 	db	52
  1472   001E88  35                 	db	53
  1473   001E89  36                 	db	54
  1474   001E8A  37                 	db	55
  1475   001E8B  38                 	db	56
  1476   001E8C  39                 	db	57
  1477   001E8D  2A                 	db	42
  1478   001E8E  30                 	db	48
  1479   001E8F  23                 	db	35
  1480   001E90                     __end_of_TECLAT_MATRIU:
  1481                           	callstack 0
  1482   001E90  0A                 	db	10
  1483   001E91                     __end_of_T_REBOTS:
  1484                           	callstack 0
  1485   001E91                     _menu_principal:
  1486                           	callstack 0
  1487   001E91  1B                 	db	27
  1488   001E92  5B                 	db	91
  1489   001E93  32                 	db	50
  1490   001E94  4A                 	db	74
  1491   001E95  1B                 	db	27
  1492   001E96  5B                 	db	91
  1493   001E97  48                 	db	72
  1494   001E98  0D                 	db	13
  1495   001E99  0A                 	db	10
  1496   001E9A  2D                 	db	45
  1497   001E9B  2D                 	db	45
  1498   001E9C  2D                 	db	45
  1499   001E9D  2D                 	db	45
  1500   001E9E  2D                 	db	45
  1501   001E9F  2D                 	db	45
  1502   001EA0  2D                 	db	45
  1503   001EA1  2D                 	db	45
  1504   001EA2  2D                 	db	45
  1505   001EA3  2D                 	db	45
  1506   001EA4  2D                 	db	45
  1507   001EA5  2D                 	db	45
  1508   001EA6  2D                 	db	45
  1509   001EA7  2D                 	db	45
  1510   001EA8  2D                 	db	45
  1511   001EA9  2D                 	db	45
  1512   001EAA  0D                 	db	13
  1513   001EAB  0A                 	db	10
  1514   001EAC  4D                 	db	77
  1515   001EAD  65                 	db	101
  1516   001EAE  6E                 	db	110
  1517   001EAF  FA                 	db	250
  1518   001EB0  20                 	db	32
  1519   001EB1  70                 	db	112
  1520   001EB2  72                 	db	114
  1521   001EB3  69                 	db	105
  1522   001EB4  6E                 	db	110
  1523   001EB5  63                 	db	99
  1524   001EB6  69                 	db	105
  1525   001EB7  70                 	db	112
  1526   001EB8  61                 	db	97
  1527   001EB9  6C                 	db	108
  1528   001EBA  0D                 	db	13
  1529   001EBB  0A                 	db	10
  1530   001EBC  2D                 	db	45
  1531   001EBD  2D                 	db	45
  1532   001EBE  2D                 	db	45
  1533   001EBF  2D                 	db	45
  1534   001EC0  2D                 	db	45
  1535   001EC1  2D                 	db	45
  1536   001EC2  2D                 	db	45
  1537   001EC3  2D                 	db	45
  1538   001EC4  2D                 	db	45
  1539   001EC5  2D                 	db	45
  1540   001EC6  2D                 	db	45
  1541   001EC7  2D                 	db	45
  1542   001EC8  2D                 	db	45
  1543   001EC9  2D                 	db	45
  1544   001ECA  2D                 	db	45
  1545   001ECB  2D                 	db	45
  1546   001ECC  0D                 	db	13
  1547   001ECD  0A                 	db	10
  1548   001ECE  54                 	db	84
  1549   001ECF  72                 	db	114
  1550   001ED0  69                 	db	105
  1551   001ED1  61                 	db	97
  1552   001ED2  20                 	db	32
  1553   001ED3  75                 	db	117
  1554   001ED4  6E                 	db	110
  1555   001ED5  61                 	db	97
  1556   001ED6  20                 	db	32
  1557   001ED7  6F                 	db	111
  1558   001ED8  70                 	db	112
  1559   001ED9  63                 	db	99
  1560   001EDA  69                 	db	105
  1561   001EDB  F3                 	db	243
  1562   001EDC  3A                 	db	58
  1563   001EDD  0D                 	db	13
  1564   001EDE  0A                 	db	10
  1565   001EDF  09                 	db	9
  1566   001EE0  31                 	db	49
  1567   001EE1  2E                 	db	46
  1568   001EE2  20                 	db	32
  1569   001EE3  51                 	db	81
  1570   001EE4  75                 	db	117
  1571   001EE5  69                 	db	105
  1572   001EE6  20                 	db	32
  1573   001EE7  68                 	db	104
  1574   001EE8  69                 	db	105
  1575   001EE9  20                 	db	32
  1576   001EEA  68                 	db	104
  1577   001EEB  61                 	db	97
  1578   001EEC  20                 	db	32
  1579   001EED  61                 	db	97
  1580   001EEE  20                 	db	32
  1581   001EEF  6C                 	db	108
  1582   001EF0  61                 	db	97
  1583   001EF1  20                 	db	32
  1584   001EF2  73                 	db	115
  1585   001EF3  61                 	db	97
  1586   001EF4  6C                 	db	108
  1587   001EF5  61                 	db	97
  1588   001EF6  3F                 	db	63
  1589   001EF7  0D                 	db	13
  1590   001EF8  0A                 	db	10
  1591   001EF9  09                 	db	9
  1592   001EFA  32                 	db	50
  1593   001EFB  2E                 	db	46
  1594   001EFC  20                 	db	32
  1595   001EFD  4D                 	db	77
  1596   001EFE  6F                 	db	111
  1597   001EFF  73                 	db	115
  1598   001F00  74                 	db	116
  1599   001F01  72                 	db	114
  1600   001F02  61                 	db	97
  1601   001F03  72                 	db	114
  1602   001F04  20                 	db	32
  1603   001F05  63                 	db	99
  1604   001F06  6F                 	db	111
  1605   001F07  6E                 	db	110
  1606   001F08  66                 	db	102
  1607   001F09  69                 	db	105
  1608   001F0A  67                 	db	103
  1609   001F0B  75                 	db	117
  1610   001F0C  72                 	db	114
  1611   001F0D  61                 	db	97
  1612   001F0E  63                 	db	99
  1613   001F0F  69                 	db	105
  1614   001F10  6F                 	db	111
  1615   001F11  6E                 	db	110
  1616   001F12  73                 	db	115
  1617   001F13  0D                 	db	13
  1618   001F14  0A                 	db	10
  1619   001F15  09                 	db	9
  1620   001F16  33                 	db	51
  1621   001F17  2E                 	db	46
  1622   001F18  20                 	db	32
  1623   001F19  4D                 	db	77
  1624   001F1A  6F                 	db	111
  1625   001F1B  64                 	db	100
  1626   001F1C  69                 	db	105
  1627   001F1D  66                 	db	102
  1628   001F1E  69                 	db	105
  1629   001F1F  63                 	db	99
  1630   001F20  61                 	db	97
  1631   001F21  72                 	db	114
  1632   001F22  20                 	db	32
  1633   001F23  68                 	db	104
  1634   001F24  6F                 	db	111
  1635   001F25  72                 	db	114
  1636   001F26  61                 	db	97
  1637   001F27  20                 	db	32
  1638   001F28  64                 	db	100
  1639   001F29  65                 	db	101
  1640   001F2A  6C                 	db	108
  1641   001F2B  20                 	db	32
  1642   001F2C  73                 	db	115
  1643   001F2D  69                 	db	105
  1644   001F2E  73                 	db	115
  1645   001F2F  74                 	db	116
  1646   001F30  65                 	db	101
  1647   001F31  6D                 	db	109
  1648   001F32  61                 	db	97
  1649   001F33  0D                 	db	13
  1650   001F34  0A                 	db	10
  1651   001F35  4F                 	db	79
  1652   001F36  70                 	db	112
  1653   001F37  63                 	db	99
  1654   001F38  69                 	db	105
  1655   001F39  F3                 	db	243
  1656   001F3A  3A                 	db	58
  1657   001F3B  20                 	db	32
  1658   001F3C  00                 	db	0
  1659   001F3D                     __end_of_menu_principal:
  1660                           	callstack 0
  1661   001F3D                     _enter_aplicar:
  1662                           	callstack 0
  1663   001F3D  0D                 	db	13
  1664   001F3E  0A                 	db	10
  1665   001F3F  45                 	db	69
  1666   001F40  6E                 	db	110
  1667   001F41  74                 	db	116
  1668   001F42  65                 	db	101
  1669   001F43  72                 	db	114
  1670   001F44  20                 	db	32
  1671   001F45  70                 	db	112
  1672   001F46  65                 	db	101
  1673   001F47  72                 	db	114
  1674   001F48  20                 	db	32
  1675   001F49  61                 	db	97
  1676   001F4A  70                 	db	112
  1677   001F4B  6C                 	db	108
  1678   001F4C  69                 	db	105
  1679   001F4D  63                 	db	99
  1680   001F4E  61                 	db	97
  1681   001F4F  72                 	db	114
  1682   001F50  2E                 	db	46
  1683   001F51  2E                 	db	46
  1684   001F52  2E                 	db	46
  1685   001F53  20                 	db	32
  1686   001F54  00                 	db	0
  1687   001F55                     __end_of_enter_aplicar:
  1688                           	callstack 0
  1689   001F55                     _hora_sistema:
  1690                           	callstack 0
  1691   001F55  0D                 	db	13
  1692   001F56  0A                 	db	10
  1693   001F57  48                 	db	72
  1694   001F58  6F                 	db	111
  1695   001F59  72                 	db	114
  1696   001F5A  61                 	db	97
  1697   001F5B  20                 	db	32
  1698   001F5C  64                 	db	100
  1699   001F5D  65                 	db	101
  1700   001F5E  6C                 	db	108
  1701   001F5F  20                 	db	32
  1702   001F60  73                 	db	115
  1703   001F61  69                 	db	105
  1704   001F62  73                 	db	115
  1705   001F63  74                 	db	116
  1706   001F64  65                 	db	101
  1707   001F65  6D                 	db	109
  1708   001F66  61                 	db	97
  1709   001F67  3A                 	db	58
  1710   001F68  20                 	db	32
  1711   001F69  00                 	db	0
  1712   001F6A                     __end_of_hora_sistema:
  1713                           	callstack 0
  1714   001F6A                     _canvis_aplicats:
  1715                           	callstack 0
  1716   001F6A  0D                 	db	13
  1717   001F6B  0A                 	db	10
  1718   001F6C  43                 	db	67
  1719   001F6D  61                 	db	97
  1720   001F6E  6E                 	db	110
  1721   001F6F  76                 	db	118
  1722   001F70  69                 	db	105
  1723   001F71  73                 	db	115
  1724   001F72  20                 	db	32
  1725   001F73  61                 	db	97
  1726   001F74  70                 	db	112
  1727   001F75  6C                 	db	108
  1728   001F76  69                 	db	105
  1729   001F77  63                 	db	99
  1730   001F78  61                 	db	97
  1731   001F79  74                 	db	116
  1732   001F7A  73                 	db	115
  1733   001F7B  2E                 	db	46
  1734   001F7C  00                 	db	0
  1735   001F7D                     __end_of_canvis_aplicats:
  1736                           	callstack 0
  1737   001F7D                     _res_a_mostrar:
  1738                           	callstack 0
  1739   001F7D  0D                 	db	13
  1740   001F7E  0A                 	db	10
  1741   001F7F  52                 	db	82
  1742   001F80  65                 	db	101
  1743   001F81  73                 	db	115
  1744   001F82  20                 	db	32
  1745   001F83  61                 	db	97
  1746   001F84  20                 	db	32
  1747   001F85  6D                 	db	109
  1748   001F86  6F                 	db	111
  1749   001F87  73                 	db	115
  1750   001F88  74                 	db	116
  1751   001F89  72                 	db	114
  1752   001F8A  61                 	db	97
  1753   001F8B  72                 	db	114
  1754   001F8C  00                 	db	0
  1755   001F8D                     __end_of_res_a_mostrar:
  1756                           	callstack 0
  1757   001F8D                     _separador_hora:
  1758                           	callstack 0
  1759   001F8D  3A                 	db	58
  1760   001F8E  00                 	db	0
  1761   001F8F                     __end_of_separador_hora:
  1762                           	callstack 0
  1763   007F92                     _TMR0IF         set	32658
  1764   000FD6                     _TMR0           set	4054
  1765   000FAE                     _RCREG          set	4014
  1766   000F9E                     _PIR1bits       set	3998
  1767   000FAD                     _TXREG          set	4013
  1768   000FAB                     _RCSTAbits      set	4011
  1769   000FAC                     _TXSTAbits      set	4012
  1770   000FB8                     _BAUDCONbits    set	4024
  1771   000FAF                     _SPBRG          set	4015
  1772   000F82                     _PORTCbits      set	3970
  1773   000F83                     _PORTDbits      set	3971
  1774   000F8C                     _LATDbits       set	3980
  1775   000F8A                     _LATBbits       set	3978
  1776   000F93                     _TRISBbits      set	3987
  1777   000F95                     _TRISDbits      set	3989
  1778   000F84                     _PORTEbits      set	3972
  1779   000F96                     _TRISEbits      set	3990
  1780   000F89                     _LATAbits       set	3977
  1781   000F8D                     _LATEbits       set	3981
  1782   000F92                     _TRISAbits      set	3986
  1783   000F8B                     _LATCbits       set	3979
  1784   000F94                     _TRISCbits      set	3988
  1785   000FD0                     _RCONbits       set	4048
  1786   000FF2                     _INTCONbits     set	4082
  1787   000FD5                     _T0CON          set	4053
  1788   001F8F                     STR_6:
  1789   001F8F  0D                 	db	13
  1790   001F90  0A                 	db	10
  1791   001F91  0D                 	db	13
  1792   001F92  0A                 	db	10
  1793   001F93  54                 	db	84	;'T'
  1794   001F94  61                 	db	97	;'a'
  1795   001F95  72                 	db	114	;'r'
  1796   001F96  67                 	db	103	;'g'
  1797   001F97  65                 	db	101	;'e'
  1798   001F98  74                 	db	116	;'t'
  1799   001F99  61                 	db	97	;'a'
  1800   001F9A  20                 	db	32
  1801   001F9B  4E                 	db	78	;'N'
  1802   001F9C  4F                 	db	79	;'O'
  1803   001F9D  20                 	db	32
  1804   001F9E  72                 	db	114	;'r'
  1805   001F9F  65                 	db	101	;'e'
  1806   001FA0  63                 	db	99	;'c'
  1807   001FA1  6F                 	db	111	;'o'
  1808   001FA2  6E                 	db	110	;'n'
  1809   001FA3  65                 	db	101	;'e'
  1810   001FA4  67                 	db	103	;'g'
  1811   001FA5  75                 	db	117	;'u'
  1812   001FA6  64                 	db	100	;'d'
  1813   001FA7  61                 	db	97	;'a'
  1814   001FA8  21                 	db	33
  1815   001FA9  0D                 	db	13
  1816   001FAA  0A                 	db	10
  1817   001FAB  09                 	db	9
  1818   001FAC  55                 	db	85	;'U'
  1819   001FAD  49                 	db	73	;'I'
  1820   001FAE  44                 	db	68	;'D'
  1821   001FAF  3A                 	db	58	;':'
  1822   001FB0  20                 	db	32
  1823   001FB1  00                 	db	0
  1824   001FB2                     STR_3:
  1825   001FB2  0D                 	db	13
  1826   001FB3  0A                 	db	10
  1827   001FB4  0D                 	db	13
  1828   001FB5  0A                 	db	10
  1829   001FB6  54                 	db	84	;'T'
  1830   001FB7  61                 	db	97	;'a'
  1831   001FB8  72                 	db	114	;'r'
  1832   001FB9  67                 	db	103	;'g'
  1833   001FBA  65                 	db	101	;'e'
  1834   001FBB  74                 	db	116	;'t'
  1835   001FBC  61                 	db	97	;'a'
  1836   001FBD  20                 	db	32
  1837   001FBE  64                 	db	100	;'d'
  1838   001FBF  65                 	db	101	;'e'
  1839   001FC0  74                 	db	116	;'t'
  1840   001FC1  65                 	db	101	;'e'
  1841   001FC2  63                 	db	99	;'c'
  1842   001FC3  74                 	db	116	;'t'
  1843   001FC4  61                 	db	97	;'a'
  1844   001FC5  64                 	db	100	;'d'
  1845   001FC6  61                 	db	97	;'a'
  1846   001FC7  21                 	db	33
  1847   001FC8  00                 	db	0
  1848   001FC9                     STR_4:
  1849   001FC9  0D                 	db	13
  1850   001FCA  0A                 	db	10
  1851   001FCB  55                 	db	85	;'U'
  1852   001FCC  73                 	db	115	;'s'
  1853   001FCD  75                 	db	117	;'u'
  1854   001FCE  61                 	db	97	;'a'
  1855   001FCF  72                 	db	114	;'r'
  1856   001FD0  69                 	db	105	;'i'
  1857   001FD1  20                 	db	32
  1858   001FD2  73                 	db	115	;'s'
  1859   001FD3  75                 	db	117	;'u'
  1860   001FD4  72                 	db	114	;'r'
  1861   001FD5  74                 	db	116	;'t'
  1862   001FD6  2E                 	db	46
  1863   001FD7  00                 	db	0
  1864   001FD8                     STR_5:
  1865   001FD8  0D                 	db	13
  1866   001FD9  0A                 	db	10
  1867   001FDA  4E                 	db	78	;'N'
  1868   001FDB  6F                 	db	111	;'o'
  1869   001FDC  75                 	db	117	;'u'
  1870   001FDD  20                 	db	32
  1871   001FDE  75                 	db	117	;'u'
  1872   001FDF  73                 	db	115	;'s'
  1873   001FE0  75                 	db	117	;'u'
  1874   001FE1  61                 	db	97	;'a'
  1875   001FE2  72                 	db	114	;'r'
  1876   001FE3  69                 	db	105	;'i'
  1877   001FE4  2E                 	db	46
  1878   001FE5  00                 	db	0
  1879   001FE6                     STR_2:
  1880   001FE6  0D                 	db	13
  1881   001FE7  0A                 	db	10
  1882   001FE8  0D                 	db	13
  1883   001FE9  0A                 	db	10
  1884   001FEA  4F                 	db	79	;'O'
  1885   001FEB  70                 	db	112	;'p'
  1886   001FEC  63                 	db	99	;'c'
  1887   001FED  69                 	db	105	;'i'
  1888   001FEE  F3                 	db	-13
  1889   001FEF  3A                 	db	58	;':'
  1890   001FF0  20                 	db	32
  1891   001FF1  00                 	db	0
  1892   001FF2                     STR_14:
  1893   001FF2  0D                 	db	13
  1894   001FF3  0A                 	db	10
  1895   001FF4  09                 	db	9
  1896   001FF5  00                 	db	0
  1897   001FF6                     STR_15:
  1898   001FF6  20                 	db	32
  1899   001FF7  2D                 	db	45
  1900   001FF8  20                 	db	32
  1901   001FF9  00                 	db	0
  1902   001FFA                     STR_1:
  1903   001FFA  0D                 	db	13
  1904   001FFB  0A                 	db	10
  1905   001FFC  00                 	db	0
  1906   001FFD                     STR_7:
  1907   001FFD  2D                 	db	45
  1908   001FFE  00                 	db	0
  1909   001FFD                     STR_10          equ	STR_7
  1910   001FFD                     STR_11          equ	STR_7
  1911   001FFD                     STR_12          equ	STR_7
  1912   001FFD                     STR_13          equ	STR_7
  1913   001FA9                     STR_9           equ	STR_6+26
  1914   001FE6                     STR_8           equ	STR_2
  1915   001FFF  00                 	db	0	; dummy byte at the end
  1916   001E54                     __smallconst    set	__pmediumconst
  1917   001E54                     __mediumconst   set	__pmediumconst
  1918   000002                     __activetblptr  equ	2
  1919                           
  1920                           ; #config settings
  1921                           
  1922                           	psect	cinit
  1923   00136C                     __pcinit:
  1924                           	callstack 0
  1925   00136C                     start_initialization:
  1926                           	callstack 0
  1927   00136C                     __initialization:
  1928                           	callstack 0
  1929                           
  1930                           ; Initialize objects allocated to BANK1 (72 bytes)
  1931                           ; load TBLPTR registers with __pidataBANK1
  1932   00136C  0EBA               	movlw	low __pidataBANK1
  1933   00136E  6EF6               	movwf	tblptrl,c
  1934   001370  0E19               	movlw	high __pidataBANK1
  1935   001372  6EF7               	movwf	tblptrh,c
  1936   001374  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1937   001376  6EF8               	movwf	tblptru,c
  1938   001378  EE01  F000         	lfsr	0,__pdataBANK1
  1939   00137C  EE10 F048          	lfsr	1,72
  1940   001380                     copy_data0:
  1941   001380  0009               	tblrd		*+
  1942   001382  CFF5 FFEE          	movff	tablat,postinc0
  1943   001386  50E5               	movf	postdec1,w,c
  1944   001388  50E1               	movf	fsr1l,w,c
  1945   00138A  E1FA               	bnz	copy_data0
  1946                           
  1947                           ; Initialize objects allocated to BANK0 (36 bytes)
  1948                           ; load TBLPTR registers with __pidataBANK0
  1949   00138C  0EA8               	movlw	low __pidataBANK0
  1950   00138E  6EF6               	movwf	tblptrl,c
  1951   001390  0E1C               	movlw	high __pidataBANK0
  1952   001392  6EF7               	movwf	tblptrh,c
  1953   001394  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1954   001396  6EF8               	movwf	tblptru,c
  1955   001398  EE00  F0DC         	lfsr	0,__pdataBANK0
  1956   00139C  EE10 F024          	lfsr	1,36
  1957   0013A0                     copy_data1:
  1958   0013A0  0009               	tblrd		*+
  1959   0013A2  CFF5 FFEE          	movff	tablat,postinc0
  1960   0013A6  50E5               	movf	postdec1,w,c
  1961   0013A8  50E1               	movf	fsr1l,w,c
  1962   0013AA  E1FA               	bnz	copy_data1
  1963                           
  1964                           ; Initialize objects allocated to COMRAM (4 bytes)
  1965                           ; load TBLPTR registers with __pidataCOMRAM
  1966   0013AC  0E22               	movlw	low __pidataCOMRAM
  1967   0013AE  6EF6               	movwf	tblptrl,c
  1968   0013B0  0E1E               	movlw	high __pidataCOMRAM
  1969   0013B2  6EF7               	movwf	tblptrh,c
  1970   0013B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1971   0013B6  6EF8               	movwf	tblptru,c
  1972   0013B8  EE00  F07B         	lfsr	0,__pdataCOMRAM
  1973   0013BC  EE10 F004          	lfsr	1,4
  1974   0013C0                     copy_data2:
  1975   0013C0  0009               	tblrd		*+
  1976   0013C2  CFF5 FFEE          	movff	tablat,postinc0
  1977   0013C6  50E5               	movf	postdec1,w,c
  1978   0013C8  50E1               	movf	fsr1l,w,c
  1979   0013CA  E1FA               	bnz	copy_data2
  1980                           
  1981                           ; Clear objects allocated to BANK0 (92 bytes)
  1982   0013CC  EE00  F080         	lfsr	0,__pbssBANK0
  1983   0013D0  0E5C               	movlw	92
  1984   0013D2                     clear_0:
  1985   0013D2  6AEE               	clrf	postinc0,c
  1986   0013D4  06E8               	decf	wreg,f,c
  1987   0013D6  E1FD               	bnz	clear_0
  1988                           
  1989                           ; Clear objects allocated to COMRAM (81 bytes)
  1990   0013D8  EE00  F001         	lfsr	0,__pbssCOMRAM
  1991   0013DC  0E51               	movlw	81
  1992   0013DE                     clear_1:
  1993   0013DE  6AEE               	clrf	postinc0,c
  1994   0013E0  06E8               	decf	wreg,f,c
  1995   0013E2  E1FD               	bnz	clear_1
  1996   0013E4                     end_of_initialization:
  1997                           	callstack 0
  1998   0013E4                     __end_of__initialization:
  1999                           	callstack 0
  2000   0013E4  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2001   0013E6  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2002   0013E8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2003   0013EA  6EF8               	movwf	tblptru,c
  2004   0013EC  0100               	movlb	0
  2005   0013EE  EFF9  F009         	goto	_main	;jump to C main() function
  2006                           
  2007                           	psect	bssCOMRAM
  2008   000001                     __pbssCOMRAM:
  2009                           	callstack 0
  2010   000001                     _LEDS_CURRENT:
  2011                           	callstack 0
  2012   000001                     	ds	6
  2013   000007                     _Tics:
  2014                           	callstack 0
  2015   000007                     	ds	4
  2016   00000B                     MFRC522_ToCard_NOU@j:
  2017                           	callstack 0
  2018   00000B                     	ds	2
  2019   00000D                     _TagType:
  2020                           	callstack 0
  2021   00000D                     	ds	2
  2022   00000F                     _ticsCounter:
  2023                           	callstack 0
  2024   00000F                     	ds	2
  2025   000011                     MENU_MotorHandleHash@bug_timer:
  2026                           	callstack 0
  2027   000011                     	ds	1
  2028   000012                     MENU_MotorHandleHash@state_hash:
  2029                           	callstack 0
  2030   000012                     	ds	1
  2031   000013                     _INDEX_CURRENT:
  2032                           	callstack 0
  2033   000013                     	ds	1
  2034   000014                     _state_setIntensity:
  2035                           	callstack 0
  2036   000014                     	ds	1
  2037   000015                     _quinaIntensitat:
  2038                           	callstack 0
  2039   000015                     	ds	1
  2040   000016                     _quinLed:
  2041                           	callstack 0
  2042   000016                     	ds	1
  2043   000017                     _actualitzar_lcd:
  2044                           	callstack 0
  2045   000017                     	ds	1
  2046   000018                     _someone:
  2047                           	callstack 0
  2048   000018                     	ds	1
  2049   000019                     	ds	1
  2050   00001A                     _minuts_l:
  2051                           	callstack 0
  2052   00001A                     	ds	1
  2053   00001B                     _minuts_h:
  2054                           	callstack 0
  2055   00001B                     	ds	1
  2056   00001C                     _hora_l:
  2057                           	callstack 0
  2058   00001C                     	ds	1
  2059   00001D                     _hora_h:
  2060                           	callstack 0
  2061   00001D                     	ds	1
  2062   00001E                     _option:
  2063                           	callstack 0
  2064   00001E                     	ds	1
  2065   00001F                     _hash_less_3s:
  2066                           	callstack 0
  2067   00001F                     	ds	1
  2068   000020                     _esc_key:
  2069                           	callstack 0
  2070   000020                     	ds	1
  2071   000021                     _start_system:
  2072                           	callstack 0
  2073   000021                     	ds	1
  2074   000022                     _state_option3:
  2075                           	callstack 0
  2076   000022                     	ds	1
  2077   000023                     _state_main_motor:
  2078                           	callstack 0
  2079   000023                     	ds	1
  2080   000024                     _index_row:
  2081                           	callstack 0
  2082   000024                     	ds	1
  2083   000025                     _col_selected:
  2084                           	callstack 0
  2085   000025                     	ds	1
  2086   000026                     _row_selected:
  2087                           	callstack 0
  2088   000026                     	ds	1
  2089   000027                     _hash:
  2090                           	callstack 0
  2091   000027                     	ds	1
  2092   000028                     _key:
  2093                           	callstack 0
  2094   000028                     	ds	1
  2095   000029                     _state@TAD_TECLATMATRIU$F1368:
  2096                           	callstack 0
  2097   000029                     	ds	1
  2098   00002A                     motorRFIDcoop_NOU@wr_state:
  2099                           	callstack 0
  2100   00002A                     	ds	1
  2101   00002B                     MFRC522_Wr_2@i:
  2102                           	callstack 0
  2103   00002B                     	ds	1
  2104   00002C                     MFRC522_Wr_1@ucAddr:
  2105                           	callstack 0
  2106   00002C                     	ds	1
  2107   00002D                     MFRC522_Wr_1@i:
  2108                           	callstack 0
  2109   00002D                     	ds	1
  2110   00002E                     MFRC522_ToCard_NOU@wr_state:
  2111                           	callstack 0
  2112   00002E                     	ds	1
  2113   00002F                     MFRC522_ToCard_NOU@tmp:
  2114                           	callstack 0
  2115   00002F                     	ds	1
  2116   000030                     MFRC522_ToCard_NOU@state_aux:
  2117                           	callstack 0
  2118   000030                     	ds	1
  2119   000031                     MFRC522_ToCard_NOU@rd:
  2120                           	callstack 0
  2121   000031                     	ds	1
  2122   000032                     MFRC522_ToCard_NOU@n:
  2123                           	callstack 0
  2124   000032                     	ds	1
  2125   000033                     MFRC522_ToCard_NOU@lastBits:
  2126                           	callstack 0
  2127   000033                     	ds	1
  2128   000034                     MFRC522_ToCard_NOU@waitIRq:
  2129                           	callstack 0
  2130   000034                     	ds	1
  2131   000035                     MFRC522_ToCard_NOU@irqEn:
  2132                           	callstack 0
  2133   000035                     	ds	1
  2134   000036                     MFRC522_ToCard@tmp:
  2135                           	callstack 0
  2136   000036                     	ds	1
  2137   000037                     MFRC522_ToCard@state_aux:
  2138                           	callstack 0
  2139   000037                     	ds	1
  2140   000038                     MFRC522_ToCard@rd:
  2141                           	callstack 0
  2142   000038                     	ds	1
  2143   000039                     MFRC522_ToCard@n:
  2144                           	callstack 0
  2145   000039                     	ds	1
  2146   00003A                     MFRC522_ToCard@lastBits:
  2147                           	callstack 0
  2148   00003A                     	ds	1
  2149   00003B                     MFRC522_ToCard@waitIRq:
  2150                           	callstack 0
  2151   00003B                     	ds	1
  2152   00003C                     MFRC522_ToCard@irqEn:
  2153                           	callstack 0
  2154   00003C                     	ds	1
  2155   00003D                     MFRC522_CRC_NOU@wr_state:
  2156                           	callstack 0
  2157   00003D                     	ds	1
  2158   00003E                     MFRC522_CRC_NOU@n:
  2159                           	callstack 0
  2160   00003E                     	ds	1
  2161   00003F                     MFRC522_CRC_NOU@i:
  2162                           	callstack 0
  2163   00003F                     	ds	1
  2164   000040                     	ds	1
  2165   000041                     	ds	1
  2166   000042                     _i:
  2167                           	callstack 0
  2168   000042                     	ds	1
  2169   000043                     __status:
  2170                           	callstack 0
  2171   000043                     	ds	1
  2172   000044                     _state:
  2173                           	callstack 0
  2174   000044                     	ds	1
  2175   000045                     _t:
  2176                           	callstack 0
  2177   000045                     	ds	1
  2178   000046                     _ColumnAct:
  2179                           	callstack 0
  2180   000046                     	ds	1
  2181   000047                     _RowAct:
  2182                           	callstack 0
  2183   000047                     	ds	1
  2184   000048                     _Columns:
  2185                           	callstack 0
  2186   000048                     	ds	1
  2187   000049                     _Rows:
  2188                           	callstack 0
  2189   000049                     	ds	1
  2190   00004A                     motorRFIDcoop_NOU@unLen:
  2191                           	callstack 0
  2192   00004A                     	ds	2
  2193   00004C                     motorRFIDcoop_NOU@backBits:
  2194                           	callstack 0
  2195   00004C                     	ds	2
  2196   00004E                     _TimerHash:
  2197                           	callstack 0
  2198   00004E                     	ds	1
  2199   00004F                     _key@TAD_MENU$F1730:
  2200                           	callstack 0
  2201   00004F                     	ds	1
  2202   000050                     _TimerRebots:
  2203                           	callstack 0
  2204   000050                     	ds	1
  2205   000051                     _Timer:
  2206                           	callstack 0
  2207   000051                     	ds	1
  2208                           
  2209                           	psect	dataCOMRAM
  2210   00007B                     __pdataCOMRAM:
  2211                           	callstack 0
  2212   00007B                     MFRC522_ToCard_NOU@_status:
  2213                           	callstack 0
  2214   00007B                     	ds	1
  2215   00007C                     MFRC522_ToCard@_status:
  2216                           	callstack 0
  2217   00007C                     	ds	1
  2218   00007D                     MFRC522_CRC_NOU@step:
  2219                           	callstack 0
  2220   00007D                     	ds	1
  2221   00007E                     	ds	1
  2222                           
  2223                           	psect	bssBANK0
  2224   000080                     __pbssBANK0:
  2225                           	callstack 0
  2226   000080                     _Timers:
  2227                           	callstack 0
  2228   000080                     	ds	45
  2229   0000AD                     _intensitat:
  2230                           	callstack 0
  2231   0000AD                     	ds	6
  2232   0000B3                     _state@TAD_LEDS$F1862:
  2233                           	callstack 0
  2234   0000B3                     	ds	6
  2235   0000B9                     MFRC522_ToCard@j:
  2236                           	callstack 0
  2237   0000B9                     	ds	2
  2238   0000BB                     _TimerLed:
  2239                           	callstack 0
  2240   0000BB                     	ds	6
  2241   0000C1                     _UID_CURRENT:
  2242                           	callstack 0
  2243   0000C1                     	ds	5
  2244   0000C6                     motorRFIDcoop_NOU@UID:
  2245                           	callstack 0
  2246   0000C6                     	ds	5
  2247   0000CB                     motorRFIDcoop@UID:
  2248                           	callstack 0
  2249   0000CB                     	ds	5
  2250   0000D0                     motorRFIDcoop_NOU@buff:
  2251                           	callstack 0
  2252   0000D0                     	ds	4
  2253   0000D4                     motorRFIDcoop@buff:
  2254                           	callstack 0
  2255   0000D4                     	ds	4
  2256   0000D8                     motorRFIDcoop@unLen:
  2257                           	callstack 0
  2258   0000D8                     	ds	2
  2259   0000DA                     motorRFIDcoop@backBits:
  2260                           	callstack 0
  2261   0000DA                     	ds	2
  2262                           
  2263                           	psect	dataBANK0
  2264   0000DC                     __pdataBANK0:
  2265                           	callstack 0
  2266   0000DC                     _leds_saved@TAD_MENU$F1708:
  2267                           	callstack 0
  2268   0000DC                     	ds	36
  2269                           
  2270                           	psect	dataBANK1
  2271   000100                     __pdataBANK1:
  2272                           	callstack 0
  2273   000100                     	ds	36
  2274   000124                     	ds	36
  2275                           
  2276                           	psect	cstackCOMRAM
  2277   000052                     __pcstackCOMRAM:
  2278                           	callstack 0
  2279   000052                     ?_TI_GetTics:
  2280                           	callstack 0
  2281   000052                     TI_Init@counter:
  2282                           	callstack 0
  2283   000052                     TI_NewTimer@TimerHandle:
  2284                           	callstack 0
  2285   000052                     TI_ResetTics@TimerHandle:
  2286                           	callstack 0
  2287   000052                     TM_GetTecla@c:
  2288                           	callstack 0
  2289   000052                     _TM_IsKeyPressed$1388:
  2290                           	callstack 0
  2291   000052                     SIO_Send@character:
  2292                           	callstack 0
  2293   000052                     SIO_Receive@character:
  2294                           	callstack 0
  2295   000052                     handleEscKey@received_char:
  2296                           	callstack 0
  2297   000052                     checkUID@UID_detectat:
  2298                           	callstack 0
  2299   000052                     mateixaTargeta@UID:
  2300                           	callstack 0
  2301   000052                     findLastLetterUID@UID:
  2302                           	callstack 0
  2303   000052                     LEDS_setState@estat:
  2304                           	callstack 0
  2305   000052                     LEDS_setIntensitat@valor:
  2306                           	callstack 0
  2307   000052                     ??_EscriuPrimeraOrdre:
  2308   000052                     ??_MFRC522_Rd:
  2309   000052                     ??_CantaPartAlta:
  2310   000052                     ??_CantaPartBaixa:
  2311   000052                     ??_delay_us:
  2312   000052                     
  2313                           ; 1 bytes @ 0x0
  2314   000052                     	ds	1
  2315   000053                     CantaPartAlta@c:
  2316                           	callstack 0
  2317   000053                     CantaPartBaixa@c:
  2318                           	callstack 0
  2319   000053                     EscriuPrimeraOrdre@ordre:
  2320                           	callstack 0
  2321   000053                     LEDS_setState@quinLed:
  2322                           	callstack 0
  2323   000053                     LEDS_setIntensitat@quinLed:
  2324                           	callstack 0
  2325   000053                     SIO_SendString@str:
  2326                           	callstack 0
  2327   000053                     ??_checkUID:
  2328   000053                     ??_mateixaTargeta:
  2329   000053                     ??_findLastLetterUID:
  2330   000053                     
  2331                           ; 1 bytes @ 0x1
  2332   000053                     	ds	1
  2333   000054                     TI_NewTimer@Comptador:
  2334                           	callstack 0
  2335   000054                     CantaIR@IR:
  2336                           	callstack 0
  2337   000054                     CantaData@Data:
  2338                           	callstack 0
  2339   000054                     MFRC522_Rd@Address:
  2340                           	callstack 0
  2341   000054                     findLastLetterUID@highNibble:
  2342                           	callstack 0
  2343   000054                     _MENU_MotorHandleSetIntensity$1751:
  2344                           	callstack 0
  2345   000054                     
  2346                           ; 1 bytes @ 0x2
  2347   000054                     	ds	1
  2348   000055                     delay_us@howMany:
  2349                           	callstack 0
  2350   000055                     option3@received_char:
  2351                           	callstack 0
  2352   000055                     findLastLetterUID@lowNibble:
  2353                           	callstack 0
  2354   000055                     MFRC522_Rd@ucAddr:
  2355                           	callstack 0
  2356   000055                     LEDS_Init@i:
  2357                           	callstack 0
  2358   000055                     ??_showConfigLeds:
  2359   000055                     ??_printHex:
  2360   000055                     
  2361                           ; 1 bytes @ 0x3
  2362   000055                     	ds	1
  2363   000056                     delay_us@x:
  2364                           	callstack 0
  2365   000056                     _showConfigLeds$1797:
  2366                           	callstack 0
  2367   000056                     mateixaTargeta@i:
  2368                           	callstack 0
  2369   000056                     findLastLetterUID@i:
  2370                           	callstack 0
  2371   000056                     printHex@hex_chars:
  2372                           	callstack 0
  2373   000056                     ??_TI_GetTics:
  2374                           
  2375                           ; 1 bytes @ 0x4
  2376   000056                     	ds	1
  2377   000057                     MFRC522_Wr@value:
  2378                           	callstack 0
  2379   000057                     MFRC522_Rd@ucResult:
  2380                           	callstack 0
  2381   000057                     ??_MFRC522_Wr_1:
  2382   000057                     ??_MFRC522_Wr_2:
  2383                           
  2384                           ; 1 bytes @ 0x5
  2385   000057                     	ds	1
  2386   000058                     MFRC522_Wr_1@Address:
  2387                           	callstack 0
  2388   000058                     MFRC522_Wr_2@value:
  2389                           	callstack 0
  2390   000058                     checkUID@match:
  2391                           	callstack 0
  2392   000058                     showConfigLeds@buffer:
  2393                           	callstack 0
  2394   000058                     ??_MFRC522_Wr:
  2395                           
  2396                           ; 1 bytes @ 0x6
  2397   000058                     	ds	1
  2398   000059                     MFRC522_Wr@Address:
  2399                           	callstack 0
  2400   000059                     MFRC522_Rd@i:
  2401                           	callstack 0
  2402                           
  2403                           ; 2 bytes @ 0x7
  2404   000059                     	ds	1
  2405   00005A                     MFRC522_Wr@ucAddr:
  2406                           	callstack 0
  2407   00005A                     checkUID@i:
  2408                           	callstack 0
  2409   00005A                     TI_GetTics@CopiaTicsActual:
  2410                           	callstack 0
  2411                           
  2412                           ; 4 bytes @ 0x8
  2413   00005A                     	ds	1
  2414   00005B                     MFRC522_ToCard_NOU@sendData:
  2415                           	callstack 0
  2416   00005B                     MFRC522_Wr@i:
  2417                           	callstack 0
  2418                           
  2419                           ; 1 bytes @ 0x9
  2420   00005B                     	ds	1
  2421   00005C                     MFRC522_Clear_Bit@mask:
  2422                           	callstack 0
  2423   00005C                     MFRC522_Set_Bit@mask:
  2424                           	callstack 0
  2425   00005C                     MFRC522_ToCard_NOU@sendLen:
  2426                           	callstack 0
  2427   00005C                     showConfigLeds@index:
  2428                           	callstack 0
  2429   00005C                     checkUID@j:
  2430                           	callstack 0
  2431   00005C                     
  2432                           ; 1 bytes @ 0xA
  2433   00005C                     	ds	1
  2434   00005D                     MFRC522_Clear_Bit@tmp:
  2435                           	callstack 0
  2436   00005D                     MFRC522_Set_Bit@tmp:
  2437                           	callstack 0
  2438   00005D                     MFRC522_ToCard_NOU@backData:
  2439                           	callstack 0
  2440   00005D                     showConfigLeds@i:
  2441                           	callstack 0
  2442   00005D                     
  2443                           ; 1 bytes @ 0xB
  2444   00005D                     	ds	1
  2445   00005E                     TI_GetTics@TimerHandle:
  2446                           	callstack 0
  2447   00005E                     MFRC522_Clear_Bit@addr:
  2448                           	callstack 0
  2449   00005E                     MFRC522_Set_Bit@addr:
  2450                           	callstack 0
  2451   00005E                     MFRC522_ToCard_NOU@backLen:
  2452                           	callstack 0
  2453                           
  2454                           ; 1 bytes @ 0xC
  2455   00005E                     	ds	1
  2456   00005F                     WaitForBusy@Busy:
  2457                           	callstack 0
  2458   00005F                     MFRC522_CRC_NOU@dataIn:
  2459                           	callstack 0
  2460   00005F                     Espera@ms:
  2461                           	callstack 0
  2462   00005F                     MENU_MotorHandleHash@i:
  2463                           	callstack 0
  2464   00005F                     ??_TM_Motor:
  2465   00005F                     ??_LEDS_Motor:
  2466   00005F                     ??_MFRC522_ToCard_NOU:
  2467                           
  2468                           ; 1 bytes @ 0xD
  2469   00005F                     	ds	1
  2470   000060                     LcGotoXY@Row:
  2471                           	callstack 0
  2472   000060                     MFRC522_CRC_NOU@length:
  2473                           	callstack 0
  2474   000060                     
  2475                           ; 1 bytes @ 0xE
  2476   000060                     	ds	1
  2477   000061                     MFRC522_CRC_NOU@dataOut:
  2478                           	callstack 0
  2479   000061                     _MFRC522_ToCard_NOU$1116:
  2480                           	callstack 0
  2481   000061                     MENU_MotorHandleHash@j:
  2482                           	callstack 0
  2483   000061                     ??_Espera:
  2484   000061                     ??_LcGotoXY:
  2485                           
  2486                           ; 1 bytes @ 0xF
  2487   000061                     	ds	1
  2488   000062                     
  2489                           ; 1 bytes @ 0x10
  2490   000062                     	ds	1
  2491   000063                     _LcGotoXY$682:
  2492                           	callstack 0
  2493   000063                     _MFRC522_ToCard_NOU$1117:
  2494                           	callstack 0
  2495                           
  2496                           ; 2 bytes @ 0x11
  2497   000063                     	ds	2
  2498   000065                     Espera@Timer:
  2499                           	callstack 0
  2500   000065                     LcGotoXY@Fisics:
  2501                           	callstack 0
  2502   000065                     _MFRC522_ToCard_NOU$1118:
  2503                           	callstack 0
  2504                           
  2505                           ; 2 bytes @ 0x13
  2506   000065                     	ds	1
  2507   000066                     LcInit@columns:
  2508                           	callstack 0
  2509   000066                     LEDS_Motor@quinLed:
  2510                           	callstack 0
  2511   000066                     
  2512                           ; 1 bytes @ 0x14
  2513   000066                     	ds	1
  2514   000067                     LcInit@rows:
  2515                           	callstack 0
  2516   000067                     LcGotoXY@Column:
  2517                           	callstack 0
  2518   000067                     _MFRC522_ToCard_NOU$1119:
  2519                           	callstack 0
  2520   000067                     printHex@hex_out:
  2521                           	callstack 0
  2522   000067                     
  2523                           ; 1 bytes @ 0x15
  2524   000067                     	ds	1
  2525   000068                     LcPutChar@c:
  2526                           	callstack 0
  2527   000068                     LcInit@i:
  2528                           	callstack 0
  2529   000068                     
  2530                           ; 1 bytes @ 0x16
  2531   000068                     	ds	1
  2532   000069                     _MFRC522_ToCard_NOU$1120:
  2533                           	callstack 0
  2534   000069                     _printLCD$1809:
  2535                           	callstack 0
  2536   000069                     
  2537                           ; 1 bytes @ 0x17
  2538   000069                     	ds	1
  2539   00006A                     printHex@value:
  2540                           	callstack 0
  2541                           
  2542                           ; 1 bytes @ 0x18
  2543   00006A                     	ds	1
  2544   00006B                     MFRC522_ToCard_NOU@command:
  2545                           	callstack 0
  2546   00006B                     showUID@index:
  2547                           	callstack 0
  2548   00006B                     _printLCD$1810:
  2549                           	callstack 0
  2550   00006B                     
  2551                           ; 1 bytes @ 0x19
  2552   00006B                     	ds	1
  2553   00006C                     MENU_SaveUID@UID:
  2554                           	callstack 0
  2555   00006C                     MENU_Motor@i:
  2556                           	callstack 0
  2557   00006C                     
  2558                           ; 1 bytes @ 0x1A
  2559   00006C                     	ds	1
  2560   00006D                     _printLCD$1811:
  2561                           	callstack 0
  2562   00006D                     ??_MENU_SaveUID:
  2563                           
  2564                           ; 1 bytes @ 0x1B
  2565   00006D                     	ds	1
  2566   00006E                     MENU_Motor@received_char:
  2567                           	callstack 0
  2568                           
  2569                           ; 1 bytes @ 0x1C
  2570   00006E                     	ds	1
  2571   00006F                     MENU_SaveUID@i:
  2572                           	callstack 0
  2573   00006F                     _printLCD$1812:
  2574                           	callstack 0
  2575                           
  2576                           ; 2 bytes @ 0x1D
  2577   00006F                     	ds	2
  2578   000071                     MENU_SaveUID@i_1768:
  2579                           	callstack 0
  2580   000071                     _printLCD$1813:
  2581                           	callstack 0
  2582                           
  2583                           ; 2 bytes @ 0x1F
  2584   000071                     	ds	2
  2585   000073                     MENU_SaveUID@i_1769:
  2586                           	callstack 0
  2587   000073                     _printLCD$1814:
  2588                           	callstack 0
  2589                           
  2590                           ; 2 bytes @ 0x21
  2591   000073                     	ds	2
  2592   000075                     MENU_SaveUID@i_1771:
  2593                           	callstack 0
  2594   000075                     
  2595                           ; 1 bytes @ 0x23
  2596   000075                     	ds	2
  2597   000077                     MENU_SaveUID@index:
  2598                           	callstack 0
  2599                           
  2600                           ; 1 bytes @ 0x25
  2601   000077                     	ds	1
  2602   000078                     motorRFIDcoop_NOU@serNumCheck:
  2603                           	callstack 0
  2604   000078                     
  2605                           ; 1 bytes @ 0x26
  2606   000078                     	ds	1
  2607   000079                     motorRFIDcoop_NOU@i:
  2608                           	callstack 0
  2609                           
  2610                           ; 1 bytes @ 0x27
  2611   000079                     	ds	1
  2612   00007A                     ??_main:
  2613                           
  2614                           ; 1 bytes @ 0x28
  2615   00007A                     	ds	1
  2616                           
  2617 ;;
  2618 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2619 ;;
  2620 ;; *************** function _main *****************
  2621 ;; Defined at:
  2622 ;;		line 87 in file "main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1
  2636 ;;      Params:         0       0       0
  2637 ;;      Locals:         0       0       0
  2638 ;;      Temps:          1       0       0
  2639 ;;      Totals:         1       0       0
  2640 ;;Total ram usage:        1 bytes
  2641 ;; Hardware stack levels required when called: 9
  2642 ;; This function calls:
  2643 ;;		_Init_Interrupcions
  2644 ;;		_LEDS_Init
  2645 ;;		_LEDS_Motor
  2646 ;;		_LcClear
  2647 ;;		_LcCursorOn
  2648 ;;		_LcInit
  2649 ;;		_MENU_Init
  2650 ;;		_MENU_Motor
  2651 ;;		_MENU_MotorActualitzarLCD
  2652 ;;		_MENU_MotorHandleHash
  2653 ;;		_MENU_MotorHandleSetIntensity
  2654 ;;		_RFID_Init
  2655 ;;		_SIO_Init
  2656 ;;		_TI_Init
  2657 ;;		_TM_Init
  2658 ;;		_TM_Motor
  2659 ;;		_motorRFIDcoop_NOU
  2660 ;; This function is called by:
  2661 ;;		Startup code after reset
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text0
  2666   0013F2                     __ptext0:
  2667                           	callstack 0
  2668   0013F2                     _main:
  2669                           	callstack 22
  2670                           
  2671                           ;main.c: 90:     Init_Interrupcions();
  2672                           
  2673                           ;incstack = 0
  2674   0013F2  EC0D  F00F         	call	_Init_Interrupcions	;wreg free
  2675                           
  2676                           ;main.c: 91:     TI_Init();
  2677   0013F6  ECC9  F00D         	call	_TI_Init	;wreg free
  2678                           
  2679                           ;main.c: 92:     SIO_Init();
  2680   0013FA  ECAA  F00E         	call	_SIO_Init	;wreg free
  2681                           
  2682                           ;main.c: 93:     MENU_Init();
  2683   0013FE  EC2E  F00E         	call	_MENU_Init	;wreg free
  2684                           
  2685                           ;main.c: 94:     TM_Init();
  2686   001402  EC08  F00E         	call	_TM_Init	;wreg free
  2687                           
  2688                           ;main.c: 95:     RFID_Init();
  2689   001406  EC08  F00F         	call	_RFID_Init	;wreg free
  2690                           
  2691                           ;main.c: 96:     LEDS_Init();
  2692   00140A  ECEC  F00B         	call	_LEDS_Init	;wreg free
  2693                           
  2694                           ;main.c: 98:     LcInit(2, 16);
  2695   00140E  0E10               	movlw	16
  2696   001410  6E66               	movwf	LcInit@columns^0,c
  2697   001412  0E02               	movlw	2
  2698   001414  EC69  F007         	call	_LcInit
  2699                           
  2700                           ;main.c: 99:     LcClear();
  2701   001418  EC85  F00E         	call	_LcClear	;wreg free
  2702                           
  2703                           ;main.c: 100:     LcCursorOn();
  2704   00141C  EC02  F00F         	call	_LcCursorOn	;wreg free
  2705                           
  2706                           ;main.c: 102:     TRISCbits.TRISC1 = 0;
  2707   001420  9294               	bcf	148,1,c	;volatile
  2708   001422                     l5231:
  2709                           
  2710                           ;main.c: 105:         LATCbits.LATC1 = !LATCbits.LATC1;
  2711   001422  B28B               	btfsc	139,1,c	;volatile
  2712   001424  D003               	goto	u3960
  2713   001426  6A7A               	clrf	??_main^0,c
  2714   001428  2A7A               	incf	??_main^0,f,c
  2715   00142A  D001               	goto	u3978
  2716   00142C                     u3960:
  2717   00142C  6A7A               	clrf	??_main^0,c
  2718   00142E                     u3978:
  2719   00142E  467A               	rlncf	??_main^0,f,c
  2720   001430  508B               	movf	139,w,c	;volatile
  2721   001432  187A               	xorwf	??_main^0,w,c
  2722   001434  0BFD               	andlw	-3
  2723   001436  187A               	xorwf	??_main^0,w,c
  2724   001438  6E8B               	movwf	139,c	;volatile
  2725                           
  2726                           ;main.c: 107:         MENU_MotorActualitzarLCD();
  2727   00143A  ECE9  F00E         	call	_MENU_MotorActualitzarLCD	;wreg free
  2728                           
  2729                           ;main.c: 108:         MENU_MotorHandleHash();
  2730   00143E  EC23  F006         	call	_MENU_MotorHandleHash	;wreg free
  2731                           
  2732                           ;main.c: 109:         MENU_Motor();
  2733   001442  EC90  F006         	call	_MENU_Motor	;wreg free
  2734                           
  2735                           ;main.c: 110:         MENU_MotorHandleSetIntensity();
  2736   001446  ECAE  F005         	call	_MENU_MotorHandleSetIntensity	;wreg free
  2737                           
  2738                           ;main.c: 111:         TM_Motor();
  2739   00144A  ECA4  F004         	call	_TM_Motor	;wreg free
  2740                           
  2741                           ;main.c: 113:         LEDS_Motor(0);
  2742   00144E  0E00               	movlw	0
  2743   001450  EC10  F004         	call	_LEDS_Motor
  2744                           
  2745                           ;main.c: 114:         LEDS_Motor(1);
  2746   001454  0E01               	movlw	1
  2747   001456  EC10  F004         	call	_LEDS_Motor
  2748                           
  2749                           ;main.c: 115:         LEDS_Motor(2);
  2750   00145A  0E02               	movlw	2
  2751   00145C  EC10  F004         	call	_LEDS_Motor
  2752                           
  2753                           ;main.c: 116:         LEDS_Motor(3);
  2754   001460  0E03               	movlw	3
  2755   001462  EC10  F004         	call	_LEDS_Motor
  2756                           
  2757                           ;main.c: 117:         LEDS_Motor(4);
  2758   001466  0E04               	movlw	4
  2759   001468  EC10  F004         	call	_LEDS_Motor
  2760                           
  2761                           ;main.c: 118:         LEDS_Motor(5);
  2762   00146C  0E05               	movlw	5
  2763   00146E  EC10  F004         	call	_LEDS_Motor
  2764                           
  2765                           ;main.c: 121:         motorRFIDcoop_NOU();
  2766   001472  EC5A  F003         	call	_motorRFIDcoop_NOU	;wreg free
  2767   001476  D7D5               	goto	l5231
  2768   001478                     __end_of_main:
  2769                           	callstack 0
  2770                           
  2771 ;; *************** function _motorRFIDcoop_NOU *****************
  2772 ;; Defined at:
  2773 ;;		line 773 in file "TRFID.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  i               1   39[COMRAM] unsigned char 
  2778 ;;  serNumCheck     1   38[COMRAM] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1
  2788 ;;      Params:         0       0       0
  2789 ;;      Locals:         2       0       0
  2790 ;;      Temps:          0       0       0
  2791 ;;      Totals:         2       0       0
  2792 ;;Total ram usage:        2 bytes
  2793 ;; Hardware stack levels used: 1
  2794 ;; Hardware stack levels required when called: 8
  2795 ;; This function calls:
  2796 ;;		_MENU_SaveUID
  2797 ;;		_MFRC522_CRC_NOU
  2798 ;;		_MFRC522_Clear_Bit
  2799 ;;		_MFRC522_ToCard_NOU
  2800 ;;		_MFRC522_Wr_1
  2801 ;;		_MFRC522_Wr_2
  2802 ;; This function is called by:
  2803 ;;		_main
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text1
  2808   0006B4                     __ptext1:
  2809                           	callstack 0
  2810   0006B4                     _motorRFIDcoop_NOU:
  2811                           	callstack 22
  2812                           
  2813                           ;TRFID.c: 774:     static unsigned backBits;;TRFID.c: 775:     static char buff[4];;TRFI
      +                          D.c: 776:     static unsigned char UID[5];;TRFID.c: 777:     static unsigned unLen;;TRFI
      +                          D.c: 778:     char i;;TRFID.c: 779:     char serNumCheck = 0;
  2814                           
  2815                           ;incstack = 0
  2816   0006B4  6A78               	clrf	motorRFIDcoop_NOU@serNumCheck^0,c
  2817                           
  2818                           ;TRFID.c: 780:     static char wr_state = 0;;TRFID.c: 782:     switch (state) {
  2819   0006B6  D094               	goto	l5049
  2820   0006B8                     l4963:
  2821                           
  2822                           ;TRFID.c: 784:             if (wr_state == 0) {
  2823   0006B8  502A               	movf	motorRFIDcoop_NOU@wr_state^0,w,c
  2824   0006BA  A4D8               	btfss	status,2,c
  2825   0006BC  D006               	goto	l4969
  2826                           
  2827                           ;TRFID.c: 785:                 MFRC522_Wr_1(0x0D);
  2828   0006BE  0E0D               	movlw	13
  2829   0006C0  ECB8  F00C         	call	_MFRC522_Wr_1
  2830   0006C4                     l4967:
  2831                           
  2832                           ;TRFID.c: 786:                 wr_state = 1;
  2833   0006C4  0E01               	movlw	1
  2834   0006C6  6E2A               	movwf	motorRFIDcoop_NOU@wr_state^0,c
  2835                           
  2836                           ;TRFID.c: 787:             } else {
  2837   0006C8  0012               	return	
  2838   0006CA                     l4969:
  2839                           
  2840                           ;TRFID.c: 788:                 MFRC522_Wr_2(0x07);
  2841   0006CA  0E07               	movlw	7
  2842   0006CC  EC23  F00D         	call	_MFRC522_Wr_2
  2843                           
  2844                           ;TRFID.c: 789:                 wr_state = 0;
  2845   0006D0  6A2A               	clrf	motorRFIDcoop_NOU@wr_state^0,c
  2846                           
  2847                           ;TRFID.c: 790:                 TagType[0] = 0x26;
  2848   0006D2  EE20 F000          	lfsr	2,0
  2849   0006D6  0E26               	movlw	38
  2850   0006D8  6EDF               	movwf	indf2,c
  2851   0006DA                     l4975:
  2852                           
  2853                           ;TRFID.c: 791:                 state++;
  2854   0006DA  2A44               	incf	_state^0,f,c
  2855   0006DC  0012               	return	
  2856   0006DE                     l4977:
  2857                           
  2858                           ;TRFID.c: 796:             _status = MFRC522_ToCard_NOU(0x0C, TagType, 1, TagType, &back
      +                          Bits);
  2859   0006DE  0E00               	movlw	0
  2860   0006E0  6E5B               	movwf	MFRC522_ToCard_NOU@sendData^0,c
  2861   0006E2  0E01               	movlw	1
  2862   0006E4  6E5C               	movwf	MFRC522_ToCard_NOU@sendLen^0,c
  2863   0006E6  0E00               	movlw	0
  2864   0006E8  6E5D               	movwf	MFRC522_ToCard_NOU@backData^0,c
  2865   0006EA  0E4C               	movlw	low motorRFIDcoop_NOU@backBits
  2866   0006EC  6E5E               	movwf	MFRC522_ToCard_NOU@backLen^0,c
  2867   0006EE  0E0C               	movlw	12
  2868   0006F0  EC1A  F000         	call	_MFRC522_ToCard_NOU
  2869   0006F4  6E43               	movwf	__status^0,c
  2870                           
  2871                           ;TRFID.c: 797:             break;
  2872   0006F6  0012               	return	
  2873   0006F8                     l4979:
  2874                           
  2875                           ;TRFID.c: 800:             if ((_status != 0) || (backBits != 0x10)) {
  2876   0006F8  5043               	movf	__status^0,w,c
  2877   0006FA  A4D8               	btfss	status,2,c
  2878   0006FC  D005               	goto	u3870
  2879   0006FE  0E10               	movlw	16
  2880   000700  184C               	xorwf	motorRFIDcoop_NOU@backBits^0,w,c
  2881   000702  104D               	iorwf	(motorRFIDcoop_NOU@backBits+1)^0,w,c
  2882   000704  B4D8               	btfsc	status,2,c
  2883   000706  D7E9               	goto	l4975
  2884   000708                     u3870:
  2885                           
  2886                           ;TRFID.c: 801:                 state = 0;
  2887   000708  6A44               	clrf	_state^0,c
  2888                           
  2889                           ;TRFID.c: 802:             } else {
  2890   00070A  0012               	return	
  2891   00070C                     l4985:
  2892                           
  2893                           ;TRFID.c: 808:             if (wr_state == 0) {
  2894   00070C  502A               	movf	motorRFIDcoop_NOU@wr_state^0,w,c
  2895   00070E  A4D8               	btfss	status,2,c
  2896   000710  D004               	goto	l4991
  2897                           
  2898                           ;TRFID.c: 809:                 MFRC522_Wr_1(0x0D);
  2899   000712  0E0D               	movlw	13
  2900   000714  ECB8  F00C         	call	_MFRC522_Wr_1
  2901   000718  D7D5               	goto	l4967
  2902   00071A                     l4991:
  2903                           
  2904                           ;TRFID.c: 812:                 MFRC522_Wr_2(0x00);
  2905   00071A  0E00               	movlw	0
  2906   00071C  EC23  F00D         	call	_MFRC522_Wr_2
  2907                           
  2908                           ;TRFID.c: 813:                 wr_state = 0;
  2909   000720  6A2A               	clrf	motorRFIDcoop_NOU@wr_state^0,c
  2910                           
  2911                           ;TRFID.c: 814:                 UID[0] = 0x93;
  2912   000722  0E93               	movlw	147
  2913   000724  0100               	movlb	0	; () banked
  2914   000726  6FC6               	movwf	motorRFIDcoop_NOU@UID& (0+255),b
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;TRFID.c: 815:                 UID[1] = 0x20;
  2918   000728  0E20               	movlw	32
  2919   00072A  6FC7               	movwf	(motorRFIDcoop_NOU@UID+1)& (0+255),b
  2920                           
  2921                           ;TRFID.c: 816:                 MFRC522_Clear_Bit(0x08, 0x08);
  2922   00072C  0E08               	movlw	8
  2923   00072E  6E5C               	movwf	MFRC522_Clear_Bit@mask^0,c
  2924   000730  0E08               	movlw	8
  2925   000732  EC78  F00E         	call	_MFRC522_Clear_Bit
  2926   000736  D7D1               	goto	l4975
  2927   000738                     l5001:
  2928                           
  2929                           ;TRFID.c: 822:             _status = MFRC522_ToCard_NOU(0x0C, UID, 2, UID, &unLen);
  2930   000738  0EC6               	movlw	low motorRFIDcoop_NOU@UID
  2931   00073A  6E5B               	movwf	MFRC522_ToCard_NOU@sendData^0,c
  2932   00073C  0E02               	movlw	2
  2933   00073E  6E5C               	movwf	MFRC522_ToCard_NOU@sendLen^0,c
  2934   000740  0EC6               	movlw	low motorRFIDcoop_NOU@UID
  2935   000742  6E5D               	movwf	MFRC522_ToCard_NOU@backData^0,c
  2936   000744  0E4A               	movlw	low motorRFIDcoop_NOU@unLen
  2937   000746  6E5E               	movwf	MFRC522_ToCard_NOU@backLen^0,c
  2938   000748  0E0C               	movlw	12
  2939   00074A  EC1A  F000         	call	_MFRC522_ToCard_NOU
  2940   00074E  6E43               	movwf	__status^0,c
  2941                           
  2942                           ;TRFID.c: 823:             break;
  2943   000750  0012               	return	
  2944   000752                     l5003:
  2945                           
  2946                           ;TRFID.c: 826:             if (_status == 0) {
  2947   000752  5043               	movf	__status^0,w,c
  2948   000754  A4D8               	btfss	status,2,c
  2949   000756  D012               	goto	l5021
  2950                           
  2951                           ;TRFID.c: 827:                 for (i = 0; i < 4; i++) serNumCheck ^= UID[i];
  2952   000758  6A79               	clrf	motorRFIDcoop_NOU@i^0,c
  2953   00075A                     l5011:
  2954   00075A  5079               	movf	motorRFIDcoop_NOU@i^0,w,c
  2955   00075C  0FC6               	addlw	low motorRFIDcoop_NOU@UID
  2956   00075E  6ED9               	movwf	fsr2l,c
  2957   000760  6ADA               	clrf	fsr2h,c
  2958   000762  50DF               	movf	indf2,w,c
  2959   000764  1A78               	xorwf	motorRFIDcoop_NOU@serNumCheck^0,f,c
  2960   000766  2A79               	incf	motorRFIDcoop_NOU@i^0,f,c
  2961   000768  0E03               	movlw	3
  2962   00076A  6479               	cpfsgt	motorRFIDcoop_NOU@i^0,c
  2963   00076C  D7F6               	goto	l5011
  2964                           
  2965                           ;TRFID.c: 828:                 if (serNumCheck != UID[4]) _status = 2;
  2966   00076E  5078               	movf	motorRFIDcoop_NOU@serNumCheck^0,w,c
  2967   000770  0100               	movlb	0	; () banked
  2968   000772  19CA               	xorwf	(motorRFIDcoop_NOU@UID+4)& (0+255),w,b
  2969   000774  B4D8               	btfsc	status,2,c
  2970   000776  D002               	goto	l5021
  2971                           
  2972                           ; BSR set to: 0
  2973   000778  0E02               	movlw	2
  2974   00077A  6E43               	movwf	__status^0,c
  2975   00077C                     l5021:
  2976                           
  2977                           ;TRFID.c: 830:             UID[5] = 0;
  2978   00077C  0100               	movlb	0	; () banked
  2979   00077E  6BCB               	clrf	(motorRFIDcoop_NOU@UID+5)& (0+255),b
  2980                           
  2981                           ;TRFID.c: 832:             if (_status == 0) state++;
  2982   000780  5043               	movf	__status^0,w,c
  2983   000782  B4D8               	btfsc	status,2,c
  2984   000784  D7AA               	goto	l4975
  2985                           
  2986                           ; BSR set to: 0
  2987   000786  0E07               	movlw	7
  2988   000788  6E44               	movwf	_state^0,c
  2989   00078A  0012               	return	
  2990   00078C                     l5027:
  2991                           
  2992                           ;TRFID.c: 837:             MENU_SaveUID(UID);
  2993   00078C  0EC6               	movlw	low motorRFIDcoop_NOU@UID
  2994   00078E  6E6C               	movwf	MENU_SaveUID@UID^0,c
  2995   000790  EC9E  F002         	call	_MENU_SaveUID	;wreg free
  2996   000794  D7A2               	goto	l4975
  2997   000796                     l5031:
  2998                           
  2999                           ;TRFID.c: 842:             buff[0] = 0x50;
  3000   000796  0E50               	movlw	80
  3001   000798  0100               	movlb	0	; () banked
  3002   00079A  6FD0               	movwf	motorRFIDcoop_NOU@buff& (0+255),b
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;TRFID.c: 843:             buff[1] = 0;
  3006   00079C  6BD1               	clrf	(motorRFIDcoop_NOU@buff+1)& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;TRFID.c: 844:             MFRC522_CRC_NOU(buff, 2, &buff[2]);
  3010   00079E  0ED0               	movlw	low motorRFIDcoop_NOU@buff
  3011   0007A0  6E5F               	movwf	MFRC522_CRC_NOU@dataIn^0,c
  3012   0007A2  0E02               	movlw	2
  3013   0007A4  6E60               	movwf	MFRC522_CRC_NOU@length^0,c
  3014   0007A6  0ED2               	movlw	low (motorRFIDcoop_NOU@buff+2)
  3015   0007A8  6E61               	movwf	MFRC522_CRC_NOU@dataOut^0,c
  3016   0007AA  ECD4  F007         	call	_MFRC522_CRC_NOU	;wreg free
  3017                           
  3018                           ;TRFID.c: 845:             MFRC522_Clear_Bit(0x08, 0x80);
  3019   0007AE  0E80               	movlw	128
  3020   0007B0  6E5C               	movwf	MFRC522_Clear_Bit@mask^0,c
  3021   0007B2  0E08               	movlw	8
  3022   0007B4  EC78  F00E         	call	_MFRC522_Clear_Bit
  3023   0007B8  D790               	goto	l4975
  3024   0007BA                     l5041:
  3025                           
  3026                           ;TRFID.c: 850:             _status = MFRC522_ToCard_NOU(0x0C, buff, 4, buff, &unLen);
  3027   0007BA  0ED0               	movlw	low motorRFIDcoop_NOU@buff
  3028   0007BC  6E5B               	movwf	MFRC522_ToCard_NOU@sendData^0,c
  3029   0007BE  0E04               	movlw	4
  3030   0007C0  6E5C               	movwf	MFRC522_ToCard_NOU@sendLen^0,c
  3031   0007C2  0ED0               	movlw	low motorRFIDcoop_NOU@buff
  3032   0007C4  6E5D               	movwf	MFRC522_ToCard_NOU@backData^0,c
  3033   0007C6  0E4A               	movlw	low motorRFIDcoop_NOU@unLen
  3034   0007C8  6E5E               	movwf	MFRC522_ToCard_NOU@backLen^0,c
  3035   0007CA  0E0C               	movlw	12
  3036   0007CC  EC1A  F000         	call	_MFRC522_ToCard_NOU
  3037   0007D0  6E43               	movwf	__status^0,c
  3038                           
  3039                           ;TRFID.c: 851:             break;
  3040   0007D2  0012               	return	
  3041   0007D4                     l5043:
  3042                           
  3043                           ;TRFID.c: 854:             MFRC522_Clear_Bit(0x08, 0x08);
  3044   0007D4  0E08               	movlw	8
  3045   0007D6  6E5C               	movwf	MFRC522_Clear_Bit@mask^0,c
  3046   0007D8  0E08               	movlw	8
  3047   0007DA  EC78  F00E         	call	_MFRC522_Clear_Bit
  3048   0007DE  D794               	goto	u3870
  3049   0007E0                     l5049:
  3050   0007E0  5044               	movf	_state^0,w,c
  3051                           
  3052                           ; Switch size 1, requested type "simple"
  3053                           ; Number of cases is 10, Range of values is 0 to 9
  3054                           ; switch strategies available:
  3055                           ; Name         Instructions Cycles
  3056                           ; simple_byte           31    16 (average)
  3057                           ;	Chosen strategy is simple_byte
  3058   0007E2  0A00               	xorlw	0	; case 0
  3059   0007E4  B4D8               	btfsc	status,2,c
  3060   0007E6  D768               	goto	l4963
  3061   0007E8  0A01               	xorlw	1	; case 1
  3062   0007EA  B4D8               	btfsc	status,2,c
  3063   0007EC  D778               	goto	l4977
  3064   0007EE  0A03               	xorlw	3	; case 2
  3065   0007F0  B4D8               	btfsc	status,2,c
  3066   0007F2  D782               	goto	l4979
  3067   0007F4  0A01               	xorlw	1	; case 3
  3068   0007F6  B4D8               	btfsc	status,2,c
  3069   0007F8  D789               	goto	l4985
  3070   0007FA  0A07               	xorlw	7	; case 4
  3071   0007FC  B4D8               	btfsc	status,2,c
  3072   0007FE  D79C               	goto	l5001
  3073   000800  0A01               	xorlw	1	; case 5
  3074   000802  B4D8               	btfsc	status,2,c
  3075   000804  D7A6               	goto	l5003
  3076   000806  0A03               	xorlw	3	; case 6
  3077   000808  B4D8               	btfsc	status,2,c
  3078   00080A  D7C0               	goto	l5027
  3079   00080C  0A01               	xorlw	1	; case 7
  3080   00080E  B4D8               	btfsc	status,2,c
  3081   000810  D7C2               	goto	l5031
  3082   000812  0A0F               	xorlw	15	; case 8
  3083   000814  B4D8               	btfsc	status,2,c
  3084   000816  D7D1               	goto	l5041
  3085   000818  0A01               	xorlw	1	; case 9
  3086   00081A  A4D8               	btfss	status,2,c
  3087   00081C  0012               	return	
  3088   00081E  D7DA               	goto	l5043
  3089   000820                     __end_of_motorRFIDcoop_NOU:
  3090                           	callstack 0
  3091                           
  3092 ;; *************** function _MFRC522_ToCard_NOU *****************
  3093 ;; Defined at:
  3094 ;;		line 376 in file "TRFID.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  command         1    wreg     unsigned char 
  3097 ;;  sendData        1    9[COMRAM] PTR unsigned char 
  3098 ;;		 -> NULL(0), motorRFIDcoop_NOU@buff(4), motorRFIDcoop_NOU@UID(5), 
  3099 ;;  sendLen         1   10[COMRAM] unsigned char 
  3100 ;;  backData        1   11[COMRAM] PTR unsigned char 
  3101 ;;		 -> NULL(0), motorRFIDcoop_NOU@buff(4), motorRFIDcoop_NOU@UID(5), 
  3102 ;;  backLen         1   12[COMRAM] PTR unsigned int 
  3103 ;;		 -> motorRFIDcoop_NOU@unLen(2), motorRFIDcoop_NOU@backBits(2), 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  command         1   25[COMRAM] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      unsigned char 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1
  3115 ;;      Params:         4       0       0
  3116 ;;      Locals:        11       0       0
  3117 ;;      Temps:          2       0       0
  3118 ;;      Totals:        17       0       0
  3119 ;;Total ram usage:       17 bytes
  3120 ;; Hardware stack levels used: 1
  3121 ;; Hardware stack levels required when called: 5
  3122 ;; This function calls:
  3123 ;;		_MFRC522_Rd
  3124 ;;		_MFRC522_Wr_1
  3125 ;;		_MFRC522_Wr_2
  3126 ;; This function is called by:
  3127 ;;		_motorRFIDcoop_NOU
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text2
  3132   000034                     __ptext2:
  3133                           	callstack 0
  3134   000034                     _MFRC522_ToCard_NOU:
  3135                           	callstack 24
  3136                           
  3137                           ;incstack = 0
  3138                           ;MFRC522_ToCard_NOU@command stored from wreg
  3139   000034  6E6B               	movwf	MFRC522_ToCard_NOU@command^0,c
  3140                           
  3141                           ;TRFID.c: 377:     static char _status = 2;;TRFID.c: 378:     static char irqEn = 0x00;;
      +                          TRFID.c: 379:     static char waitIRq = 0x00;;TRFID.c: 380:     static char lastBits;;TR
      +                          FID.c: 381:     static char n;;TRFID.c: 382:     static unsigned char rd;;TRFID.c: 383: 
      +                              static unsigned int j;;TRFID.c: 384:     static char state_aux = 0;;TRFID.c: 385:   
      +                            static unsigned char tmp = 0x0;;TRFID.c: 386:     static char wr_state = 0;;TRFID.c: 3
      +                          88:     switch (state_aux) {
  3142   000036  D164               	goto	l4283
  3143   000038                     l4039:
  3144                           
  3145                           ;TRFID.c: 392:                     irqEn = 0x12;
  3146   000038  0E12               	movlw	18
  3147   00003A  6E35               	movwf	MFRC522_ToCard_NOU@irqEn^0,c
  3148                           
  3149                           ;TRFID.c: 393:                     waitIRq = 0x10;
  3150   00003C  0E10               	movlw	16
  3151   00003E  D003               	goto	L1
  3152   000040                     l4041:
  3153                           
  3154                           ;TRFID.c: 396:                     irqEn = 0x77;
  3155   000040  0E77               	movlw	119
  3156   000042  6E35               	movwf	MFRC522_ToCard_NOU@irqEn^0,c
  3157                           
  3158                           ;TRFID.c: 397:                     waitIRq = 0x30;
  3159   000044  0E30               	movlw	48
  3160   000046                     L1:
  3161   000046  6E34               	movwf	MFRC522_ToCard_NOU@waitIRq^0,c
  3162                           
  3163                           ;TRFID.c: 398:                     break;
  3164   000048  D007               	goto	l4047
  3165   00004A                     l4045:
  3166   00004A  506B               	movf	MFRC522_ToCard_NOU@command^0,w,c
  3167                           
  3168                           ; Switch size 1, requested type "simple"
  3169                           ; Number of cases is 2, Range of values is 12 to 14
  3170                           ; switch strategies available:
  3171                           ; Name         Instructions Cycles
  3172                           ; simple_byte            7     4 (average)
  3173                           ;	Chosen strategy is simple_byte
  3174   00004C  0A0C               	xorlw	12	; case 12
  3175   00004E  B4D8               	btfsc	status,2,c
  3176   000050  D7F7               	goto	l4041
  3177   000052  0A02               	xorlw	2	; case 14
  3178   000054  B4D8               	btfsc	status,2,c
  3179   000056  D7F0               	goto	l4039
  3180   000058                     l4047:
  3181                           
  3182                           ;TRFID.c: 400:             state_aux++;
  3183   000058  2A30               	incf	MFRC522_ToCard_NOU@state_aux^0,f,c
  3184                           
  3185                           ;TRFID.c: 401:             break;
  3186   00005A  D150               	goto	l4277
  3187   00005C                     l4049:
  3188                           
  3189                           ;TRFID.c: 404:             if (wr_state == 0) {
  3190   00005C  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3191   00005E  A4D8               	btfss	status,2,c
  3192   000060  D006               	goto	l4055
  3193                           
  3194                           ;TRFID.c: 405:                 MFRC522_Wr_1(0x02);
  3195   000062  0E02               	movlw	2
  3196   000064  ECB8  F00C         	call	_MFRC522_Wr_1
  3197   000068                     l4053:
  3198                           
  3199                           ;TRFID.c: 406:                 wr_state = 1;
  3200   000068  0E01               	movlw	1
  3201   00006A  6E2E               	movwf	MFRC522_ToCard_NOU@wr_state^0,c
  3202                           
  3203                           ;TRFID.c: 407:             } else {
  3204   00006C  D147               	goto	l4277
  3205   00006E                     l4055:
  3206                           
  3207                           ;TRFID.c: 408:                 MFRC522_Wr_2(irqEn | 0x80);
  3208   00006E  5035               	movf	MFRC522_ToCard_NOU@irqEn^0,w,c
  3209   000070  0980               	iorlw	128
  3210   000072  EC23  F00D         	call	_MFRC522_Wr_2
  3211   000076                     l4057:
  3212                           
  3213                           ;TRFID.c: 409:                 wr_state = 0;
  3214   000076  6A2E               	clrf	MFRC522_ToCard_NOU@wr_state^0,c
  3215   000078                     l4059:
  3216                           
  3217                           ;TRFID.c: 410:                 tmp = 0;
  3218   000078  6A2F               	clrf	MFRC522_ToCard_NOU@tmp^0,c
  3219   00007A  D7EE               	goto	l4047
  3220   00007C                     l4063:
  3221                           
  3222                           ;TRFID.c: 416:             tmp = MFRC522_Rd(0x04);
  3223   00007C  0E04               	movlw	4
  3224   00007E  EC28  F009         	call	_MFRC522_Rd
  3225   000082  D088               	goto	L5
  3226   000084                     l4067:
  3227                           
  3228                           ;TRFID.c: 421:             if (wr_state == 0) {
  3229   000084  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3230   000086  A4D8               	btfss	status,2,c
  3231   000088  D004               	goto	l4073
  3232                           
  3233                           ;TRFID.c: 422:                 MFRC522_Wr_1(0x04);
  3234   00008A  0E04               	movlw	4
  3235   00008C  ECB8  F00C         	call	_MFRC522_Wr_1
  3236   000090  D7EB               	goto	l4053
  3237   000092                     l4073:
  3238                           
  3239                           ;TRFID.c: 425:                 MFRC522_Wr_2(tmp & ~0x80);
  3240   000092  502F               	movf	MFRC522_ToCard_NOU@tmp^0,w,c
  3241   000094  0B7F               	andlw	127
  3242   000096  EC23  F00D         	call	_MFRC522_Wr_2
  3243   00009A  D7ED               	goto	l4057
  3244   00009C                     l4081:
  3245                           
  3246                           ;TRFID.c: 433:             tmp = MFRC522_Rd(0x0A);
  3247   00009C  0E0A               	movlw	10
  3248   00009E  EC28  F009         	call	_MFRC522_Rd
  3249   0000A2  D078               	goto	L5
  3250   0000A4                     l4085:
  3251                           
  3252                           ;TRFID.c: 438:             if (wr_state == 0) {
  3253   0000A4  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3254   0000A6  A4D8               	btfss	status,2,c
  3255   0000A8  D004               	goto	l4091
  3256                           
  3257                           ;TRFID.c: 439:                 MFRC522_Wr_1(0x0A);
  3258   0000AA  0E0A               	movlw	10
  3259   0000AC  ECB8  F00C         	call	_MFRC522_Wr_1
  3260   0000B0  D7DB               	goto	l4053
  3261   0000B2                     l4091:
  3262                           
  3263                           ;TRFID.c: 442:                 MFRC522_Wr_2(tmp | 0x80);
  3264   0000B2  502F               	movf	MFRC522_ToCard_NOU@tmp^0,w,c
  3265   0000B4  0980               	iorlw	128
  3266   0000B6  EC23  F00D         	call	_MFRC522_Wr_2
  3267   0000BA                     l4093:
  3268                           
  3269                           ;TRFID.c: 443:                 wr_state = 0;
  3270   0000BA  6A2E               	clrf	MFRC522_ToCard_NOU@wr_state^0,c
  3271   0000BC  D7CD               	goto	l4047
  3272   0000BE                     l4097:
  3273                           
  3274                           ;TRFID.c: 449:             if (wr_state == 0) {
  3275   0000BE  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3276   0000C0  A4D8               	btfss	status,2,c
  3277   0000C2  D004               	goto	l4103
  3278                           
  3279                           ;TRFID.c: 450:                 MFRC522_Wr_1(0x01);
  3280   0000C4  0E01               	movlw	1
  3281   0000C6  ECB8  F00C         	call	_MFRC522_Wr_1
  3282   0000CA  D7CE               	goto	l4053
  3283   0000CC                     l4103:
  3284                           
  3285                           ;TRFID.c: 453:                 MFRC522_Wr_2(0x00);
  3286   0000CC  0E00               	movlw	0
  3287   0000CE  EC23  F00D         	call	_MFRC522_Wr_2
  3288                           
  3289                           ;TRFID.c: 454:                 wr_state = 0;
  3290   0000D2  6A2E               	clrf	MFRC522_ToCard_NOU@wr_state^0,c
  3291   0000D4                     l4107:
  3292                           
  3293                           ;TRFID.c: 455:                 j = 0;
  3294   0000D4  0E00               	movlw	0
  3295   0000D6  6E0C               	movwf	(MFRC522_ToCard_NOU@j+1)^0,c
  3296   0000D8  0E00               	movlw	0
  3297   0000DA  6E0B               	movwf	MFRC522_ToCard_NOU@j^0,c
  3298   0000DC  D7BD               	goto	l4047
  3299   0000DE                     l4111:
  3300                           
  3301                           ;TRFID.c: 461:             if (j < sendLen) {
  3302   0000DE  505C               	movf	MFRC522_ToCard_NOU@sendLen^0,w,c
  3303   0000E0  5C0B               	subwf	MFRC522_ToCard_NOU@j^0,w,c
  3304   0000E2  0E00               	movlw	0
  3305   0000E4  580C               	subwfb	(MFRC522_ToCard_NOU@j+1)^0,w,c
  3306   0000E6  B0D8               	btfsc	status,0,c
  3307   0000E8  D7B7               	goto	l4047
  3308                           
  3309                           ;TRFID.c: 462:                 if (wr_state == 0) {
  3310   0000EA  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3311   0000EC  A4D8               	btfss	status,2,c
  3312   0000EE  D004               	goto	l4119
  3313                           
  3314                           ;TRFID.c: 463:                     MFRC522_Wr_1(0x09);
  3315   0000F0  0E09               	movlw	9
  3316   0000F2  ECB8  F00C         	call	_MFRC522_Wr_1
  3317   0000F6  D7B8               	goto	l4053
  3318   0000F8                     l4119:
  3319                           
  3320                           ;TRFID.c: 466:                     MFRC522_Wr_2(sendData[j++]);
  3321   0000F8  505B               	movf	MFRC522_ToCard_NOU@sendData^0,w,c
  3322   0000FA  240B               	addwf	MFRC522_ToCard_NOU@j^0,w,c
  3323   0000FC  6ED9               	movwf	fsr2l,c
  3324   0000FE  6ADA               	clrf	fsr2h,c
  3325   000100  50DF               	movf	indf2,w,c
  3326   000102  EC23  F00D         	call	_MFRC522_Wr_2
  3327   000106  4A0B               	infsnz	MFRC522_ToCard_NOU@j^0,f,c
  3328   000108  2A0C               	incf	(MFRC522_ToCard_NOU@j+1)^0,f,c
  3329                           
  3330                           ;TRFID.c: 467:                     wr_state = 0;
  3331   00010A  6A2E               	clrf	MFRC522_ToCard_NOU@wr_state^0,c
  3332   00010C  D0F7               	goto	l4277
  3333   00010E                     l4127:
  3334                           
  3335                           ;TRFID.c: 475:             if (wr_state == 0) {
  3336   00010E  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3337   000110  A4D8               	btfss	status,2,c
  3338   000112  D004               	goto	l4133
  3339                           
  3340                           ;TRFID.c: 476:                 MFRC522_Wr_1(0x01);
  3341   000114  0E01               	movlw	1
  3342   000116  ECB8  F00C         	call	_MFRC522_Wr_1
  3343   00011A  D7A6               	goto	l4053
  3344   00011C                     l4133:
  3345                           
  3346                           ;TRFID.c: 479:                 MFRC522_Wr_2(command);
  3347   00011C  506B               	movf	MFRC522_ToCard_NOU@command^0,w,c
  3348   00011E  EC23  F00D         	call	_MFRC522_Wr_2
  3349   000122  D7CB               	goto	l4093
  3350   000124                     l4139:
  3351                           
  3352                           ;TRFID.c: 486:             state_aux = (command == 0x0C) ? 10 : 12;
  3353   000124  0E0C               	movlw	12
  3354   000126  186B               	xorwf	MFRC522_ToCard_NOU@command^0,w,c
  3355   000128  B4D8               	btfsc	status,2,c
  3356   00012A  D004               	goto	l4143
  3357   00012C  0E00               	movlw	0
  3358   00012E  6E62               	movwf	(_MFRC522_ToCard_NOU$1116+1)^0,c
  3359   000130  0E0C               	movlw	12
  3360   000132  D003               	goto	L4
  3361   000134                     l4143:
  3362   000134  0E00               	movlw	0
  3363   000136  6E62               	movwf	(_MFRC522_ToCard_NOU$1116+1)^0,c
  3364   000138  0E0A               	movlw	10
  3365   00013A                     L4:
  3366   00013A  6E61               	movwf	_MFRC522_ToCard_NOU$1116^0,c
  3367   00013C  C061  F030         	movff	_MFRC522_ToCard_NOU$1116,MFRC522_ToCard_NOU@state_aux
  3368                           
  3369                           ;TRFID.c: 487:             break;
  3370   000140  D0DD               	goto	l4277
  3371   000142                     l4147:
  3372                           
  3373                           ;TRFID.c: 490:             tmp = MFRC522_Rd(0x0D);
  3374   000142  0E0D               	movlw	13
  3375   000144  EC28  F009         	call	_MFRC522_Rd
  3376   000148  D025               	goto	L5
  3377   00014A                     l4151:
  3378                           
  3379                           ;TRFID.c: 495:             if (wr_state == 0) {
  3380   00014A  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3381   00014C  A4D8               	btfss	status,2,c
  3382   00014E  D004               	goto	l4157
  3383                           
  3384                           ;TRFID.c: 496:                 MFRC522_Wr_1(0x0D);
  3385   000150  0E0D               	movlw	13
  3386   000152  ECB8  F00C         	call	_MFRC522_Wr_1
  3387   000156  D788               	goto	l4053
  3388   000158                     l4157:
  3389                           
  3390                           ;TRFID.c: 499:                 MFRC522_Wr_2(tmp | 0x80);
  3391   000158  502F               	movf	MFRC522_ToCard_NOU@tmp^0,w,c
  3392   00015A  0980               	iorlw	128
  3393   00015C  EC23  F00D         	call	_MFRC522_Wr_2
  3394   000160  D7AC               	goto	l4093
  3395   000162                     l493:
  3396                           
  3397                           ;TRFID.c: 506:             j = 0xFFFF;
  3398   000162  680B               	setf	MFRC522_ToCard_NOU@j^0,c
  3399   000164  680C               	setf	(MFRC522_ToCard_NOU@j+1)^0,c
  3400   000166  D778               	goto	l4047
  3401   000168                     l4165:
  3402                           
  3403                           ;TRFID.c: 511:             n = MFRC522_Rd(0x04);
  3404   000168  0E04               	movlw	4
  3405   00016A  EC28  F009         	call	_MFRC522_Rd
  3406   00016E  D058               	goto	L6
  3407   000170                     l4169:
  3408                           
  3409                           ;TRFID.c: 516:             j--;
  3410   000170  060B               	decf	MFRC522_ToCard_NOU@j^0,f,c
  3411   000172  A0D8               	btfss	status,0,c
  3412   000174  060C               	decf	(MFRC522_ToCard_NOU@j+1)^0,f,c
  3413                           
  3414                           ;TRFID.c: 517:             if (j && !(n & 0x01) && !(n & waitIRq)) {
  3415   000176  500B               	movf	MFRC522_ToCard_NOU@j^0,w,c
  3416   000178  100C               	iorwf	(MFRC522_ToCard_NOU@j+1)^0,w,c
  3417   00017A  A4D8               	btfss	status,2,c
  3418   00017C  B032               	btfsc	MFRC522_ToCard_NOU@n^0,0,c
  3419   00017E  D77C               	goto	l4059
  3420   000180  5032               	movf	MFRC522_ToCard_NOU@n^0,w,c
  3421   000182  1434               	andwf	MFRC522_ToCard_NOU@waitIRq^0,w,c
  3422   000184  0900               	iorlw	0
  3423   000186  A4D8               	btfss	status,2,c
  3424   000188  D777               	goto	l4059
  3425                           
  3426                           ;TRFID.c: 518:                 state_aux--;
  3427   00018A  0630               	decf	MFRC522_ToCard_NOU@state_aux^0,f,c
  3428                           
  3429                           ;TRFID.c: 519:             } else {
  3430   00018C  D0B7               	goto	l4277
  3431   00018E                     l4181:
  3432                           
  3433                           ;TRFID.c: 526:             tmp = MFRC522_Rd(0x0D);
  3434   00018E  0E0D               	movlw	13
  3435   000190  EC28  F009         	call	_MFRC522_Rd
  3436   000194                     L5:
  3437   000194  6E2F               	movwf	MFRC522_ToCard_NOU@tmp^0,c
  3438   000196  D760               	goto	l4047
  3439   000198                     l4185:
  3440                           
  3441                           ;TRFID.c: 531:             if (wr_state == 0) {
  3442   000198  502E               	movf	MFRC522_ToCard_NOU@wr_state^0,w,c
  3443   00019A  A4D8               	btfss	status,2,c
  3444   00019C  D004               	goto	l4191
  3445                           
  3446                           ;TRFID.c: 532:                 MFRC522_Wr_1(0x0D);
  3447   00019E  0E0D               	movlw	13
  3448   0001A0  ECB8  F00C         	call	_MFRC522_Wr_1
  3449   0001A4  D761               	goto	l4053
  3450   0001A6                     l4191:
  3451                           
  3452                           ;TRFID.c: 535:                 MFRC522_Wr_2(tmp & ~0x80);
  3453   0001A6  502F               	movf	MFRC522_ToCard_NOU@tmp^0,w,c
  3454   0001A8  0B7F               	andlw	127
  3455   0001AA  EC23  F00D         	call	_MFRC522_Wr_2
  3456   0001AE  D785               	goto	l4093
  3457   0001B0                     l4197:
  3458                           
  3459                           ;TRFID.c: 542:             state_aux = (j != 0) ? 18 : 28;
  3460   0001B0  500B               	movf	MFRC522_ToCard_NOU@j^0,w,c
  3461   0001B2  100C               	iorwf	(MFRC522_ToCard_NOU@j+1)^0,w,c
  3462   0001B4  A4D8               	btfss	status,2,c
  3463   0001B6  D004               	goto	l4201
  3464   0001B8  0E00               	movlw	0
  3465   0001BA  6E64               	movwf	(_MFRC522_ToCard_NOU$1117+1)^0,c
  3466   0001BC  0E1C               	movlw	28
  3467   0001BE  D003               	goto	L7
  3468   0001C0                     l4201:
  3469   0001C0  0E00               	movlw	0
  3470   0001C2  6E64               	movwf	(_MFRC522_ToCard_NOU$1117+1)^0,c
  3471   0001C4  0E12               	movlw	18
  3472   0001C6                     L7:
  3473   0001C6  6E63               	movwf	_MFRC522_ToCard_NOU$1117^0,c
  3474   0001C8  C063  F030         	movff	_MFRC522_ToCard_NOU$1117,MFRC522_ToCard_NOU@state_aux
  3475                           
  3476                           ;TRFID.c: 543:             break;
  3477   0001CC  D097               	goto	l4277
  3478   0001CE                     l4205:
  3479                           
  3480                           ;TRFID.c: 546:             rd = MFRC522_Rd(0x06) & 0x1B;
  3481   0001CE  0E06               	movlw	6
  3482   0001D0  EC28  F009         	call	_MFRC522_Rd
  3483   0001D4  0B1B               	andlw	27
  3484   0001D6  6E31               	movwf	MFRC522_ToCard_NOU@rd^0,c
  3485   0001D8  D73F               	goto	l4047
  3486   0001DA                     l4209:
  3487                           
  3488                           ;TRFID.c: 551:             if (!rd) {
  3489   0001DA  5031               	movf	MFRC522_ToCard_NOU@rd^0,w,c
  3490   0001DC  A4D8               	btfss	status,2,c
  3491   0001DE  D002               	goto	l4215
  3492                           
  3493                           ;TRFID.c: 552:                 _status = 0;
  3494   0001E0  6A7B               	clrf	MFRC522_ToCard_NOU@_status^0,c
  3495   0001E2  D73A               	goto	l4047
  3496   0001E4                     l4215:
  3497                           
  3498                           ;TRFID.c: 555:                 _status = 2;
  3499   0001E4  0E02               	movlw	2
  3500   0001E6  6E7B               	movwf	MFRC522_ToCard_NOU@_status^0,c
  3501                           
  3502                           ;TRFID.c: 556:                 state_aux = 28;
  3503   0001E8  0E1C               	movlw	28
  3504   0001EA  D081               	goto	L8
  3505   0001EC                     l4217:
  3506                           
  3507                           ;TRFID.c: 561:             if ((n & irqEn & 0x01)) {
  3508   0001EC  5032               	movf	MFRC522_ToCard_NOU@n^0,w,c
  3509   0001EE  1435               	andwf	MFRC522_ToCard_NOU@irqEn^0,w,c
  3510   0001F0  6E5F               	movwf	??_MFRC522_ToCard_NOU^0,c
  3511   0001F2  A05F               	btfss	??_MFRC522_ToCard_NOU^0,0,c
  3512   0001F4  D731               	goto	l4047
  3513                           
  3514                           ;TRFID.c: 562:                 _status = 1;
  3515   0001F6  0E01               	movlw	1
  3516   0001F8  6E7B               	movwf	MFRC522_ToCard_NOU@_status^0,c
  3517   0001FA  D72E               	goto	l4047
  3518   0001FC                     l4223:
  3519                           
  3520                           ;TRFID.c: 568:             state_aux = (command == 0x0C) ? 22 : 28;
  3521   0001FC  0E0C               	movlw	12
  3522   0001FE  186B               	xorwf	MFRC522_ToCard_NOU@command^0,w,c
  3523   000200  B4D8               	btfsc	status,2,c
  3524   000202  D004               	goto	l4227
  3525   000204  0E00               	movlw	0
  3526   000206  6E66               	movwf	(_MFRC522_ToCard_NOU$1118+1)^0,c
  3527   000208  0E1C               	movlw	28
  3528   00020A  D003               	goto	L9
  3529   00020C                     l4227:
  3530   00020C  0E00               	movlw	0
  3531   00020E  6E66               	movwf	(_MFRC522_ToCard_NOU$1118+1)^0,c
  3532   000210  0E16               	movlw	22
  3533   000212                     L9:
  3534   000212  6E65               	movwf	_MFRC522_ToCard_NOU$1118^0,c
  3535   000214  C065  F030         	movff	_MFRC522_ToCard_NOU$1118,MFRC522_ToCard_NOU@state_aux
  3536                           
  3537                           ;TRFID.c: 569:             break;
  3538   000218  D071               	goto	l4277
  3539   00021A                     l4231:
  3540                           
  3541                           ;TRFID.c: 572:             n = MFRC522_Rd(0x0A);
  3542   00021A  0E0A               	movlw	10
  3543   00021C  EC28  F009         	call	_MFRC522_Rd
  3544   000220                     L6:
  3545   000220  6E32               	movwf	MFRC522_ToCard_NOU@n^0,c
  3546   000222  D71A               	goto	l4047
  3547   000224                     l4235:
  3548                           
  3549                           ;TRFID.c: 577:             lastBits = MFRC522_Rd(0x0C) & 0x07;
  3550   000224  0E0C               	movlw	12
  3551   000226  EC28  F009         	call	_MFRC522_Rd
  3552   00022A  0B07               	andlw	7
  3553   00022C  6E33               	movwf	MFRC522_ToCard_NOU@lastBits^0,c
  3554   00022E  D714               	goto	l4047
  3555   000230                     l4239:
  3556                           
  3557                           ;TRFID.c: 582:             *backLen = (lastBits) ? (n - 1) * 8 + lastBits : n * 8;
  3558   000230  5033               	movf	MFRC522_ToCard_NOU@lastBits^0,w,c
  3559   000232  A4D8               	btfss	status,2,c
  3560   000234  D007               	goto	l4243
  3561   000236  5032               	movf	MFRC522_ToCard_NOU@n^0,w,c
  3562   000238  0D08               	mullw	8
  3563   00023A  CFF3 F067          	movff	prodl,_MFRC522_ToCard_NOU$1119
  3564   00023E  CFF4 F068          	movff	prodh,_MFRC522_ToCard_NOU$1119+1
  3565   000242  D016               	goto	l4245
  3566   000244                     l4243:
  3567   000244  5033               	movf	MFRC522_ToCard_NOU@lastBits^0,w,c
  3568   000246  C032  F05F         	movff	MFRC522_ToCard_NOU@n,??_MFRC522_ToCard_NOU
  3569   00024A  6A60               	clrf	(??_MFRC522_ToCard_NOU+1)^0,c
  3570   00024C  90D8               	bcf	status,0,c
  3571   00024E  365F               	rlcf	??_MFRC522_ToCard_NOU^0,f,c
  3572   000250  3660               	rlcf	(??_MFRC522_ToCard_NOU+1)^0,f,c
  3573   000252  90D8               	bcf	status,0,c
  3574   000254  365F               	rlcf	??_MFRC522_ToCard_NOU^0,f,c
  3575   000256  3660               	rlcf	(??_MFRC522_ToCard_NOU+1)^0,f,c
  3576   000258  90D8               	bcf	status,0,c
  3577   00025A  365F               	rlcf	??_MFRC522_ToCard_NOU^0,f,c
  3578   00025C  3660               	rlcf	(??_MFRC522_ToCard_NOU+1)^0,f,c
  3579   00025E  265F               	addwf	??_MFRC522_ToCard_NOU^0,f,c
  3580   000260  0E00               	movlw	0
  3581   000262  2260               	addwfc	(??_MFRC522_ToCard_NOU+1)^0,f,c
  3582   000264  0EF8               	movlw	248
  3583   000266  245F               	addwf	??_MFRC522_ToCard_NOU^0,w,c
  3584   000268  6E67               	movwf	_MFRC522_ToCard_NOU$1119^0,c
  3585   00026A  0EFF               	movlw	255
  3586   00026C  2060               	addwfc	(??_MFRC522_ToCard_NOU+1)^0,w,c
  3587   00026E  6E68               	movwf	(_MFRC522_ToCard_NOU$1119+1)^0,c
  3588   000270                     l4245:
  3589   000270  505E               	movf	MFRC522_ToCard_NOU@backLen^0,w,c
  3590   000272  6ED9               	movwf	fsr2l,c
  3591   000274  6ADA               	clrf	fsr2h,c
  3592   000276  C067  FFDE         	movff	_MFRC522_ToCard_NOU$1119,postinc2
  3593   00027A  C068  FFDD         	movff	_MFRC522_ToCard_NOU$1119+1,postdec2
  3594                           
  3595                           ;TRFID.c: 583:             if (n == 0) n = 1;
  3596   00027E  5032               	movf	MFRC522_ToCard_NOU@n^0,w,c
  3597   000280  A4D8               	btfss	status,2,c
  3598   000282  D002               	goto	l4251
  3599   000284  0E01               	movlw	1
  3600   000286  D004               	goto	L10
  3601   000288                     l4251:
  3602   000288  0E10               	movlw	16
  3603   00028A  6432               	cpfsgt	MFRC522_ToCard_NOU@n^0,c
  3604   00028C  D723               	goto	l4107
  3605   00028E  0E10               	movlw	16
  3606   000290                     L10:
  3607   000290  6E32               	movwf	MFRC522_ToCard_NOU@n^0,c
  3608   000292  D720               	goto	l4107
  3609   000294                     l4257:
  3610                           
  3611                           ;TRFID.c: 590:             state_aux = (j < n) ? 26 : 28;
  3612   000294  5032               	movf	MFRC522_ToCard_NOU@n^0,w,c
  3613   000296  6E5F               	movwf	??_MFRC522_ToCard_NOU^0,c
  3614   000298  6A60               	clrf	(??_MFRC522_ToCard_NOU+1)^0,c
  3615   00029A  505F               	movf	??_MFRC522_ToCard_NOU^0,w,c
  3616   00029C  5C0B               	subwf	MFRC522_ToCard_NOU@j^0,w,c
  3617   00029E  5060               	movf	(??_MFRC522_ToCard_NOU+1)^0,w,c
  3618   0002A0  580C               	subwfb	(MFRC522_ToCard_NOU@j+1)^0,w,c
  3619   0002A2  A0D8               	btfss	status,0,c
  3620   0002A4  D004               	goto	l4261
  3621   0002A6  0E00               	movlw	0
  3622   0002A8  6E6A               	movwf	(_MFRC522_ToCard_NOU$1120+1)^0,c
  3623   0002AA  0E1C               	movlw	28
  3624   0002AC  D003               	goto	L11
  3625   0002AE                     l4261:
  3626   0002AE  0E00               	movlw	0
  3627   0002B0  6E6A               	movwf	(_MFRC522_ToCard_NOU$1120+1)^0,c
  3628   0002B2  0E1A               	movlw	26
  3629   0002B4                     L11:
  3630   0002B4  6E69               	movwf	_MFRC522_ToCard_NOU$1120^0,c
  3631   0002B6  C069  F030         	movff	_MFRC522_ToCard_NOU$1120,MFRC522_ToCard_NOU@state_aux
  3632                           
  3633                           ;TRFID.c: 591:             if (j >= n) backData[j] = 0;
  3634   0002BA  5032               	movf	MFRC522_ToCard_NOU@n^0,w,c
  3635   0002BC  6E5F               	movwf	??_MFRC522_ToCard_NOU^0,c
  3636   0002BE  6A60               	clrf	(??_MFRC522_ToCard_NOU+1)^0,c
  3637   0002C0  505F               	movf	??_MFRC522_ToCard_NOU^0,w,c
  3638   0002C2  5C0B               	subwf	MFRC522_ToCard_NOU@j^0,w,c
  3639   0002C4  5060               	movf	(??_MFRC522_ToCard_NOU+1)^0,w,c
  3640   0002C6  580C               	subwfb	(MFRC522_ToCard_NOU@j+1)^0,w,c
  3641   0002C8  A0D8               	btfss	status,0,c
  3642   0002CA  D018               	goto	l4277
  3643   0002CC  505D               	movf	MFRC522_ToCard_NOU@backData^0,w,c
  3644   0002CE  240B               	addwf	MFRC522_ToCard_NOU@j^0,w,c
  3645   0002D0  6ED9               	movwf	fsr2l,c
  3646   0002D2  6ADA               	clrf	fsr2h,c
  3647   0002D4  6ADF               	clrf	indf2,c
  3648   0002D6  D012               	goto	l4277
  3649   0002D8                     l4269:
  3650                           
  3651                           ;TRFID.c: 595:             backData[j++] = MFRC522_Rd(0x09);
  3652   0002D8  505D               	movf	MFRC522_ToCard_NOU@backData^0,w,c
  3653   0002DA  240B               	addwf	MFRC522_ToCard_NOU@j^0,w,c
  3654   0002DC  6ED9               	movwf	fsr2l,c
  3655   0002DE  6ADA               	clrf	fsr2h,c
  3656   0002E0  0E09               	movlw	9
  3657   0002E2  EC28  F009         	call	_MFRC522_Rd
  3658   0002E6  6EDF               	movwf	indf2,c
  3659   0002E8  4A0B               	infsnz	MFRC522_ToCard_NOU@j^0,f,c
  3660   0002EA  2A0C               	incf	(MFRC522_ToCard_NOU@j+1)^0,f,c
  3661                           
  3662                           ;TRFID.c: 596:             state_aux = 25;
  3663   0002EC  0E19               	movlw	25
  3664   0002EE                     L8:
  3665   0002EE  6E30               	movwf	MFRC522_ToCard_NOU@state_aux^0,c
  3666                           
  3667                           ;TRFID.c: 597:             break;
  3668   0002F0  D005               	goto	l4277
  3669   0002F2                     l535:
  3670                           
  3671                           ;TRFID.c: 600:             irqEn = waitIRq = tmp = 0;
  3672   0002F2  6A2F               	clrf	MFRC522_ToCard_NOU@tmp^0,c
  3673   0002F4  6A34               	clrf	MFRC522_ToCard_NOU@waitIRq^0,c
  3674   0002F6  6A35               	clrf	MFRC522_ToCard_NOU@irqEn^0,c
  3675                           
  3676                           ;TRFID.c: 601:             state_aux = 0;
  3677   0002F8  6A30               	clrf	MFRC522_ToCard_NOU@state_aux^0,c
  3678                           
  3679                           ;TRFID.c: 602:             state++;
  3680   0002FA  2A44               	incf	_state^0,f,c
  3681   0002FC                     l4277:
  3682                           
  3683                           ;TRFID.c: 603:             return _status;
  3684   0002FC  507B               	movf	MFRC522_ToCard_NOU@_status^0,w,c
  3685   0002FE  0012               	return	
  3686   000300                     l4283:
  3687   000300  5030               	movf	MFRC522_ToCard_NOU@state_aux^0,w,c
  3688                           
  3689                           ; Switch size 1, requested type "simple"
  3690                           ; Number of cases is 28, Range of values is 0 to 28
  3691                           ; switch strategies available:
  3692                           ; Name         Instructions Cycles
  3693                           ; simple_byte           85    43 (average)
  3694                           ;	Chosen strategy is simple_byte
  3695   000302  0A00               	xorlw	0	; case 0
  3696   000304  B4D8               	btfsc	status,2,c
  3697   000306  D6A1               	goto	l4045
  3698   000308  0A01               	xorlw	1	; case 1
  3699   00030A  B4D8               	btfsc	status,2,c
  3700   00030C  D6A7               	goto	l4049
  3701   00030E  0A03               	xorlw	3	; case 2
  3702   000310  B4D8               	btfsc	status,2,c
  3703   000312  D6B4               	goto	l4063
  3704   000314  0A01               	xorlw	1	; case 3
  3705   000316  B4D8               	btfsc	status,2,c
  3706   000318  D6B5               	goto	l4067
  3707   00031A  0A07               	xorlw	7	; case 4
  3708   00031C  B4D8               	btfsc	status,2,c
  3709   00031E  D6BE               	goto	l4081
  3710   000320  0A01               	xorlw	1	; case 5
  3711   000322  B4D8               	btfsc	status,2,c
  3712   000324  D6BF               	goto	l4085
  3713   000326  0A03               	xorlw	3	; case 6
  3714   000328  B4D8               	btfsc	status,2,c
  3715   00032A  D6C9               	goto	l4097
  3716   00032C  0A01               	xorlw	1	; case 7
  3717   00032E  B4D8               	btfsc	status,2,c
  3718   000330  D6D6               	goto	l4111
  3719   000332  0A0F               	xorlw	15	; case 8
  3720   000334  B4D8               	btfsc	status,2,c
  3721   000336  D6EB               	goto	l4127
  3722   000338  0A01               	xorlw	1	; case 9
  3723   00033A  B4D8               	btfsc	status,2,c
  3724   00033C  D6F3               	goto	l4139
  3725   00033E  0A03               	xorlw	3	; case 10
  3726   000340  B4D8               	btfsc	status,2,c
  3727   000342  D6FF               	goto	l4147
  3728   000344  0A01               	xorlw	1	; case 11
  3729   000346  B4D8               	btfsc	status,2,c
  3730   000348  D700               	goto	l4151
  3731   00034A  0A07               	xorlw	7	; case 12
  3732   00034C  B4D8               	btfsc	status,2,c
  3733   00034E  D709               	goto	l493
  3734   000350  0A01               	xorlw	1	; case 13
  3735   000352  B4D8               	btfsc	status,2,c
  3736   000354  D709               	goto	l4165
  3737   000356  0A03               	xorlw	3	; case 14
  3738   000358  B4D8               	btfsc	status,2,c
  3739   00035A  D70A               	goto	l4169
  3740   00035C  0A01               	xorlw	1	; case 15
  3741   00035E  B4D8               	btfsc	status,2,c
  3742   000360  D716               	goto	l4181
  3743   000362  0A1F               	xorlw	31	; case 16
  3744   000364  B4D8               	btfsc	status,2,c
  3745   000366  D718               	goto	l4185
  3746   000368  0A01               	xorlw	1	; case 17
  3747   00036A  B4D8               	btfsc	status,2,c
  3748   00036C  D721               	goto	l4197
  3749   00036E  0A03               	xorlw	3	; case 18
  3750   000370  B4D8               	btfsc	status,2,c
  3751   000372  D72D               	goto	l4205
  3752   000374  0A01               	xorlw	1	; case 19
  3753   000376  B4D8               	btfsc	status,2,c
  3754   000378  D730               	goto	l4209
  3755   00037A  0A07               	xorlw	7	; case 20
  3756   00037C  B4D8               	btfsc	status,2,c
  3757   00037E  D736               	goto	l4217
  3758   000380  0A01               	xorlw	1	; case 21
  3759   000382  B4D8               	btfsc	status,2,c
  3760   000384  D73B               	goto	l4223
  3761   000386  0A03               	xorlw	3	; case 22
  3762   000388  B4D8               	btfsc	status,2,c
  3763   00038A  D747               	goto	l4231
  3764   00038C  0A01               	xorlw	1	; case 23
  3765   00038E  B4D8               	btfsc	status,2,c
  3766   000390  D749               	goto	l4235
  3767   000392  0A0F               	xorlw	15	; case 24
  3768   000394  B4D8               	btfsc	status,2,c
  3769   000396  D74C               	goto	l4239
  3770   000398  0A01               	xorlw	1	; case 25
  3771   00039A  B4D8               	btfsc	status,2,c
  3772   00039C  D77B               	goto	l4257
  3773   00039E  0A03               	xorlw	3	; case 26
  3774   0003A0  B4D8               	btfsc	status,2,c
  3775   0003A2  D79A               	goto	l4269
  3776   0003A4  0A06               	xorlw	6	; case 28
  3777   0003A6  B4D8               	btfsc	status,2,c
  3778   0003A8  D7A4               	goto	l535
  3779   0003AA  D7A8               	goto	l4277
  3780   0003AC                     __end_of_MFRC522_ToCard_NOU:
  3781                           	callstack 0
  3782                           
  3783 ;; *************** function _MFRC522_CRC_NOU *****************
  3784 ;; Defined at:
  3785 ;;		line 119 in file "TRFID.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  dataIn          1   13[COMRAM] PTR unsigned char 
  3788 ;;		 -> motorRFIDcoop_NOU@buff(4), 
  3789 ;;  length          1   14[COMRAM] unsigned char 
  3790 ;;  dataOut         1   15[COMRAM] PTR unsigned char 
  3791 ;;		 -> motorRFIDcoop_NOU@buff(4), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3798 ;; Tracked objects:
  3799 ;;		On entry : 3F/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1
  3803 ;;      Params:         3       0       0
  3804 ;;      Locals:         0       0       0
  3805 ;;      Temps:          0       0       0
  3806 ;;      Totals:         3       0       0
  3807 ;;Total ram usage:        3 bytes
  3808 ;; Hardware stack levels used: 1
  3809 ;; Hardware stack levels required when called: 6
  3810 ;; This function calls:
  3811 ;;		_MFRC522_Clear_Bit
  3812 ;;		_MFRC522_Rd
  3813 ;;		_MFRC522_Set_Bit
  3814 ;;		_MFRC522_Wr_1
  3815 ;;		_MFRC522_Wr_2
  3816 ;; This function is called by:
  3817 ;;		_motorRFIDcoop_NOU
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text3
  3822   000FA8                     __ptext3:
  3823                           	callstack 0
  3824   000FA8                     _MFRC522_CRC_NOU:
  3825                           	callstack 23
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;TRFID.c: 120:     static char step = 1;;TRFID.c: 121:     static char i = 0;;TRFID.c: 1
      +                          22:     static char n;;TRFID.c: 123:     static char wr_state = 0;;TRFID.c: 125:     swi
      +                          tch (step) {
  3829                           
  3830                           ;incstack = 0
  3831   000FA8  D052               	goto	l4035
  3832   000FAA                     l3989:
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;TRFID.c: 127:             MFRC522_Clear_Bit(0x05, 0x04);
  3836   000FAA  0E04               	movlw	4
  3837   000FAC  6E5C               	movwf	MFRC522_Clear_Bit@mask^0,c
  3838   000FAE  0E05               	movlw	5
  3839   000FB0  EC78  F00E         	call	_MFRC522_Clear_Bit
  3840                           
  3841                           ;TRFID.c: 128:             MFRC522_Set_Bit(0x0A, 0x80);
  3842   000FB4  0E80               	movlw	128
  3843   000FB6  6E5C               	movwf	MFRC522_Set_Bit@mask^0,c
  3844   000FB8  0E0A               	movlw	10
  3845   000FBA  EC92  F00E         	call	_MFRC522_Set_Bit
  3846                           
  3847                           ;TRFID.c: 129:             i = 0;
  3848   000FBE  6A3F               	clrf	MFRC522_CRC_NOU@i^0,c
  3849                           
  3850                           ;TRFID.c: 130:             step = 2;
  3851   000FC0  0E02               	movlw	2
  3852   000FC2  6E7D               	movwf	MFRC522_CRC_NOU@step^0,c
  3853                           
  3854                           ;TRFID.c: 131:             break;
  3855   000FC4  0012               	return	
  3856   000FC6                     l3995:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;TRFID.c: 134:             if (i < length) {
  3860   000FC6  5060               	movf	MFRC522_CRC_NOU@length^0,w,c
  3861   000FC8  5C3F               	subwf	MFRC522_CRC_NOU@i^0,w,c
  3862   000FCA  B0D8               	btfsc	status,0,c
  3863   000FCC  D013               	goto	l4009
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;TRFID.c: 135:                 if (wr_state == 0) {
  3867   000FCE  503D               	movf	MFRC522_CRC_NOU@wr_state^0,w,c
  3868   000FD0  A4D8               	btfss	status,2,c
  3869   000FD2  D006               	goto	l4003
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;TRFID.c: 136:                     MFRC522_Wr_1(0x09);
  3873   000FD4  0E09               	movlw	9
  3874   000FD6  ECB8  F00C         	call	_MFRC522_Wr_1
  3875   000FDA                     l4001:
  3876                           
  3877                           ;TRFID.c: 137:                     wr_state = 1;
  3878   000FDA  0E01               	movlw	1
  3879   000FDC  6E3D               	movwf	MFRC522_CRC_NOU@wr_state^0,c
  3880                           
  3881                           ;TRFID.c: 138:                 } else {
  3882   000FDE  0012               	return	
  3883   000FE0                     l4003:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;TRFID.c: 139:                     MFRC522_Wr_2(dataIn[i++]);
  3887   000FE0  505F               	movf	MFRC522_CRC_NOU@dataIn^0,w,c
  3888   000FE2  243F               	addwf	MFRC522_CRC_NOU@i^0,w,c
  3889   000FE4  6ED9               	movwf	fsr2l,c
  3890   000FE6  6ADA               	clrf	fsr2h,c
  3891   000FE8  50DF               	movf	indf2,w,c
  3892   000FEA  EC23  F00D         	call	_MFRC522_Wr_2
  3893   000FEE  2A3F               	incf	MFRC522_CRC_NOU@i^0,f,c
  3894                           
  3895                           ;TRFID.c: 140:                     wr_state = 0;
  3896   000FF0  6A3D               	clrf	MFRC522_CRC_NOU@wr_state^0,c
  3897   000FF2  0012               	return	
  3898   000FF4                     l4009:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;TRFID.c: 143:                 step = 3;
  3902   000FF4  0E03               	movlw	3
  3903   000FF6  6E7D               	movwf	MFRC522_CRC_NOU@step^0,c
  3904   000FF8  0012               	return	
  3905   000FFA                     l4011:
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;TRFID.c: 148:             if (wr_state == 0) {
  3909   000FFA  503D               	movf	MFRC522_CRC_NOU@wr_state^0,w,c
  3910   000FFC  A4D8               	btfss	status,2,c
  3911   000FFE  D004               	goto	l4017
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;TRFID.c: 149:                 MFRC522_Wr_1(0x01);
  3915   001000  0E01               	movlw	1
  3916   001002  ECB8  F00C         	call	_MFRC522_Wr_1
  3917   001006  D7E9               	goto	l4001
  3918   001008                     l4017:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;TRFID.c: 152:                 MFRC522_Wr_2(0x03);
  3922   001008  0E03               	movlw	3
  3923   00100A  EC23  F00D         	call	_MFRC522_Wr_2
  3924                           
  3925                           ;TRFID.c: 153:                 wr_state = 0;
  3926   00100E  6A3D               	clrf	MFRC522_CRC_NOU@wr_state^0,c
  3927                           
  3928                           ;TRFID.c: 154:                 step = 4;
  3929   001010  0E04               	movlw	4
  3930   001012  6E7D               	movwf	MFRC522_CRC_NOU@step^0,c
  3931   001014  0012               	return	
  3932   001016                     l4023:
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;TRFID.c: 159:             n = MFRC522_Rd(0x05);
  3936   001016  0E05               	movlw	5
  3937   001018  EC28  F009         	call	_MFRC522_Rd
  3938   00101C  6E3E               	movwf	MFRC522_CRC_NOU@n^0,c
  3939                           
  3940                           ;TRFID.c: 160:             if (n & 0x04) step = 5;
  3941   00101E  A43E               	btfss	MFRC522_CRC_NOU@n^0,2,c
  3942   001020  0012               	return	
  3943   001022  0E05               	movlw	5
  3944   001024  6E7D               	movwf	MFRC522_CRC_NOU@step^0,c
  3945   001026  0012               	return	
  3946   001028                     l4029:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;TRFID.c: 164:             dataOut[0] = MFRC522_Rd(0x22);
  3950   001028  5061               	movf	MFRC522_CRC_NOU@dataOut^0,w,c
  3951   00102A  6ED9               	movwf	fsr2l,c
  3952   00102C  6ADA               	clrf	fsr2h,c
  3953   00102E  0E22               	movlw	34
  3954   001030  EC28  F009         	call	_MFRC522_Rd
  3955   001034  6EDF               	movwf	indf2,c
  3956                           
  3957                           ;TRFID.c: 165:             dataOut[1] = MFRC522_Rd(0x21);
  3958   001036  5061               	movf	MFRC522_CRC_NOU@dataOut^0,w,c
  3959   001038  6ED9               	movwf	fsr2l,c
  3960   00103A  6ADA               	clrf	fsr2h,c
  3961   00103C  0E01               	movlw	1
  3962   00103E  26D9               	addwf	fsr2l,f,c
  3963   001040  0E21               	movlw	33
  3964   001042  EC28  F009         	call	_MFRC522_Rd
  3965   001046  6EDF               	movwf	indf2,c
  3966                           
  3967                           ;TRFID.c: 166:             step = 1;
  3968   001048  0E01               	movlw	1
  3969   00104A  6E7D               	movwf	MFRC522_CRC_NOU@step^0,c
  3970                           
  3971                           ;TRFID.c: 167:             break;
  3972   00104C  0012               	return	
  3973   00104E                     l4035:
  3974                           
  3975                           ; BSR set to: 0
  3976   00104E  507D               	movf	MFRC522_CRC_NOU@step^0,w,c
  3977                           
  3978                           ; Switch size 1, requested type "simple"
  3979                           ; Number of cases is 5, Range of values is 1 to 5
  3980                           ; switch strategies available:
  3981                           ; Name         Instructions Cycles
  3982                           ; simple_byte           16     9 (average)
  3983                           ;	Chosen strategy is simple_byte
  3984   001050  0A01               	xorlw	1	; case 1
  3985   001052  B4D8               	btfsc	status,2,c
  3986   001054  D7AA               	goto	l3989
  3987   001056  0A03               	xorlw	3	; case 2
  3988   001058  B4D8               	btfsc	status,2,c
  3989   00105A  D7B5               	goto	l3995
  3990   00105C  0A01               	xorlw	1	; case 3
  3991   00105E  B4D8               	btfsc	status,2,c
  3992   001060  D7CC               	goto	l4011
  3993   001062  0A07               	xorlw	7	; case 4
  3994   001064  B4D8               	btfsc	status,2,c
  3995   001066  D7D7               	goto	l4023
  3996   001068  0A01               	xorlw	1	; case 5
  3997   00106A  A4D8               	btfss	status,2,c
  3998   00106C  0012               	return	
  3999   00106E  D7DC               	goto	l4029
  4000   001070                     __end_of_MFRC522_CRC_NOU:
  4001                           	callstack 0
  4002                           
  4003 ;; *************** function _MFRC522_Wr_2 *****************
  4004 ;; Defined at:
  4005 ;;		line 682 in file "TRFID.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  value           1    wreg     unsigned char 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  value           1    6[COMRAM] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1
  4019 ;;      Params:         0       0       0
  4020 ;;      Locals:         1       0       0
  4021 ;;      Temps:          1       0       0
  4022 ;;      Totals:         2       0       0
  4023 ;;Total ram usage:        2 bytes
  4024 ;; Hardware stack levels used: 1
  4025 ;; Hardware stack levels required when called: 4
  4026 ;; This function calls:
  4027 ;;		_delay_us
  4028 ;; This function is called by:
  4029 ;;		_MFRC522_CRC_NOU
  4030 ;;		_MFRC522_ToCard_NOU
  4031 ;;		_motorRFIDcoop_NOU
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text4
  4036   001A46                     __ptext4:
  4037                           	callstack 0
  4038   001A46                     _MFRC522_Wr_2:
  4039                           	callstack 25
  4040                           
  4041                           ;incstack = 0
  4042                           ;MFRC522_Wr_2@value stored from wreg
  4043   001A46  6E58               	movwf	MFRC522_Wr_2@value^0,c
  4044                           
  4045                           ;TRFID.c: 683:     static unsigned char i;;TRFID.c: 685:     for (i = 8; i > 0; i--) {
  4046   001A48  0E08               	movlw	8
  4047   001A4A  6E2B               	movwf	MFRC522_Wr_2@i^0,c
  4048   001A4C                     l3819:
  4049                           
  4050                           ;TRFID.c: 686:         LATDbits.LATD7 = ((value & 0x80) == 0x80);
  4051   001A4C  AE58               	btfss	MFRC522_Wr_2@value^0,7,c
  4052   001A4E  D003               	goto	u2580
  4053   001A50  6A57               	clrf	??_MFRC522_Wr_2^0,c
  4054   001A52  2A57               	incf	??_MFRC522_Wr_2^0,f,c
  4055   001A54  D001               	goto	u2598
  4056   001A56                     u2580:
  4057   001A56  6A57               	clrf	??_MFRC522_Wr_2^0,c
  4058   001A58                     u2598:
  4059   001A58  3257               	rrcf	??_MFRC522_Wr_2^0,f,c
  4060   001A5A  3257               	rrcf	??_MFRC522_Wr_2^0,f,c
  4061   001A5C  508C               	movf	140,w,c	;volatile
  4062   001A5E  1857               	xorwf	??_MFRC522_Wr_2^0,w,c
  4063   001A60  0B7F               	andlw	-129
  4064   001A62  1857               	xorwf	??_MFRC522_Wr_2^0,w,c
  4065   001A64  6E8C               	movwf	140,c	;volatile
  4066                           
  4067                           ;TRFID.c: 687:         LATBbits.LATB0 = 1;
  4068   001A66  808A               	bsf	138,0,c	;volatile
  4069                           
  4070                           ;TRFID.c: 688:         value <<= 1;
  4071   001A68  90D8               	bcf	status,0,c
  4072   001A6A  3658               	rlcf	MFRC522_Wr_2@value^0,f,c
  4073                           
  4074                           ;TRFID.c: 689:         delay_us(3);
  4075   001A6C  0E03               	movlw	3
  4076   001A6E  ECF3  F00D         	call	_delay_us
  4077                           
  4078                           ;TRFID.c: 690:         LATBbits.LATB0 = 0;
  4079   001A72  908A               	bcf	138,0,c	;volatile
  4080                           
  4081                           ;TRFID.c: 691:         delay_us(3);
  4082   001A74  0E03               	movlw	3
  4083   001A76  ECF3  F00D         	call	_delay_us
  4084                           
  4085                           ;TRFID.c: 692:     }
  4086   001A7A  062B               	decf	MFRC522_Wr_2@i^0,f,c
  4087   001A7C  502B               	movf	MFRC522_Wr_2@i^0,w,c
  4088   001A7E  A4D8               	btfss	status,2,c
  4089   001A80  D7E5               	goto	l3819
  4090                           
  4091                           ;TRFID.c: 694:     LATBbits.LATB1 = 1;
  4092   001A82  828A               	bsf	138,1,c	;volatile
  4093                           
  4094                           ;TRFID.c: 695:     LATBbits.LATB0 = 1;
  4095   001A84  808A               	bsf	138,0,c	;volatile
  4096   001A86  0012               	return		;funcret
  4097   001A88                     __end_of_MFRC522_Wr_2:
  4098                           	callstack 0
  4099                           
  4100 ;; *************** function _MFRC522_Wr_1 *****************
  4101 ;; Defined at:
  4102 ;;		line 665 in file "TRFID.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  Address         1    wreg     unsigned char 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  Address         1    6[COMRAM] unsigned char 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1
  4116 ;;      Params:         0       0       0
  4117 ;;      Locals:         1       0       0
  4118 ;;      Temps:          1       0       0
  4119 ;;      Totals:         2       0       0
  4120 ;;Total ram usage:        2 bytes
  4121 ;; Hardware stack levels used: 1
  4122 ;; Hardware stack levels required when called: 4
  4123 ;; This function calls:
  4124 ;;		_delay_us
  4125 ;; This function is called by:
  4126 ;;		_MFRC522_CRC_NOU
  4127 ;;		_MFRC522_ToCard_NOU
  4128 ;;		_motorRFIDcoop_NOU
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text5
  4133   001970                     __ptext5:
  4134                           	callstack 0
  4135   001970                     _MFRC522_Wr_1:
  4136                           	callstack 25
  4137                           
  4138                           ;incstack = 0
  4139                           ;MFRC522_Wr_1@Address stored from wreg
  4140   001970  6E58               	movwf	MFRC522_Wr_1@Address^0,c
  4141                           
  4142                           ;TRFID.c: 666:     static unsigned char i, ucAddr;;TRFID.c: 668:     LATBbits.LATB0 = 0;
  4143   001972  908A               	bcf	138,0,c	;volatile
  4144                           
  4145                           ;TRFID.c: 669:     LATBbits.LATB1 = 0;
  4146   001974  928A               	bcf	138,1,c	;volatile
  4147                           
  4148                           ;TRFID.c: 670:     ucAddr = ((Address << 1) & 0x7E);
  4149   001976  5058               	movf	MFRC522_Wr_1@Address^0,w,c
  4150   001978  2458               	addwf	MFRC522_Wr_1@Address^0,w,c
  4151   00197A  0B7E               	andlw	126
  4152   00197C  6E2C               	movwf	MFRC522_Wr_1@ucAddr^0,c
  4153                           
  4154                           ;TRFID.c: 672:     for (i = 8; i > 0; i--) {
  4155   00197E  0E08               	movlw	8
  4156   001980  6E2D               	movwf	MFRC522_Wr_1@i^0,c
  4157   001982                     l3799:
  4158                           
  4159                           ;TRFID.c: 673:         LATDbits.LATD7 = ((ucAddr & 0x80) == 0x80);
  4160   001982  AE2C               	btfss	MFRC522_Wr_1@ucAddr^0,7,c
  4161   001984  D003               	goto	u2550
  4162   001986  6A57               	clrf	??_MFRC522_Wr_1^0,c
  4163   001988  2A57               	incf	??_MFRC522_Wr_1^0,f,c
  4164   00198A  D001               	goto	u2568
  4165   00198C                     u2550:
  4166   00198C  6A57               	clrf	??_MFRC522_Wr_1^0,c
  4167   00198E                     u2568:
  4168   00198E  3257               	rrcf	??_MFRC522_Wr_1^0,f,c
  4169   001990  3257               	rrcf	??_MFRC522_Wr_1^0,f,c
  4170   001992  508C               	movf	140,w,c	;volatile
  4171   001994  1857               	xorwf	??_MFRC522_Wr_1^0,w,c
  4172   001996  0B7F               	andlw	-129
  4173   001998  1857               	xorwf	??_MFRC522_Wr_1^0,w,c
  4174   00199A  6E8C               	movwf	140,c	;volatile
  4175                           
  4176                           ;TRFID.c: 674:         LATBbits.LATB0 = 1;
  4177   00199C  808A               	bsf	138,0,c	;volatile
  4178                           
  4179                           ;TRFID.c: 675:         ucAddr <<= 1;
  4180   00199E  90D8               	bcf	status,0,c
  4181   0019A0  362C               	rlcf	MFRC522_Wr_1@ucAddr^0,f,c
  4182                           
  4183                           ;TRFID.c: 676:         delay_us(3);
  4184   0019A2  0E03               	movlw	3
  4185   0019A4  ECF3  F00D         	call	_delay_us
  4186                           
  4187                           ;TRFID.c: 677:         LATBbits.LATB0 = 0;
  4188   0019A8  908A               	bcf	138,0,c	;volatile
  4189                           
  4190                           ;TRFID.c: 678:         delay_us(3);
  4191   0019AA  0E03               	movlw	3
  4192   0019AC  ECF3  F00D         	call	_delay_us
  4193                           
  4194                           ;TRFID.c: 679:     }
  4195   0019B0  062D               	decf	MFRC522_Wr_1@i^0,f,c
  4196   0019B2  502D               	movf	MFRC522_Wr_1@i^0,w,c
  4197   0019B4  B4D8               	btfsc	status,2,c
  4198   0019B6  0012               	return	
  4199   0019B8  D7E4               	goto	l3799
  4200   0019BA                     __end_of_MFRC522_Wr_1:
  4201                           	callstack 0
  4202                           
  4203 ;; *************** function _MENU_SaveUID *****************
  4204 ;; Defined at:
  4205 ;;		line 314 in file "TAD_MENU.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  UID             1   26[COMRAM] PTR unsigned char 
  4208 ;;		 -> motorRFIDcoop_NOU@UID(5), motorRFIDcoop@UID(5), 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  i               2   33[COMRAM] int 
  4211 ;;  i               2   31[COMRAM] int 
  4212 ;;  i               2   29[COMRAM] int 
  4213 ;;  i               2   35[COMRAM] int 
  4214 ;;  index           1   37[COMRAM] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1
  4224 ;;      Params:         1       0       0
  4225 ;;      Locals:         9       0       0
  4226 ;;      Temps:          2       0       0
  4227 ;;      Totals:        12       0       0
  4228 ;;Total ram usage:       12 bytes
  4229 ;; Hardware stack levels used: 1
  4230 ;; Hardware stack levels required when called: 7
  4231 ;; This function calls:
  4232 ;;		_LEDS_setIntensitat
  4233 ;;		_LcClear
  4234 ;;		_SIO_SendString
  4235 ;;		_checkUID
  4236 ;;		_mateixaTargeta
  4237 ;;		_printHex
  4238 ;;		_showConfigLeds
  4239 ;;		_showUID
  4240 ;; This function is called by:
  4241 ;;		_motorRFIDcoop_NOU
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text6
  4246   00053C                     __ptext6:
  4247                           	callstack 0
  4248   00053C                     _MENU_SaveUID:
  4249                           	callstack 22
  4250                           
  4251                           ;TAD_MENU.c: 315:     unsigned char index = checkUID(UID);
  4252                           
  4253                           ;incstack = 0
  4254   00053C  C06C  F052         	movff	MENU_SaveUID@UID,checkUID@UID_detectat
  4255   000540  EC8B  F008         	call	_checkUID	;wreg free
  4256   000544  6E77               	movwf	MENU_SaveUID@index^0,c
  4257                           
  4258                           ;TAD_MENU.c: 316:     if (index != 255) {
  4259   000546  2877               	incf	MENU_SaveUID@index^0,w,c
  4260   000548  B4D8               	btfsc	status,2,c
  4261   00054A  D084               	goto	l4351
  4262                           
  4263                           ;TAD_MENU.c: 317:         SIO_SendString("\r\n\r\nTargeta detectada!");
  4264   00054C  0EB2               	movlw	low STR_3
  4265   00054E  6E53               	movwf	SIO_SendString@str^0,c
  4266   000550  0E1F               	movlw	high STR_3
  4267   000552  6E54               	movwf	(SIO_SendString@str+1)^0,c
  4268   000554  ECC0  F00B         	call	_SIO_SendString	;wreg free
  4269                           
  4270                           ;TAD_MENU.c: 319:         if (someone && mateixaTargeta(UID)) {
  4271   000558  5018               	movf	_someone^0,w,c
  4272   00055A  B4D8               	btfsc	status,2,c
  4273   00055C  D011               	goto	l4305
  4274   00055E  C06C  F052         	movff	MENU_SaveUID@UID,mateixaTargeta@UID
  4275   000562  EC93  F00B         	call	_mateixaTargeta	;wreg free
  4276   000566  0900               	iorlw	0
  4277   000568  B4D8               	btfsc	status,2,c
  4278   00056A  D00A               	goto	l4305
  4279                           
  4280                           ;TAD_MENU.c: 320:             someone = 0;
  4281   00056C  6A18               	clrf	_someone^0,c
  4282                           
  4283                           ;TAD_MENU.c: 321:             SIO_SendString("\r\nUsuari surt.");
  4284   00056E  0EC9               	movlw	low STR_4
  4285   000570  6E53               	movwf	SIO_SendString@str^0,c
  4286   000572  0E1F               	movlw	high STR_4
  4287   000574  6E54               	movwf	(SIO_SendString@str+1)^0,c
  4288   000576  ECC0  F00B         	call	_SIO_SendString	;wreg free
  4289                           
  4290                           ;TAD_MENU.c: 322:             LcClear();
  4291   00057A  EC85  F00E         	call	_LcClear	;wreg free
  4292                           
  4293                           ;TAD_MENU.c: 323:         } else {
  4294   00057E  D063               	goto	l4347
  4295   000580                     l4305:
  4296                           
  4297                           ;TAD_MENU.c: 324:             SIO_SendString("\r\nNou usuari.");
  4298   000580  0ED8               	movlw	low STR_5
  4299   000582  6E53               	movwf	SIO_SendString@str^0,c
  4300   000584  0E1F               	movlw	high STR_5
  4301   000586  6E54               	movwf	(SIO_SendString@str+1)^0,c
  4302   000588  ECC0  F00B         	call	_SIO_SendString	;wreg free
  4303                           
  4304                           ;TAD_MENU.c: 325:             for (int i = 0; i < 5; i++) {
  4305   00058C  0E00               	movlw	0
  4306   00058E  6E70               	movwf	(MENU_SaveUID@i+1)^0,c
  4307   000590  0E00               	movlw	0
  4308   000592  6E6F               	movwf	MENU_SaveUID@i^0,c
  4309   000594                     l4313:
  4310                           
  4311                           ;TAD_MENU.c: 326:                 UID_CURRENT[i] = uid_saved[index][i];
  4312   000594  5077               	movf	MENU_SaveUID@index^0,w,c
  4313   000596  0D05               	mullw	5
  4314   000598  0E55               	movlw	low _uid_saved
  4315   00059A  24F3               	addwf	243,w,c
  4316   00059C  6E6D               	movwf	??_MENU_SaveUID^0,c
  4317   00059E  0E1E               	movlw	high _uid_saved
  4318   0005A0  20F4               	addwfc	prodh,w,c
  4319   0005A2  6E6E               	movwf	(??_MENU_SaveUID+1)^0,c
  4320   0005A4  506F               	movf	MENU_SaveUID@i^0,w,c
  4321   0005A6  266D               	addwf	??_MENU_SaveUID^0,f,c
  4322   0005A8  5070               	movf	(MENU_SaveUID@i+1)^0,w,c
  4323   0005AA  226E               	addwfc	(??_MENU_SaveUID+1)^0,f,c
  4324   0005AC  C06D  FFF6         	movff	??_MENU_SaveUID,tblptrl
  4325   0005B0  C06E  FFF7         	movff	??_MENU_SaveUID+1,tblptrh
  4326   0005B4                     	if	0	;tblptru may be non-zero
  4327   0005B4                     	endif
  4328   0005B4                     	if	0	;tblptru may be non-zero
  4329   0005B4                     	endif
  4330   0005B4  506F               	movf	MENU_SaveUID@i^0,w,c
  4331   0005B6  0FC1               	addlw	low _UID_CURRENT
  4332   0005B8  6ED9               	movwf	fsr2l,c
  4333   0005BA  6ADA               	clrf	fsr2h,c
  4334   0005BC  0008               	tblrd		*
  4335   0005BE  CFF5 FFDF          	movff	tablat,indf2
  4336                           
  4337                           ;TAD_MENU.c: 327:             }
  4338   0005C2  4A6F               	infsnz	MENU_SaveUID@i^0,f,c
  4339   0005C4  2A70               	incf	(MENU_SaveUID@i+1)^0,f,c
  4340   0005C6  BE70               	btfsc	(MENU_SaveUID@i+1)^0,7,c
  4341   0005C8  D7E5               	goto	l4313
  4342   0005CA  5070               	movf	(MENU_SaveUID@i+1)^0,w,c
  4343   0005CC  E104               	bnz	u3040
  4344   0005CE  0E05               	movlw	5
  4345   0005D0  5C6F               	subwf	MENU_SaveUID@i^0,w,c
  4346   0005D2  A0D8               	btfss	status,0,c
  4347   0005D4  D7DF               	goto	l4313
  4348   0005D6                     u3040:
  4349                           
  4350                           ;TAD_MENU.c: 328:             for (int i = 0; i < 6; i++) {
  4351   0005D6  0E00               	movlw	0
  4352   0005D8  6E72               	movwf	(MENU_SaveUID@i_1768+1)^0,c
  4353   0005DA  0E00               	movlw	0
  4354   0005DC  6E71               	movwf	MENU_SaveUID@i_1768^0,c
  4355   0005DE                     l4325:
  4356                           
  4357                           ;TAD_MENU.c: 329:                 LEDS_CURRENT[i] = leds_saved[index][i];
  4358   0005DE  5077               	movf	MENU_SaveUID@index^0,w,c
  4359   0005E0  0D06               	mullw	6
  4360   0005E2  50F3               	movf	243,w,c
  4361   0005E4  0FDC               	addlw	low _leds_saved@TAD_MENU$F1708
  4362   0005E6  2471               	addwf	MENU_SaveUID@i_1768^0,w,c
  4363   0005E8  6ED9               	movwf	fsr2l,c
  4364   0005EA  6ADA               	clrf	fsr2h,c
  4365   0005EC  5071               	movf	MENU_SaveUID@i_1768^0,w,c
  4366   0005EE  0F01               	addlw	low _LEDS_CURRENT
  4367   0005F0  6EE1               	movwf	fsr1l,c
  4368   0005F2  6AE2               	clrf	fsr1h,c
  4369   0005F4  CFDF FFE7          	movff	indf2,indf1
  4370                           
  4371                           ;TAD_MENU.c: 330:             }
  4372   0005F8  4A71               	infsnz	MENU_SaveUID@i_1768^0,f,c
  4373   0005FA  2A72               	incf	(MENU_SaveUID@i_1768+1)^0,f,c
  4374   0005FC  BE72               	btfsc	(MENU_SaveUID@i_1768+1)^0,7,c
  4375   0005FE  D7EF               	goto	l4325
  4376   000600  5072               	movf	(MENU_SaveUID@i_1768+1)^0,w,c
  4377   000602  E104               	bnz	u3050
  4378   000604  0E06               	movlw	6
  4379   000606  5C71               	subwf	MENU_SaveUID@i_1768^0,w,c
  4380   000608  A0D8               	btfss	status,0,c
  4381   00060A  D7E9               	goto	l4325
  4382   00060C                     u3050:
  4383                           
  4384                           ;TAD_MENU.c: 331:             someone = 1;
  4385   00060C  0E01               	movlw	1
  4386   00060E  6E18               	movwf	_someone^0,c
  4387                           
  4388                           ;TAD_MENU.c: 332:             INDEX_CURRENT = index;
  4389   000610  C077  F013         	movff	MENU_SaveUID@index,_INDEX_CURRENT
  4390                           
  4391                           ;TAD_MENU.c: 334:             for (int i = 0; i < 6; i++) {
  4392   000614  0E00               	movlw	0
  4393   000616  6E74               	movwf	(MENU_SaveUID@i_1769+1)^0,c
  4394   000618  0E00               	movlw	0
  4395   00061A  6E73               	movwf	MENU_SaveUID@i_1769^0,c
  4396   00061C                     l4339:
  4397                           
  4398                           ;TAD_MENU.c: 335:                 LEDS_setIntensitat((char) i, LEDS_CURRENT[i]);
  4399   00061C  5073               	movf	MENU_SaveUID@i_1769^0,w,c
  4400   00061E  0F01               	addlw	low _LEDS_CURRENT
  4401   000620  6ED9               	movwf	fsr2l,c
  4402   000622  6ADA               	clrf	fsr2h,c
  4403   000624  50DF               	movf	indf2,w,c
  4404   000626  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  4405   000628  5073               	movf	MENU_SaveUID@i_1769^0,w,c
  4406   00062A  ECD9  F00E         	call	_LEDS_setIntensitat
  4407                           
  4408                           ;TAD_MENU.c: 336:             }
  4409   00062E  4A73               	infsnz	MENU_SaveUID@i_1769^0,f,c
  4410   000630  2A74               	incf	(MENU_SaveUID@i_1769+1)^0,f,c
  4411   000632  BE74               	btfsc	(MENU_SaveUID@i_1769+1)^0,7,c
  4412   000634  D7F3               	goto	l4339
  4413   000636  5074               	movf	(MENU_SaveUID@i_1769+1)^0,w,c
  4414   000638  E104               	bnz	u3060
  4415   00063A  0E06               	movlw	6
  4416   00063C  5C73               	subwf	MENU_SaveUID@i_1769^0,w,c
  4417   00063E  A0D8               	btfss	status,0,c
  4418   000640  D7ED               	goto	l4339
  4419   000642                     u3060:
  4420                           
  4421                           ;TAD_MENU.c: 338:             actualitzar_lcd = 1;
  4422   000642  0E01               	movlw	1
  4423   000644  6E17               	movwf	_actualitzar_lcd^0,c
  4424   000646                     l4347:
  4425                           
  4426                           ;TAD_MENU.c: 341:         showUID(INDEX_CURRENT);
  4427   000646  5013               	movf	_INDEX_CURRENT^0,w,c
  4428   000648  ECFD  F006         	call	_showUID
  4429                           
  4430                           ;TAD_MENU.c: 342:         showConfigLeds(INDEX_CURRENT);
  4431   00064C  5013               	movf	_INDEX_CURRENT^0,w,c
  4432   00064E  EC38  F008         	call	_showConfigLeds
  4433                           
  4434                           ;TAD_MENU.c: 343:     } else {
  4435   000652  D029               	goto	u3080
  4436   000654                     l4351:
  4437                           
  4438                           ;TAD_MENU.c: 344:         SIO_SendString("\r\n\r\nTargeta NO reconeguda!\r\n\tUID: ");
  4439   000654  0E8F               	movlw	low STR_6
  4440   000656  6E53               	movwf	SIO_SendString@str^0,c
  4441   000658  0E1F               	movlw	high STR_6
  4442   00065A  6E54               	movwf	(SIO_SendString@str+1)^0,c
  4443   00065C  ECC0  F00B         	call	_SIO_SendString	;wreg free
  4444                           
  4445                           ;TAD_MENU.c: 346:         for (int i = 0; i < 5; i++) {
  4446   000660  0E00               	movlw	0
  4447   000662  6E76               	movwf	(MENU_SaveUID@i_1771+1)^0,c
  4448   000664  0E00               	movlw	0
  4449   000666  6E75               	movwf	MENU_SaveUID@i_1771^0,c
  4450   000668                     l4359:
  4451                           
  4452                           ;TAD_MENU.c: 347:             printHex(UID[i]);
  4453   000668  506C               	movf	MENU_SaveUID@UID^0,w,c
  4454   00066A  2475               	addwf	MENU_SaveUID@i_1771^0,w,c
  4455   00066C  6ED9               	movwf	fsr2l,c
  4456   00066E  6ADA               	clrf	fsr2h,c
  4457   000670  50DF               	movf	indf2,w,c
  4458   000672  EC18  F00C         	call	_printHex
  4459                           
  4460                           ;TAD_MENU.c: 348:             if (i < 5 - 1) SIO_SendString("-");
  4461   000676  BE76               	btfsc	(MENU_SaveUID@i_1771+1)^0,7,c
  4462   000678  D006               	goto	u3070
  4463   00067A  5076               	movf	(MENU_SaveUID@i_1771+1)^0,w,c
  4464   00067C  E10A               	bnz	l4365
  4465   00067E  0E04               	movlw	4
  4466   000680  5C75               	subwf	MENU_SaveUID@i_1771^0,w,c
  4467   000682  B0D8               	btfsc	status,0,c
  4468   000684  D006               	goto	l4365
  4469   000686                     u3070:
  4470   000686  0EFD               	movlw	low STR_7
  4471   000688  6E53               	movwf	SIO_SendString@str^0,c
  4472   00068A  0E1F               	movlw	high STR_7
  4473   00068C  6E54               	movwf	(SIO_SendString@str+1)^0,c
  4474   00068E  ECC0  F00B         	call	_SIO_SendString	;wreg free
  4475   000692                     l4365:
  4476                           
  4477                           ;TAD_MENU.c: 349:         }
  4478   000692  4A75               	infsnz	MENU_SaveUID@i_1771^0,f,c
  4479   000694  2A76               	incf	(MENU_SaveUID@i_1771+1)^0,f,c
  4480   000696  BE76               	btfsc	(MENU_SaveUID@i_1771+1)^0,7,c
  4481   000698  D7E7               	goto	l4359
  4482   00069A  5076               	movf	(MENU_SaveUID@i_1771+1)^0,w,c
  4483   00069C  E104               	bnz	u3080
  4484   00069E  0E05               	movlw	5
  4485   0006A0  5C75               	subwf	MENU_SaveUID@i_1771^0,w,c
  4486   0006A2  A0D8               	btfss	status,0,c
  4487   0006A4  D7E1               	goto	l4359
  4488   0006A6                     u3080:
  4489                           
  4490                           ;TAD_MENU.c: 351:     SIO_SendString("\r\n\r\nOpció: ");
  4491   0006A6  0EE6               	movlw	low STR_2
  4492   0006A8  6E53               	movwf	SIO_SendString@str^0,c
  4493   0006AA  0E1F               	movlw	high STR_2
  4494   0006AC  6E54               	movwf	(SIO_SendString@str+1)^0,c
  4495   0006AE  ECC0  F00B         	call	_SIO_SendString	;wreg free
  4496   0006B2  0012               	return		;funcret
  4497   0006B4                     __end_of_MENU_SaveUID:
  4498                           	callstack 0
  4499                           
  4500 ;; *************** function _mateixaTargeta *****************
  4501 ;; Defined at:
  4502 ;;		line 419 in file "TAD_MENU.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  UID             1    0[COMRAM] PTR unsigned char 
  4505 ;;		 -> motorRFIDcoop_NOU@UID(5), motorRFIDcoop@UID(5), 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  i               2    4[COMRAM] int 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      unsigned char 
  4510 ;; Registers used:
  4511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1
  4517 ;;      Params:         1       0       0
  4518 ;;      Locals:         2       0       0
  4519 ;;      Temps:          3       0       0
  4520 ;;      Totals:         6       0       0
  4521 ;;Total ram usage:        6 bytes
  4522 ;; Hardware stack levels used: 1
  4523 ;; Hardware stack levels required when called: 3
  4524 ;; This function calls:
  4525 ;;		Nothing
  4526 ;; This function is called by:
  4527 ;;		_MENU_SaveUID
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text7
  4532   001726                     __ptext7:
  4533                           	callstack 0
  4534   001726                     _mateixaTargeta:
  4535                           	callstack 25
  4536                           
  4537                           ;TAD_MENU.c: 420:     for (int i = 0; i < 5; i++) {
  4538                           
  4539                           ;incstack = 0
  4540   001726  0E00               	movlw	0
  4541   001728  6E57               	movwf	(mateixaTargeta@i+1)^0,c
  4542   00172A  0E00               	movlw	0
  4543   00172C  6E56               	movwf	mateixaTargeta@i^0,c
  4544   00172E                     l3927:
  4545                           
  4546                           ;TAD_MENU.c: 421:         if (UID[i] != uid_saved[INDEX_CURRENT][i]) {
  4547   00172E  5052               	movf	mateixaTargeta@UID^0,w,c
  4548   001730  2456               	addwf	mateixaTargeta@i^0,w,c
  4549   001732  6ED9               	movwf	fsr2l,c
  4550   001734  6ADA               	clrf	fsr2h,c
  4551   001736  50DF               	movf	indf2,w,c
  4552   001738  6E53               	movwf	??_mateixaTargeta^0,c
  4553   00173A  5013               	movf	_INDEX_CURRENT^0,w,c
  4554   00173C  0D05               	mullw	5
  4555   00173E  0E55               	movlw	low _uid_saved
  4556   001740  24F3               	addwf	243,w,c
  4557   001742  6E54               	movwf	(??_mateixaTargeta+1)^0,c
  4558   001744  0E1E               	movlw	high _uid_saved
  4559   001746  20F4               	addwfc	prodh,w,c
  4560   001748  6E55               	movwf	(??_mateixaTargeta+2)^0,c
  4561   00174A  5056               	movf	mateixaTargeta@i^0,w,c
  4562   00174C  2654               	addwf	(??_mateixaTargeta+1)^0,f,c
  4563   00174E  5057               	movf	(mateixaTargeta@i+1)^0,w,c
  4564   001750  2255               	addwfc	(??_mateixaTargeta+2)^0,f,c
  4565   001752  C054  FFF6         	movff	??_mateixaTargeta+1,tblptrl
  4566   001756  C055  FFF7         	movff	??_mateixaTargeta+2,tblptrh
  4567   00175A                     	if	0	;tblptru may be non-zero
  4568   00175A                     	endif
  4569   00175A                     	if	0	;tblptru may be non-zero
  4570   00175A                     	endif
  4571   00175A  0008               	tblrd		*
  4572   00175C  50F5               	movf	tablat,w,c
  4573   00175E  1853               	xorwf	??_mateixaTargeta^0,w,c
  4574   001760  B4D8               	btfsc	status,2,c
  4575   001762  D002               	goto	l3933
  4576                           
  4577                           ;TAD_MENU.c: 422:             return 0;
  4578   001764  0E00               	movlw	0
  4579   001766  0012               	return	
  4580   001768                     l3933:
  4581                           
  4582                           ;TAD_MENU.c: 424:     }
  4583   001768  4A56               	infsnz	mateixaTargeta@i^0,f,c
  4584   00176A  2A57               	incf	(mateixaTargeta@i+1)^0,f,c
  4585   00176C  BE57               	btfsc	(mateixaTargeta@i+1)^0,7,c
  4586   00176E  D7DF               	goto	l3927
  4587   001770  5057               	movf	(mateixaTargeta@i+1)^0,w,c
  4588   001772  E104               	bnz	u2690
  4589   001774  0E05               	movlw	5
  4590   001776  5C56               	subwf	mateixaTargeta@i^0,w,c
  4591   001778  A0D8               	btfss	status,0,c
  4592   00177A  D7D9               	goto	l3927
  4593   00177C                     u2690:
  4594                           
  4595                           ;TAD_MENU.c: 425:     return 1;
  4596   00177C  0E01               	movlw	1
  4597   00177E  0012               	return		;funcret
  4598   001780                     __end_of_mateixaTargeta:
  4599                           	callstack 0
  4600                           
  4601 ;; *************** function _checkUID *****************
  4602 ;; Defined at:
  4603 ;;		line 365 in file "TAD_MENU.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  UID_detectat    1    0[COMRAM] PTR unsigned char 
  4606 ;;		 -> motorRFIDcoop_NOU@UID(5), motorRFIDcoop@UID(5), 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  j               2   10[COMRAM] int 
  4609 ;;  match           2    6[COMRAM] int 
  4610 ;;  i               2    8[COMRAM] int 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      unsigned char 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1
  4620 ;;      Params:         1       0       0
  4621 ;;      Locals:         6       0       0
  4622 ;;      Temps:          5       0       0
  4623 ;;      Totals:        12       0       0
  4624 ;;Total ram usage:       12 bytes
  4625 ;; Hardware stack levels used: 1
  4626 ;; Hardware stack levels required when called: 3
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_MENU_SaveUID
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text8
  4635   001116                     __ptext8:
  4636                           	callstack 0
  4637   001116                     _checkUID:
  4638                           	callstack 25
  4639                           
  4640                           ;TAD_MENU.c: 366:     for (int i = 0; i < 6; i++) {
  4641                           
  4642                           ;incstack = 0
  4643   001116  0E00               	movlw	0
  4644   001118  6E5B               	movwf	(checkUID@i+1)^0,c
  4645   00111A  0E00               	movlw	0
  4646   00111C  6E5A               	movwf	checkUID@i^0,c
  4647   00111E                     l3893:
  4648                           
  4649                           ;TAD_MENU.c: 367:         int match = 1;
  4650   00111E  0E00               	movlw	0
  4651   001120  6E59               	movwf	(checkUID@match+1)^0,c
  4652   001122  0E01               	movlw	1
  4653   001124  6E58               	movwf	checkUID@match^0,c
  4654                           
  4655                           ;TAD_MENU.c: 368:         for (int j = 0; j < 5; j++) {
  4656   001126  0E00               	movlw	0
  4657   001128  6E5D               	movwf	(checkUID@j+1)^0,c
  4658   00112A  0E00               	movlw	0
  4659   00112C  6E5C               	movwf	checkUID@j^0,c
  4660   00112E                     l3899:
  4661                           
  4662                           ;TAD_MENU.c: 369:             if (UID_detectat[j] != uid_saved[i][j]) {
  4663   00112E  5052               	movf	checkUID@UID_detectat^0,w,c
  4664   001130  245C               	addwf	checkUID@j^0,w,c
  4665   001132  6ED9               	movwf	fsr2l,c
  4666   001134  6ADA               	clrf	fsr2h,c
  4667   001136  50DF               	movf	indf2,w,c
  4668   001138  6E53               	movwf	??_checkUID^0,c
  4669   00113A  0E05               	movlw	5
  4670   00113C  025A               	mulwf	checkUID@i^0,c
  4671   00113E  CFF3 F054          	movff	prodl,??_checkUID+1
  4672   001142  CFF4 F055          	movff	prodh,??_checkUID+2
  4673   001146  025B               	mulwf	(checkUID@i+1)^0,c
  4674   001148  50F3               	movf	prodl,w,c
  4675   00114A  2655               	addwf	(??_checkUID+2)^0,f,c
  4676   00114C  0E55               	movlw	low _uid_saved
  4677   00114E  2454               	addwf	(??_checkUID+1)^0,w,c
  4678   001150  6E56               	movwf	(??_checkUID+3)^0,c
  4679   001152  0E1E               	movlw	high _uid_saved
  4680   001154  2055               	addwfc	(??_checkUID+2)^0,w,c
  4681   001156  6E57               	movwf	(??_checkUID+4)^0,c
  4682   001158  505C               	movf	checkUID@j^0,w,c
  4683   00115A  2656               	addwf	(??_checkUID+3)^0,f,c
  4684   00115C  505D               	movf	(checkUID@j+1)^0,w,c
  4685   00115E  2257               	addwfc	(??_checkUID+4)^0,f,c
  4686   001160  C056  FFF6         	movff	??_checkUID+3,tblptrl
  4687   001164  C057  FFF7         	movff	??_checkUID+4,tblptrh
  4688   001168                     	if	0	;tblptru may be non-zero
  4689   001168                     	endif
  4690   001168                     	if	0	;tblptru may be non-zero
  4691   001168                     	endif
  4692   001168  0008               	tblrd		*
  4693   00116A  50F5               	movf	tablat,w,c
  4694   00116C  1853               	xorwf	??_checkUID^0,w,c
  4695   00116E  B4D8               	btfsc	status,2,c
  4696   001170  D005               	goto	l3903
  4697                           
  4698                           ;TAD_MENU.c: 370:                 match = 0;
  4699   001172  0E00               	movlw	0
  4700   001174  6E59               	movwf	(checkUID@match+1)^0,c
  4701   001176  0E00               	movlw	0
  4702   001178  6E58               	movwf	checkUID@match^0,c
  4703                           
  4704                           ;TAD_MENU.c: 371:                 break;
  4705   00117A  D00A               	goto	u2650
  4706   00117C                     l3903:
  4707                           
  4708                           ;TAD_MENU.c: 373:         }
  4709   00117C  4A5C               	infsnz	checkUID@j^0,f,c
  4710   00117E  2A5D               	incf	(checkUID@j+1)^0,f,c
  4711   001180  BE5D               	btfsc	(checkUID@j+1)^0,7,c
  4712   001182  D7D5               	goto	l3899
  4713   001184  505D               	movf	(checkUID@j+1)^0,w,c
  4714   001186  E104               	bnz	u2650
  4715   001188  0E05               	movlw	5
  4716   00118A  5C5C               	subwf	checkUID@j^0,w,c
  4717   00118C  A0D8               	btfss	status,0,c
  4718   00118E  D7CF               	goto	l3899
  4719   001190                     u2650:
  4720                           
  4721                           ;TAD_MENU.c: 375:         if (match) {
  4722   001190  5058               	movf	checkUID@match^0,w,c
  4723   001192  1059               	iorwf	(checkUID@match+1)^0,w,c
  4724   001194  B4D8               	btfsc	status,2,c
  4725   001196  D002               	goto	l3913
  4726                           
  4727                           ;TAD_MENU.c: 376:             return (char) i;
  4728   001198  505A               	movf	checkUID@i^0,w,c
  4729   00119A  0012               	return	
  4730   00119C                     l3913:
  4731                           
  4732                           ;TAD_MENU.c: 378:     }
  4733   00119C  4A5A               	infsnz	checkUID@i^0,f,c
  4734   00119E  2A5B               	incf	(checkUID@i+1)^0,f,c
  4735   0011A0  BE5B               	btfsc	(checkUID@i+1)^0,7,c
  4736   0011A2  D7BD               	goto	l3893
  4737   0011A4  505B               	movf	(checkUID@i+1)^0,w,c
  4738   0011A6  E104               	bnz	u2670
  4739   0011A8  0E06               	movlw	6
  4740   0011AA  5C5A               	subwf	checkUID@i^0,w,c
  4741   0011AC  A0D8               	btfss	status,0,c
  4742   0011AE  D7B7               	goto	l3893
  4743   0011B0                     u2670:
  4744                           
  4745                           ;TAD_MENU.c: 379:     return 255;
  4746   0011B0  0EFF               	movlw	255
  4747   0011B2  0012               	return		;funcret
  4748   0011B4                     __end_of_checkUID:
  4749                           	callstack 0
  4750                           
  4751 ;; *************** function _TM_Motor *****************
  4752 ;; Defined at:
  4753 ;;		line 24 in file "TAD_TECLATMATRIU.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;		None
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;		None
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1
  4767 ;;      Params:         0       0       0
  4768 ;;      Locals:         0       0       0
  4769 ;;      Temps:          2       0       0
  4770 ;;      Totals:         2       0       0
  4771 ;;Total ram usage:        2 bytes
  4772 ;; Hardware stack levels used: 1
  4773 ;; Hardware stack levels required when called: 4
  4774 ;; This function calls:
  4775 ;;		_TI_GetTics
  4776 ;;		_TI_ResetTics
  4777 ;;		_TM_IsKeyPressed
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text9
  4784   000948                     __ptext9:
  4785                           	callstack 0
  4786   000948                     _TM_Motor:
  4787                           	callstack 26
  4788                           
  4789                           ;TAD_TECLATMATRIU.c: 25:     switch(state) {
  4790                           
  4791                           ;incstack = 0
  4792   000948  D072               	goto	l4923
  4793   00094A                     l683:
  4794                           
  4795                           ;TAD_TECLATMATRIU.c: 27:             LATDbits.LATD4 = LATCbits.LATC5 = LATDbits.LATD3 = 
      +                          0;
  4796   00094A  968C               	bcf	140,3,c	;volatile
  4797   00094C  9A8B               	bcf	139,5,c	;volatile
  4798   00094E  988C               	bcf	140,4,c	;volatile
  4799                           
  4800                           ;TAD_TECLATMATRIU.c: 28:             LATDbits.LATD0 = 1;
  4801   000950  808C               	bsf	140,0,c	;volatile
  4802                           
  4803                           ;TAD_TECLATMATRIU.c: 29:             row_selected = 0;
  4804   000952  6A26               	clrf	_row_selected^0,c
  4805   000954                     l4869:
  4806                           
  4807                           ;TAD_TECLATMATRIU.c: 30:             state = 4;
  4808   000954  0E04               	movlw	4
  4809   000956  6E29               	movwf	_state@TAD_TECLATMATRIU$F1368^0,c
  4810                           
  4811                           ;TAD_TECLATMATRIU.c: 31:             break;
  4812   000958  0012               	return	
  4813   00095A                     l685:
  4814                           
  4815                           ;TAD_TECLATMATRIU.c: 34:             LATDbits.LATD0 = LATCbits.LATC5 = LATDbits.LATD3 = 
      +                          0;
  4816   00095A  968C               	bcf	140,3,c	;volatile
  4817   00095C  9A8B               	bcf	139,5,c	;volatile
  4818   00095E  908C               	bcf	140,0,c	;volatile
  4819                           
  4820                           ;TAD_TECLATMATRIU.c: 35:             LATDbits.LATD4 = 1;
  4821   000960  888C               	bsf	140,4,c	;volatile
  4822                           
  4823                           ;TAD_TECLATMATRIU.c: 36:             row_selected = 1;
  4824   000962  0E01               	movlw	1
  4825   000964  6E26               	movwf	_row_selected^0,c
  4826                           
  4827                           ;TAD_TECLATMATRIU.c: 37:             state = 4;
  4828   000966  0E04               	movlw	4
  4829   000968  6E29               	movwf	_state@TAD_TECLATMATRIU$F1368^0,c
  4830                           
  4831                           ;TAD_TECLATMATRIU.c: 38:             break;
  4832   00096A  0012               	return	
  4833   00096C                     l686:
  4834                           
  4835                           ;TAD_TECLATMATRIU.c: 41:             LATDbits.LATD0 = LATDbits.LATD4 = LATDbits.LATD3 = 
      +                          0;
  4836   00096C  968C               	bcf	140,3,c	;volatile
  4837   00096E  988C               	bcf	140,4,c	;volatile
  4838   000970  908C               	bcf	140,0,c	;volatile
  4839                           
  4840                           ;TAD_TECLATMATRIU.c: 42:             LATCbits.LATC5 = 1;
  4841   000972  8A8B               	bsf	139,5,c	;volatile
  4842                           
  4843                           ;TAD_TECLATMATRIU.c: 43:             row_selected = 2;
  4844   000974  0E02               	movlw	2
  4845   000976  6E26               	movwf	_row_selected^0,c
  4846                           
  4847                           ;TAD_TECLATMATRIU.c: 44:             state = 4;
  4848   000978  0E04               	movlw	4
  4849   00097A  6E29               	movwf	_state@TAD_TECLATMATRIU$F1368^0,c
  4850                           
  4851                           ;TAD_TECLATMATRIU.c: 45:             break;
  4852   00097C  0012               	return	
  4853   00097E                     l687:
  4854                           
  4855                           ;TAD_TECLATMATRIU.c: 48:             LATDbits.LATD0 = LATDbits.LATD4 = LATCbits.LATC5 = 
      +                          0;
  4856   00097E  9A8B               	bcf	139,5,c	;volatile
  4857   000980  988C               	bcf	140,4,c	;volatile
  4858   000982  908C               	bcf	140,0,c	;volatile
  4859                           
  4860                           ;TAD_TECLATMATRIU.c: 49:             LATDbits.LATD3 = 1;
  4861   000984  868C               	bsf	140,3,c	;volatile
  4862                           
  4863                           ;TAD_TECLATMATRIU.c: 50:             row_selected = 3;
  4864   000986  0E03               	movlw	3
  4865   000988  6E26               	movwf	_row_selected^0,c
  4866                           
  4867                           ;TAD_TECLATMATRIU.c: 51:             state = 4;
  4868   00098A  0E04               	movlw	4
  4869   00098C  6E29               	movwf	_state@TAD_TECLATMATRIU$F1368^0,c
  4870                           
  4871                           ;TAD_TECLATMATRIU.c: 52:             break;
  4872   00098E  0012               	return	
  4873   000990                     l688:
  4874                           
  4875                           ;TAD_TECLATMATRIU.c: 55:         if (PORTDbits.RD2 || PORTDbits.RD1 || PORTCbits.RC4) {
  4876   000990  A483               	btfss	131,2,c	;volatile
  4877   000992  B283               	btfsc	131,1,c	;volatile
  4878   000994  D002               	goto	u3700
  4879   000996  A882               	btfss	130,4,c	;volatile
  4880   000998  D005               	goto	l4885
  4881   00099A                     u3700:
  4882                           
  4883                           ;TAD_TECLATMATRIU.c: 56:             TI_ResetTics(TimerRebots);
  4884   00099A  5050               	movf	_TimerRebots^0,w,c
  4885   00099C  EC66  F00E         	call	_TI_ResetTics
  4886   0009A0                     l4883:
  4887                           
  4888                           ;TAD_TECLATMATRIU.c: 57:             state++;
  4889   0009A0  2A29               	incf	_state@TAD_TECLATMATRIU$F1368^0,f,c
  4890                           
  4891                           ;TAD_TECLATMATRIU.c: 58:         } else {
  4892   0009A2  0012               	return	
  4893   0009A4                     l4885:
  4894                           
  4895                           ;TAD_TECLATMATRIU.c: 59:             index_row++;
  4896   0009A4  2A24               	incf	_index_row^0,f,c
  4897                           
  4898                           ;TAD_TECLATMATRIU.c: 60:             if (index_row >= 4) {
  4899   0009A6  0E03               	movlw	3
  4900   0009A8  6424               	cpfsgt	_index_row^0,c
  4901   0009AA  D001               	goto	l693
  4902                           
  4903                           ;TAD_TECLATMATRIU.c: 61:                 index_row = 0;
  4904   0009AC  6A24               	clrf	_index_row^0,c
  4905   0009AE                     l693:
  4906                           
  4907                           ;TAD_TECLATMATRIU.c: 63:             state = index_row;
  4908   0009AE  C024  F029         	movff	_index_row,_state@TAD_TECLATMATRIU$F1368
  4909   0009B2  0012               	return	
  4910   0009B4                     l4891:
  4911   0009B4  5050               	movf	_TimerRebots^0,w,c
  4912   0009B6  EC92  F00C         	call	_TI_GetTics
  4913   0009BA  5055               	movf	(?_TI_GetTics+3)^0,w,c
  4914   0009BC  1054               	iorwf	(?_TI_GetTics+2)^0,w,c
  4915   0009BE  1053               	iorwf	(?_TI_GetTics+1)^0,w,c
  4916   0009C0  E104               	bnz	u3720
  4917   0009C2  0E0A               	movlw	10
  4918   0009C4  5C52               	subwf	?_TI_GetTics^0,w,c
  4919   0009C6  A0D8               	btfss	status,0,c
  4920   0009C8  0012               	return	
  4921   0009CA                     u3720:
  4922                           
  4923                           ;TAD_TECLATMATRIU.c: 71:                 if (PORTDbits.RD2 || PORTDbits.RD1 || PORTCbits
      +                          .RC4) {
  4924   0009CA  A483               	btfss	131,2,c	;volatile
  4925   0009CC  B283               	btfsc	131,1,c	;volatile
  4926   0009CE  D7E8               	goto	l4883
  4927   0009D0  B882               	btfsc	130,4,c	;volatile
  4928   0009D2  D7E6               	goto	l4883
  4929                           
  4930                           ;TAD_TECLATMATRIU.c: 74:                     state--;
  4931   0009D4  0629               	decf	_state@TAD_TECLATMATRIU$F1368^0,f,c
  4932   0009D6  0012               	return	
  4933   0009D8                     l700:
  4934                           
  4935                           ;TAD_TECLATMATRIU.c: 80:             col_selected = 255;
  4936   0009D8  6825               	setf	_col_selected^0,c
  4937                           
  4938                           ;TAD_TECLATMATRIU.c: 82:             if (PORTDbits.RD2) {
  4939   0009DA  A483               	btfss	131,2,c	;volatile
  4940   0009DC  D002               	goto	l701
  4941                           
  4942                           ;TAD_TECLATMATRIU.c: 83:                 col_selected = 0;
  4943   0009DE  6A25               	clrf	_col_selected^0,c
  4944                           
  4945                           ;TAD_TECLATMATRIU.c: 84:             } else if (PORTDbits.RD1) {
  4946   0009E0  D008               	goto	l4909
  4947   0009E2                     l701:
  4948   0009E2  A283               	btfss	131,1,c	;volatile
  4949   0009E4  D002               	goto	l703
  4950                           
  4951                           ;TAD_TECLATMATRIU.c: 85:                 col_selected = 1;
  4952   0009E6  0E01               	movlw	1
  4953   0009E8  D003               	goto	L12
  4954   0009EA                     l703:
  4955   0009EA  A882               	btfss	130,4,c	;volatile
  4956   0009EC  D002               	goto	l4909
  4957                           
  4958                           ;TAD_TECLATMATRIU.c: 87:                 col_selected = 2;
  4959   0009EE  0E02               	movlw	2
  4960   0009F0                     L12:
  4961   0009F0  6E25               	movwf	_col_selected^0,c
  4962   0009F2                     l4909:
  4963                           
  4964                           ;TAD_TECLATMATRIU.c: 90:             if (col_selected != 255) {
  4965   0009F2  2825               	incf	_col_selected^0,w,c
  4966   0009F4  A4D8               	btfss	status,2,c
  4967   0009F6  D7D4               	goto	l4883
  4968   0009F8  D7AD               	goto	l4869
  4969   0009FA                     l4915:
  4970                           
  4971                           ;TAD_TECLATMATRIU.c: 98:             key = TECLAT_MATRIU[row_selected][col_selected];
  4972   0009FA  5026               	movf	_row_selected^0,w,c
  4973   0009FC  0D03               	mullw	3
  4974   0009FE  0E84               	movlw	low _TECLAT_MATRIU
  4975   000A00  24F3               	addwf	243,w,c
  4976   000A02  6E5F               	movwf	??_TM_Motor^0,c
  4977   000A04  0E1E               	movlw	high _TECLAT_MATRIU
  4978   000A06  20F4               	addwfc	prodh,w,c
  4979   000A08  6E60               	movwf	(??_TM_Motor+1)^0,c
  4980   000A0A  5025               	movf	_col_selected^0,w,c
  4981   000A0C  265F               	addwf	??_TM_Motor^0,f,c
  4982   000A0E  0E00               	movlw	0
  4983   000A10  2260               	addwfc	(??_TM_Motor+1)^0,f,c
  4984   000A12  C05F  FFF6         	movff	??_TM_Motor,tblptrl
  4985   000A16  C060  FFF7         	movff	??_TM_Motor+1,tblptrh
  4986   000A1A                     	if	0	;tblptru may be non-zero
  4987   000A1A                     	endif
  4988   000A1A                     	if	0	;tblptru may be non-zero
  4989   000A1A                     	endif
  4990   000A1A  0008               	tblrd		*
  4991   000A1C  CFF5 F028          	movff	tablat,_key
  4992                           
  4993                           ;TAD_TECLATMATRIU.c: 101:             if (!TM_IsKeyPressed()) state = 0;
  4994   000A20  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  4995   000A24  0900               	iorlw	0
  4996   000A26  A4D8               	btfss	status,2,c
  4997   000A28  0012               	return	
  4998   000A2A  6A29               	clrf	_state@TAD_TECLATMATRIU$F1368^0,c
  4999   000A2C  0012               	return	
  5000   000A2E                     l4923:
  5001   000A2E  5029               	movf	_state@TAD_TECLATMATRIU$F1368^0,w,c
  5002                           
  5003                           ; Switch size 1, requested type "simple"
  5004                           ; Number of cases is 8, Range of values is 0 to 7
  5005                           ; switch strategies available:
  5006                           ; Name         Instructions Cycles
  5007                           ; simple_byte           25    13 (average)
  5008                           ;	Chosen strategy is simple_byte
  5009   000A30  0A00               	xorlw	0	; case 0
  5010   000A32  B4D8               	btfsc	status,2,c
  5011   000A34  D78A               	goto	l683
  5012   000A36  0A01               	xorlw	1	; case 1
  5013   000A38  B4D8               	btfsc	status,2,c
  5014   000A3A  D78F               	goto	l685
  5015   000A3C  0A03               	xorlw	3	; case 2
  5016   000A3E  B4D8               	btfsc	status,2,c
  5017   000A40  D795               	goto	l686
  5018   000A42  0A01               	xorlw	1	; case 3
  5019   000A44  B4D8               	btfsc	status,2,c
  5020   000A46  D79B               	goto	l687
  5021   000A48  0A07               	xorlw	7	; case 4
  5022   000A4A  B4D8               	btfsc	status,2,c
  5023   000A4C  D7A1               	goto	l688
  5024   000A4E  0A01               	xorlw	1	; case 5
  5025   000A50  B4D8               	btfsc	status,2,c
  5026   000A52  D7B0               	goto	l4891
  5027   000A54  0A03               	xorlw	3	; case 6
  5028   000A56  B4D8               	btfsc	status,2,c
  5029   000A58  D7BF               	goto	l700
  5030   000A5A  0A01               	xorlw	1	; case 7
  5031   000A5C  A4D8               	btfss	status,2,c
  5032   000A5E  0012               	return	
  5033   000A60  D7CC               	goto	l4915
  5034   000A62                     __end_of_TM_Motor:
  5035                           	callstack 0
  5036                           
  5037 ;; *************** function _TM_Init *****************
  5038 ;; Defined at:
  5039 ;;		line 15 in file "TAD_TECLATMATRIU.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1
  5053 ;;      Params:         0       0       0
  5054 ;;      Locals:         0       0       0
  5055 ;;      Temps:          0       0       0
  5056 ;;      Totals:         0       0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used: 1
  5059 ;; Hardware stack levels required when called: 4
  5060 ;; This function calls:
  5061 ;;		_TI_NewTimer
  5062 ;; This function is called by:
  5063 ;;		_main
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text10
  5068   001C10                     __ptext10:
  5069                           	callstack 0
  5070   001C10                     _TM_Init:
  5071                           	callstack 26
  5072                           
  5073                           ;TAD_TECLATMATRIU.c: 16:     TI_NewTimer(&TimerRebots);
  5074                           
  5075                           ;incstack = 0
  5076   001C10  0E50               	movlw	low _TimerRebots
  5077   001C12  6E52               	movwf	TI_NewTimer@TimerHandle^0,c
  5078   001C14  EC44  F00D         	call	_TI_NewTimer	;wreg free
  5079                           
  5080                           ;TAD_TECLATMATRIU.c: 18:     TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISCbits.TRISC4 = 1;
  5081   001C18  8894               	bsf	148,4,c	;volatile
  5082   001C1A  8295               	bsf	149,1,c	;volatile
  5083   001C1C  8495               	bsf	149,2,c	;volatile
  5084                           
  5085                           ;TAD_TECLATMATRIU.c: 19:     TRISDbits.TRISD0 = TRISDbits.TRISD4 = TRISCbits.TRISC5 = TR
      +                          ISDbits.TRISD3 = 0;
  5086   001C1E  9695               	bcf	149,3,c	;volatile
  5087   001C20  9A94               	bcf	148,5,c	;volatile
  5088   001C22  9895               	bcf	149,4,c	;volatile
  5089   001C24  9095               	bcf	149,0,c	;volatile
  5090                           
  5091                           ;TAD_TECLATMATRIU.c: 20:     LATDbits.LATD0 = LATDbits.LATD4 = LATCbits.LATC5 = LATDbits
      +                          .LATD3 = 0;
  5092   001C26  968C               	bcf	140,3,c	;volatile
  5093   001C28  9A8B               	bcf	139,5,c	;volatile
  5094   001C2A  988C               	bcf	140,4,c	;volatile
  5095   001C2C  908C               	bcf	140,0,c	;volatile
  5096                           
  5097                           ;TAD_TECLATMATRIU.c: 21:     index_row = state = hash = 0;
  5098   001C2E  6A27               	clrf	_hash^0,c
  5099   001C30  6A29               	clrf	_state@TAD_TECLATMATRIU$F1368^0,c
  5100   001C32  6A24               	clrf	_index_row^0,c
  5101   001C34  0012               	return		;funcret
  5102   001C36                     __end_of_TM_Init:
  5103                           	callstack 0
  5104                           
  5105 ;; *************** function _TI_Init *****************
  5106 ;; Defined at:
  5107 ;;		line 35 in file "TAD_TIMER.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;		None
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;  counter         1    0[COMRAM] unsigned char 
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  1    wreg      void 
  5114 ;; Registers used:
  5115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMRAM   BANK0   BANK1
  5121 ;;      Params:         0       0       0
  5122 ;;      Locals:         1       0       0
  5123 ;;      Temps:          0       0       0
  5124 ;;      Totals:         1       0       0
  5125 ;;Total ram usage:        1 bytes
  5126 ;; Hardware stack levels used: 1
  5127 ;; Hardware stack levels required when called: 3
  5128 ;; This function calls:
  5129 ;;		Nothing
  5130 ;; This function is called by:
  5131 ;;		_main
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text11
  5136   001B92                     __ptext11:
  5137                           	callstack 0
  5138   001B92                     _TI_Init:
  5139                           	callstack 27
  5140                           
  5141                           ;TAD_TIMER.c: 36:  for (unsigned char counter=0; counter<9; counter++) {
  5142                           
  5143                           ;incstack = 0
  5144   001B92  6A52               	clrf	TI_Init@counter^0,c
  5145   001B94                     l4569:
  5146                           
  5147                           ;TAD_TIMER.c: 37:   Timers[counter].Busy=0;
  5148   001B94  5052               	movf	TI_Init@counter^0,w,c
  5149   001B96  0D05               	mullw	5
  5150   001B98  50F3               	movf	243,w,c
  5151   001B9A  0F84               	addlw	low (_Timers+4)
  5152   001B9C  6ED9               	movwf	fsr2l,c
  5153   001B9E  6ADA               	clrf	fsr2h,c
  5154   001BA0  6ADF               	clrf	indf2,c
  5155                           
  5156                           ;TAD_TIMER.c: 38:  }
  5157   001BA2  2A52               	incf	TI_Init@counter^0,f,c
  5158   001BA4  0E08               	movlw	8
  5159   001BA6  6452               	cpfsgt	TI_Init@counter^0,c
  5160   001BA8  D7F5               	goto	l4569
  5161                           
  5162                           ;TAD_TIMER.c: 39:  T0CON=0x88;
  5163   001BAA  0E88               	movlw	136
  5164   001BAC  6ED5               	movwf	213,c	;volatile
  5165                           
  5166                           ;TAD_TIMER.c: 40:     TMR0=45536;
  5167   001BAE  0EB1               	movlw	177
  5168   001BB0  6ED7               	movwf	215,c	;volatile
  5169   001BB2  0EE0               	movlw	224
  5170   001BB4  6ED6               	movwf	214,c	;volatile
  5171                           
  5172                           ;TAD_TIMER.c: 41:  INTCONbits.TMR0IF = 0;
  5173   001BB6  94F2               	bcf	242,2,c	;volatile
  5174                           
  5175                           ;TAD_TIMER.c: 42:  INTCONbits.TMR0IE = 1;
  5176   001BB8  8AF2               	bsf	242,5,c	;volatile
  5177   001BBA  0012               	return		;funcret
  5178   001BBC                     __end_of_TI_Init:
  5179                           	callstack 0
  5180                           
  5181 ;; *************** function _SIO_Init *****************
  5182 ;; Defined at:
  5183 ;;		line 3 in file "TAD_SIO.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1
  5197 ;;      Params:         0       0       0
  5198 ;;      Locals:         0       0       0
  5199 ;;      Temps:          0       0       0
  5200 ;;      Totals:         0       0       0
  5201 ;;Total ram usage:        0 bytes
  5202 ;; Hardware stack levels used: 1
  5203 ;; Hardware stack levels required when called: 3
  5204 ;; This function calls:
  5205 ;;		Nothing
  5206 ;; This function is called by:
  5207 ;;		_main
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text12
  5212   001D54                     __ptext12:
  5213                           	callstack 0
  5214   001D54                     _SIO_Init:
  5215                           	callstack 27
  5216                           
  5217                           ;TAD_SIO.c: 5:     TRISCbits.TRISC6 = 1;
  5218                           
  5219                           ;incstack = 0
  5220   001D54  8C94               	bsf	148,6,c	;volatile
  5221                           
  5222                           ;TAD_SIO.c: 6:     TRISCbits.TRISC7 = 1;
  5223   001D56  8E94               	bsf	148,7,c	;volatile
  5224                           
  5225                           ;TAD_SIO.c: 14:     SPBRG = 64;
  5226   001D58  0E40               	movlw	64
  5227   001D5A  6EAF               	movwf	175,c	;volatile
  5228                           
  5229                           ;TAD_SIO.c: 16:     BAUDCONbits.BRG16 = 0;
  5230   001D5C  96B8               	bcf	184,3,c	;volatile
  5231                           
  5232                           ;TAD_SIO.c: 17:     TXSTAbits.BRGH = 0;
  5233   001D5E  94AC               	bcf	172,2,c	;volatile
  5234                           
  5235                           ;TAD_SIO.c: 19:     TXSTAbits.SYNC = 0;
  5236   001D60  98AC               	bcf	172,4,c	;volatile
  5237                           
  5238                           ;TAD_SIO.c: 20:     RCSTAbits.SPEN = 1;
  5239   001D62  8EAB               	bsf	171,7,c	;volatile
  5240                           
  5241                           ;TAD_SIO.c: 22:     TXSTAbits.TXEN = 1;
  5242   001D64  8AAC               	bsf	172,5,c	;volatile
  5243                           
  5244                           ;TAD_SIO.c: 23:     RCSTAbits.CREN = 1;
  5245   001D66  88AB               	bsf	171,4,c	;volatile
  5246   001D68  0012               	return		;funcret
  5247   001D6A                     __end_of_SIO_Init:
  5248                           	callstack 0
  5249                           
  5250 ;; *************** function _RFID_Init *****************
  5251 ;; Defined at:
  5252 ;;		line 29 in file "TRFID.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;		None
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      void 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1
  5266 ;;      Params:         0       0       0
  5267 ;;      Locals:         0       0       0
  5268 ;;      Temps:          0       0       0
  5269 ;;      Totals:         0       0       0
  5270 ;;Total ram usage:        0 bytes
  5271 ;; Hardware stack levels used: 1
  5272 ;; Hardware stack levels required when called: 8
  5273 ;; This function calls:
  5274 ;;		_InitPortDirections
  5275 ;;		_MFRC522_Init
  5276 ;; This function is called by:
  5277 ;;		_main
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text13
  5282   001E10                     __ptext13:
  5283                           	callstack 0
  5284   001E10                     _RFID_Init:
  5285                           	callstack 22
  5286                           
  5287                           ;TRFID.c: 30:     InitPortDirections();
  5288                           
  5289                           ;incstack = 0
  5290   001E10  ECF6  F00E         	call	_InitPortDirections	;wreg free
  5291                           
  5292                           ;TRFID.c: 31:     MFRC522_Init();
  5293   001E14  EC6B  F00C         	call	_MFRC522_Init	;wreg free
  5294   001E18  0012               	return		;funcret
  5295   001E1A                     __end_of_RFID_Init:
  5296                           	callstack 0
  5297                           
  5298 ;; *************** function _MFRC522_Init *****************
  5299 ;; Defined at:
  5300 ;;		line 34 in file "TRFID.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      void 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1
  5314 ;;      Params:         0       0       0
  5315 ;;      Locals:         0       0       0
  5316 ;;      Temps:          0       0       0
  5317 ;;      Totals:         0       0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used: 1
  5320 ;; Hardware stack levels required when called: 7
  5321 ;; This function calls:
  5322 ;;		_MFRC522_AntennaOff
  5323 ;;		_MFRC522_AntennaOn
  5324 ;;		_MFRC522_Reset
  5325 ;;		_MFRC522_Wr
  5326 ;; This function is called by:
  5327 ;;		_RFID_Init
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text14
  5332   0018D6                     __ptext14:
  5333                           	callstack 0
  5334   0018D6                     _MFRC522_Init:
  5335                           	callstack 22
  5336                           
  5337                           ;TRFID.c: 35:     LATBbits.LATB1 = 1;
  5338                           
  5339                           ;incstack = 0
  5340   0018D6  828A               	bsf	138,1,c	;volatile
  5341                           
  5342                           ;TRFID.c: 36:     LATDbits.LATD5 = 1;
  5343   0018D8  8A8C               	bsf	140,5,c	;volatile
  5344                           
  5345                           ;TRFID.c: 38:     MFRC522_Reset();
  5346   0018DA  ECDE  F00D         	call	_MFRC522_Reset	;wreg free
  5347                           
  5348                           ;TRFID.c: 39:     MFRC522_Wr(0x2A, 0x8D);
  5349   0018DE  0E8D               	movlw	141
  5350   0018E0  6E57               	movwf	MFRC522_Wr@value^0,c
  5351   0018E2  0E2A               	movlw	42
  5352   0018E4  EC72  F009         	call	_MFRC522_Wr
  5353                           
  5354                           ;TRFID.c: 40:     MFRC522_Wr(0x2B, 0x3E);
  5355   0018E8  0E3E               	movlw	62
  5356   0018EA  6E57               	movwf	MFRC522_Wr@value^0,c
  5357   0018EC  0E2B               	movlw	43
  5358   0018EE  EC72  F009         	call	_MFRC522_Wr
  5359                           
  5360                           ;TRFID.c: 41:     MFRC522_Wr(0x2D, 30);
  5361   0018F2  0E1E               	movlw	30
  5362   0018F4  6E57               	movwf	MFRC522_Wr@value^0,c
  5363   0018F6  0E2D               	movlw	45
  5364   0018F8  EC72  F009         	call	_MFRC522_Wr
  5365                           
  5366                           ;TRFID.c: 42:     MFRC522_Wr(0x2C, 0);
  5367   0018FC  0E00               	movlw	0
  5368   0018FE  6E57               	movwf	MFRC522_Wr@value^0,c
  5369   001900  0E2C               	movlw	44
  5370   001902  EC72  F009         	call	_MFRC522_Wr
  5371                           
  5372                           ;TRFID.c: 43:     MFRC522_Wr(0x15, 0x40);
  5373   001906  0E40               	movlw	64
  5374   001908  6E57               	movwf	MFRC522_Wr@value^0,c
  5375   00190A  0E15               	movlw	21
  5376   00190C  EC72  F009         	call	_MFRC522_Wr
  5377                           
  5378                           ;TRFID.c: 44:     MFRC522_Wr(0x11, 0x3D);
  5379   001910  0E3D               	movlw	61
  5380   001912  6E57               	movwf	MFRC522_Wr@value^0,c
  5381   001914  0E11               	movlw	17
  5382   001916  EC72  F009         	call	_MFRC522_Wr
  5383                           
  5384                           ;TRFID.c: 46:     MFRC522_AntennaOff();
  5385   00191A  ECF0  F00E         	call	_MFRC522_AntennaOff	;wreg free
  5386                           
  5387                           ;TRFID.c: 47:     MFRC522_AntennaOn();
  5388   00191E  ECB5  F00E         	call	_MFRC522_AntennaOn	;wreg free
  5389   001922  0012               	return		;funcret
  5390   001924                     __end_of_MFRC522_Init:
  5391                           	callstack 0
  5392                           
  5393 ;; *************** function _MFRC522_Reset *****************
  5394 ;; Defined at:
  5395 ;;		line 60 in file "TRFID.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;		None
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  1    wreg      void 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMRAM   BANK0   BANK1
  5409 ;;      Params:         0       0       0
  5410 ;;      Locals:         0       0       0
  5411 ;;      Temps:          0       0       0
  5412 ;;      Totals:         0       0       0
  5413 ;;Total ram usage:        0 bytes
  5414 ;; Hardware stack levels used: 1
  5415 ;; Hardware stack levels required when called: 5
  5416 ;; This function calls:
  5417 ;;		_MFRC522_Wr
  5418 ;;		_delay_us
  5419 ;; This function is called by:
  5420 ;;		_MFRC522_Init
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text15
  5425   001BBC                     __ptext15:
  5426                           	callstack 0
  5427   001BBC                     _MFRC522_Reset:
  5428                           	callstack 23
  5429                           
  5430                           ;TRFID.c: 61:     LATDbits.LATD5 = 1;
  5431                           
  5432                           ;incstack = 0
  5433   001BBC  8A8C               	bsf	140,5,c	;volatile
  5434                           
  5435                           ;TRFID.c: 62:     delay_us(1);
  5436   001BBE  0E01               	movlw	1
  5437   001BC0  ECF3  F00D         	call	_delay_us
  5438                           
  5439                           ;TRFID.c: 63:     LATDbits.LATD5 = 0;
  5440   001BC4  9A8C               	bcf	140,5,c	;volatile
  5441                           
  5442                           ;TRFID.c: 64:     delay_us(1);
  5443   001BC6  0E01               	movlw	1
  5444   001BC8  ECF3  F00D         	call	_delay_us
  5445                           
  5446                           ;TRFID.c: 65:     LATDbits.LATD5 = 1;
  5447   001BCC  8A8C               	bsf	140,5,c	;volatile
  5448                           
  5449                           ;TRFID.c: 66:     delay_us(1);
  5450   001BCE  0E01               	movlw	1
  5451   001BD0  ECF3  F00D         	call	_delay_us
  5452                           
  5453                           ;TRFID.c: 67:     MFRC522_Wr(0x01, 0x0F);
  5454   001BD4  0E0F               	movlw	15
  5455   001BD6  6E57               	movwf	MFRC522_Wr@value^0,c
  5456   001BD8  0E01               	movlw	1
  5457   001BDA  EC72  F009         	call	_MFRC522_Wr
  5458                           
  5459                           ;TRFID.c: 68:     delay_us(1);
  5460   001BDE  0E01               	movlw	1
  5461   001BE0  ECF3  F00D         	call	_delay_us
  5462   001BE4  0012               	return		;funcret
  5463   001BE6                     __end_of_MFRC522_Reset:
  5464                           	callstack 0
  5465                           
  5466 ;; *************** function _MFRC522_AntennaOn *****************
  5467 ;; Defined at:
  5468 ;;		line 71 in file "TRFID.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  stt             1    0        unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1
  5482 ;;      Params:         0       0       0
  5483 ;;      Locals:         0       0       0
  5484 ;;      Temps:          0       0       0
  5485 ;;      Totals:         0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used: 1
  5488 ;; Hardware stack levels required when called: 6
  5489 ;; This function calls:
  5490 ;;		_MFRC522_Rd
  5491 ;;		_MFRC522_Set_Bit
  5492 ;; This function is called by:
  5493 ;;		_MFRC522_Init
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text16
  5498   001D6A                     __ptext16:
  5499                           	callstack 0
  5500   001D6A                     _MFRC522_AntennaOn:
  5501                           	callstack 22
  5502                           
  5503                           ;incstack = 0
  5504   001D6A  0E14               	movlw	20
  5505   001D6C  EC28  F009         	call	_MFRC522_Rd
  5506                           
  5507                           ;TRFID.c: 73:     MFRC522_Set_Bit(0x14, 0x03);
  5508   001D70  0E03               	movlw	3
  5509   001D72  6E5C               	movwf	MFRC522_Set_Bit@mask^0,c
  5510   001D74  0E14               	movlw	20
  5511   001D76  EC92  F00E         	call	_MFRC522_Set_Bit
  5512   001D7A  0012               	return		;funcret
  5513   001D7C                     __end_of_MFRC522_AntennaOn:
  5514                           	callstack 0
  5515                           
  5516 ;; *************** function _MFRC522_Set_Bit *****************
  5517 ;; Defined at:
  5518 ;;		line 55 in file "TRFID.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  addr            1    wreg     unsigned char 
  5521 ;;  mask            1   10[COMRAM] unsigned char 
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;  addr            1   12[COMRAM] unsigned char 
  5524 ;;  tmp             1   11[COMRAM] unsigned char 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1
  5534 ;;      Params:         1       0       0
  5535 ;;      Locals:         2       0       0
  5536 ;;      Temps:          0       0       0
  5537 ;;      Totals:         3       0       0
  5538 ;;Total ram usage:        3 bytes
  5539 ;; Hardware stack levels used: 1
  5540 ;; Hardware stack levels required when called: 5
  5541 ;; This function calls:
  5542 ;;		_MFRC522_Rd
  5543 ;;		_MFRC522_Wr
  5544 ;; This function is called by:
  5545 ;;		_MFRC522_AntennaOn
  5546 ;;		_MFRC522_CRC_NOU
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text17
  5551   001D24                     __ptext17:
  5552                           	callstack 0
  5553   001D24                     _MFRC522_Set_Bit:
  5554                           	callstack 23
  5555                           
  5556                           ;incstack = 0
  5557                           ;MFRC522_Set_Bit@addr stored from wreg
  5558   001D24  6E5E               	movwf	MFRC522_Set_Bit@addr^0,c
  5559                           
  5560                           ;TRFID.c: 56:     unsigned char tmp = MFRC522_Rd(addr);
  5561   001D26  505E               	movf	MFRC522_Set_Bit@addr^0,w,c
  5562   001D28  EC28  F009         	call	_MFRC522_Rd
  5563   001D2C  6E5D               	movwf	MFRC522_Set_Bit@tmp^0,c
  5564                           
  5565                           ;TRFID.c: 57:     MFRC522_Wr(addr, tmp | mask);
  5566   001D2E  505D               	movf	MFRC522_Set_Bit@tmp^0,w,c
  5567   001D30  105C               	iorwf	MFRC522_Set_Bit@mask^0,w,c
  5568   001D32  6E57               	movwf	MFRC522_Wr@value^0,c
  5569   001D34  505E               	movf	MFRC522_Set_Bit@addr^0,w,c
  5570   001D36  EC72  F009         	call	_MFRC522_Wr
  5571   001D3A  0012               	return		;funcret
  5572   001D3C                     __end_of_MFRC522_Set_Bit:
  5573                           	callstack 0
  5574                           
  5575 ;; *************** function _MFRC522_AntennaOff *****************
  5576 ;; Defined at:
  5577 ;;		line 76 in file "TRFID.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;		None
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;		None
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  1    wreg      void 
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1
  5591 ;;      Params:         0       0       0
  5592 ;;      Locals:         0       0       0
  5593 ;;      Temps:          0       0       0
  5594 ;;      Totals:         0       0       0
  5595 ;;Total ram usage:        0 bytes
  5596 ;; Hardware stack levels used: 1
  5597 ;; Hardware stack levels required when called: 6
  5598 ;; This function calls:
  5599 ;;		_MFRC522_Clear_Bit
  5600 ;; This function is called by:
  5601 ;;		_MFRC522_Init
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           	psect	text18
  5606   001DE0                     __ptext18:
  5607                           	callstack 0
  5608   001DE0                     _MFRC522_AntennaOff:
  5609                           	callstack 22
  5610                           
  5611                           ;TRFID.c: 77:     MFRC522_Clear_Bit(0x14, 0x03);
  5612                           
  5613                           ;incstack = 0
  5614   001DE0  0E03               	movlw	3
  5615   001DE2  6E5C               	movwf	MFRC522_Clear_Bit@mask^0,c
  5616   001DE4  0E14               	movlw	20
  5617   001DE6  EC78  F00E         	call	_MFRC522_Clear_Bit
  5618   001DEA  0012               	return		;funcret
  5619   001DEC                     __end_of_MFRC522_AntennaOff:
  5620                           	callstack 0
  5621                           
  5622 ;; *************** function _MFRC522_Clear_Bit *****************
  5623 ;; Defined at:
  5624 ;;		line 50 in file "TRFID.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  addr            1    wreg     unsigned char 
  5627 ;;  mask            1   10[COMRAM] unsigned char 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  addr            1   12[COMRAM] unsigned char 
  5630 ;;  tmp             1   11[COMRAM] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1
  5640 ;;      Params:         1       0       0
  5641 ;;      Locals:         2       0       0
  5642 ;;      Temps:          0       0       0
  5643 ;;      Totals:         3       0       0
  5644 ;;Total ram usage:        3 bytes
  5645 ;; Hardware stack levels used: 1
  5646 ;; Hardware stack levels required when called: 5
  5647 ;; This function calls:
  5648 ;;		_MFRC522_Rd
  5649 ;;		_MFRC522_Wr
  5650 ;; This function is called by:
  5651 ;;		_MFRC522_AntennaOff
  5652 ;;		_MFRC522_CRC_NOU
  5653 ;;		_motorRFIDcoop_NOU
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text19
  5658   001CF0                     __ptext19:
  5659                           	callstack 0
  5660   001CF0                     _MFRC522_Clear_Bit:
  5661                           	callstack 24
  5662                           
  5663                           ;incstack = 0
  5664                           ;MFRC522_Clear_Bit@addr stored from wreg
  5665   001CF0  6E5E               	movwf	MFRC522_Clear_Bit@addr^0,c
  5666                           
  5667                           ;TRFID.c: 51:     unsigned char tmp = MFRC522_Rd(addr);
  5668   001CF2  505E               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5669   001CF4  EC28  F009         	call	_MFRC522_Rd
  5670   001CF8  6E5D               	movwf	MFRC522_Clear_Bit@tmp^0,c
  5671                           
  5672                           ;TRFID.c: 52:     MFRC522_Wr(addr, tmp & ~mask);
  5673   001CFA  505C               	movf	MFRC522_Clear_Bit@mask^0,w,c
  5674   001CFC  0AFF               	xorlw	255
  5675   001CFE  145D               	andwf	MFRC522_Clear_Bit@tmp^0,w,c
  5676   001D00  6E57               	movwf	MFRC522_Wr@value^0,c
  5677   001D02  505E               	movf	MFRC522_Clear_Bit@addr^0,w,c
  5678   001D04  EC72  F009         	call	_MFRC522_Wr
  5679   001D08  0012               	return		;funcret
  5680   001D0A                     __end_of_MFRC522_Clear_Bit:
  5681                           	callstack 0
  5682                           
  5683 ;; *************** function _MFRC522_Wr *****************
  5684 ;; Defined at:
  5685 ;;		line 636 in file "TRFID.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  Address         1    wreg     unsigned char 
  5688 ;;  value           1    5[COMRAM] unsigned char 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  Address         1    7[COMRAM] unsigned char 
  5691 ;;  i               1    9[COMRAM] unsigned char 
  5692 ;;  ucAddr          1    8[COMRAM] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      void 
  5695 ;; Registers used:
  5696 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1
  5702 ;;      Params:         1       0       0
  5703 ;;      Locals:         3       0       0
  5704 ;;      Temps:          1       0       0
  5705 ;;      Totals:         5       0       0
  5706 ;;Total ram usage:        5 bytes
  5707 ;; Hardware stack levels used: 1
  5708 ;; Hardware stack levels required when called: 4
  5709 ;; This function calls:
  5710 ;;		_delay_us
  5711 ;; This function is called by:
  5712 ;;		_MFRC522_Init
  5713 ;;		_MFRC522_Clear_Bit
  5714 ;;		_MFRC522_Set_Bit
  5715 ;;		_MFRC522_Reset
  5716 ;;		_MFRC522_ToCard
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text20
  5721   0012E4                     __ptext20:
  5722                           	callstack 0
  5723   0012E4                     _MFRC522_Wr:
  5724                           	callstack 24
  5725                           
  5726                           ;incstack = 0
  5727                           ;MFRC522_Wr@Address stored from wreg
  5728   0012E4  6E59               	movwf	MFRC522_Wr@Address^0,c
  5729                           
  5730                           ;TRFID.c: 637:     unsigned char i, ucAddr;;TRFID.c: 639:     LATBbits.LATB0 = 0;
  5731   0012E6  908A               	bcf	138,0,c	;volatile
  5732                           
  5733                           ;TRFID.c: 640:     LATBbits.LATB1 = 0;
  5734   0012E8  928A               	bcf	138,1,c	;volatile
  5735                           
  5736                           ;TRFID.c: 641:     ucAddr = ((Address << 1) & 0x7E);
  5737   0012EA  5059               	movf	MFRC522_Wr@Address^0,w,c
  5738   0012EC  2459               	addwf	MFRC522_Wr@Address^0,w,c
  5739   0012EE  0B7E               	andlw	126
  5740   0012F0  6E5A               	movwf	MFRC522_Wr@ucAddr^0,c
  5741                           
  5742                           ;TRFID.c: 643:     for (i = 8; i > 0; i--) {
  5743   0012F2  0E08               	movlw	8
  5744   0012F4  6E5B               	movwf	MFRC522_Wr@i^0,c
  5745   0012F6                     l3575:
  5746                           
  5747                           ;TRFID.c: 644:         LATDbits.LATD7 = ((ucAddr & 0x80) == 0x80);
  5748   0012F6  AE5A               	btfss	MFRC522_Wr@ucAddr^0,7,c
  5749   0012F8  D003               	goto	u2260
  5750   0012FA  6A58               	clrf	??_MFRC522_Wr^0,c
  5751   0012FC  2A58               	incf	??_MFRC522_Wr^0,f,c
  5752   0012FE  D001               	goto	u2278
  5753   001300                     u2260:
  5754   001300  6A58               	clrf	??_MFRC522_Wr^0,c
  5755   001302                     u2278:
  5756   001302  3258               	rrcf	??_MFRC522_Wr^0,f,c
  5757   001304  3258               	rrcf	??_MFRC522_Wr^0,f,c
  5758   001306  508C               	movf	140,w,c	;volatile
  5759   001308  1858               	xorwf	??_MFRC522_Wr^0,w,c
  5760   00130A  0B7F               	andlw	-129
  5761   00130C  1858               	xorwf	??_MFRC522_Wr^0,w,c
  5762   00130E  6E8C               	movwf	140,c	;volatile
  5763                           
  5764                           ;TRFID.c: 645:         LATBbits.LATB0 = 1;
  5765   001310  808A               	bsf	138,0,c	;volatile
  5766                           
  5767                           ;TRFID.c: 646:         ucAddr <<= 1;
  5768   001312  90D8               	bcf	status,0,c
  5769   001314  365A               	rlcf	MFRC522_Wr@ucAddr^0,f,c
  5770                           
  5771                           ;TRFID.c: 647:         delay_us(3);
  5772   001316  0E03               	movlw	3
  5773   001318  ECF3  F00D         	call	_delay_us
  5774                           
  5775                           ;TRFID.c: 648:         LATBbits.LATB0 = 0;
  5776   00131C  908A               	bcf	138,0,c	;volatile
  5777                           
  5778                           ;TRFID.c: 649:         delay_us(3);
  5779   00131E  0E03               	movlw	3
  5780   001320  ECF3  F00D         	call	_delay_us
  5781                           
  5782                           ;TRFID.c: 650:     }
  5783   001324  065B               	decf	MFRC522_Wr@i^0,f,c
  5784   001326  505B               	movf	MFRC522_Wr@i^0,w,c
  5785   001328  A4D8               	btfss	status,2,c
  5786   00132A  D7E5               	goto	l3575
  5787                           
  5788                           ;TRFID.c: 652:     for (i = 8; i > 0; i--) {
  5789   00132C  0E08               	movlw	8
  5790   00132E  6E5B               	movwf	MFRC522_Wr@i^0,c
  5791   001330                     l3593:
  5792                           
  5793                           ;TRFID.c: 653:         LATDbits.LATD7 = ((value & 0x80) == 0x80);
  5794   001330  AE57               	btfss	MFRC522_Wr@value^0,7,c
  5795   001332  D003               	goto	u2290
  5796   001334  6A58               	clrf	??_MFRC522_Wr^0,c
  5797   001336  2A58               	incf	??_MFRC522_Wr^0,f,c
  5798   001338  D001               	goto	u2308
  5799   00133A                     u2290:
  5800   00133A  6A58               	clrf	??_MFRC522_Wr^0,c
  5801   00133C                     u2308:
  5802   00133C  3258               	rrcf	??_MFRC522_Wr^0,f,c
  5803   00133E  3258               	rrcf	??_MFRC522_Wr^0,f,c
  5804   001340  508C               	movf	140,w,c	;volatile
  5805   001342  1858               	xorwf	??_MFRC522_Wr^0,w,c
  5806   001344  0B7F               	andlw	-129
  5807   001346  1858               	xorwf	??_MFRC522_Wr^0,w,c
  5808   001348  6E8C               	movwf	140,c	;volatile
  5809                           
  5810                           ;TRFID.c: 654:         LATBbits.LATB0 = 1;
  5811   00134A  808A               	bsf	138,0,c	;volatile
  5812                           
  5813                           ;TRFID.c: 655:         value <<= 1;
  5814   00134C  90D8               	bcf	status,0,c
  5815   00134E  3657               	rlcf	MFRC522_Wr@value^0,f,c
  5816                           
  5817                           ;TRFID.c: 656:         delay_us(3);
  5818   001350  0E03               	movlw	3
  5819   001352  ECF3  F00D         	call	_delay_us
  5820                           
  5821                           ;TRFID.c: 657:         LATBbits.LATB0 = 0;
  5822   001356  908A               	bcf	138,0,c	;volatile
  5823                           
  5824                           ;TRFID.c: 658:         delay_us(3);
  5825   001358  0E03               	movlw	3
  5826   00135A  ECF3  F00D         	call	_delay_us
  5827                           
  5828                           ;TRFID.c: 659:     }
  5829   00135E  065B               	decf	MFRC522_Wr@i^0,f,c
  5830   001360  505B               	movf	MFRC522_Wr@i^0,w,c
  5831   001362  A4D8               	btfss	status,2,c
  5832   001364  D7E5               	goto	l3593
  5833                           
  5834                           ;TRFID.c: 661:     LATBbits.LATB1 = 1;
  5835   001366  828A               	bsf	138,1,c	;volatile
  5836                           
  5837                           ;TRFID.c: 662:     LATBbits.LATB0 = 1;
  5838   001368  808A               	bsf	138,0,c	;volatile
  5839   00136A  0012               	return		;funcret
  5840   00136C                     __end_of_MFRC522_Wr:
  5841                           	callstack 0
  5842                           
  5843 ;; *************** function _delay_us *****************
  5844 ;; Defined at:
  5845 ;;		line 23 in file "TRFID.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;  howMany         1    wreg     unsigned char 
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;  howMany         1    3[COMRAM] unsigned char 
  5850 ;;  x               1    4[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, prodl, prodh
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1
  5860 ;;      Params:         0       0       0
  5861 ;;      Locals:         2       0       0
  5862 ;;      Temps:          3       0       0
  5863 ;;      Totals:         5       0       0
  5864 ;;Total ram usage:        5 bytes
  5865 ;; Hardware stack levels used: 1
  5866 ;; Hardware stack levels required when called: 3
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_MFRC522_Reset
  5871 ;;		_MFRC522_Wr
  5872 ;;		_MFRC522_Wr_1
  5873 ;;		_MFRC522_Wr_2
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text21
  5878   001BE6                     __ptext21:
  5879                           	callstack 0
  5880   001BE6                     _delay_us:
  5881                           	callstack 25
  5882                           
  5883                           ;incstack = 0
  5884                           ;delay_us@howMany stored from wreg
  5885   001BE6  6E55               	movwf	delay_us@howMany^0,c
  5886                           
  5887                           ;TRFID.c: 25:     char x;;TRFID.c: 26:     for (x = 0; x < howMany * 16; x++) __nop();
  5888   001BE8  6A56               	clrf	delay_us@x^0,c
  5889   001BEA  D002               	goto	l3507
  5890   001BEC                     l286:
  5891   001BEC  0000               	nop	
  5892   001BEE  2A56               	incf	delay_us@x^0,f,c
  5893   001BF0                     l3507:
  5894   001BF0  5055               	movf	delay_us@howMany^0,w,c
  5895   001BF2  0D10               	mullw	16
  5896   001BF4  5056               	movf	delay_us@x^0,w,c
  5897   001BF6  6E52               	movwf	??_delay_us^0,c
  5898   001BF8  6A53               	clrf	(??_delay_us+1)^0,c
  5899   001BFA  50F3               	movf	243,w,c
  5900   001BFC  5C52               	subwf	??_delay_us^0,w,c
  5901   001BFE  5053               	movf	(??_delay_us+1)^0,w,c
  5902   001C00  0A80               	xorlw	128
  5903   001C02  6E54               	movwf	(??_delay_us+2)^0,c
  5904   001C04  50F4               	movf	244,w,c
  5905   001C06  0A80               	xorlw	128
  5906   001C08  5854               	subwfb	(??_delay_us+2)^0,w,c
  5907   001C0A  B0D8               	btfsc	status,0,c
  5908   001C0C  0012               	return	
  5909   001C0E  D7EE               	goto	l286
  5910   001C10                     __end_of_delay_us:
  5911                           	callstack 0
  5912                           
  5913 ;; *************** function _MFRC522_Rd *****************
  5914 ;; Defined at:
  5915 ;;		line 609 in file "TRFID.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  Address         1    wreg     unsigned char 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  Address         1    2[COMRAM] unsigned char 
  5920 ;;  i               2    7[COMRAM] unsigned int 
  5921 ;;  ucResult        2    5[COMRAM] unsigned int 
  5922 ;;  ucAddr          2    3[COMRAM] unsigned int 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      unsigned char 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1
  5932 ;;      Params:         0       0       0
  5933 ;;      Locals:         7       0       0
  5934 ;;      Temps:          2       0       0
  5935 ;;      Totals:         9       0       0
  5936 ;;Total ram usage:        9 bytes
  5937 ;; Hardware stack levels used: 1
  5938 ;; Hardware stack levels required when called: 3
  5939 ;; This function calls:
  5940 ;;		Nothing
  5941 ;; This function is called by:
  5942 ;;		_MFRC522_Clear_Bit
  5943 ;;		_MFRC522_Set_Bit
  5944 ;;		_MFRC522_AntennaOn
  5945 ;;		_MFRC522_CRC_NOU
  5946 ;;		_MFRC522_ToCard_NOU
  5947 ;;		_MFRC522_ToCard
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text22
  5952   001250                     __ptext22:
  5953                           	callstack 0
  5954   001250                     _MFRC522_Rd:
  5955                           	callstack 25
  5956                           
  5957                           ;incstack = 0
  5958                           ;MFRC522_Rd@Address stored from wreg
  5959   001250  6E54               	movwf	MFRC522_Rd@Address^0,c
  5960                           
  5961                           ;TRFID.c: 610:     unsigned int i, ucAddr;;TRFID.c: 611:     unsigned int ucResult = 0;
  5962   001252  0E00               	movlw	0
  5963   001254  6E58               	movwf	(MFRC522_Rd@ucResult+1)^0,c
  5964   001256  0E00               	movlw	0
  5965   001258  6E57               	movwf	MFRC522_Rd@ucResult^0,c
  5966                           
  5967                           ;TRFID.c: 613:     LATBbits.LATB0 = 0;
  5968   00125A  908A               	bcf	138,0,c	;volatile
  5969                           
  5970                           ;TRFID.c: 614:     LATBbits.LATB1 = 0;
  5971   00125C  928A               	bcf	138,1,c	;volatile
  5972                           
  5973                           ;TRFID.c: 615:     ucAddr = ((Address << 1) & 0x7E) | 0x80;
  5974   00125E  5054               	movf	MFRC522_Rd@Address^0,w,c
  5975   001260  2454               	addwf	MFRC522_Rd@Address^0,w,c
  5976   001262  0B7E               	andlw	126
  5977   001264  6E52               	movwf	??_MFRC522_Rd^0,c
  5978   001266  6A53               	clrf	(??_MFRC522_Rd+1)^0,c
  5979   001268  0E80               	movlw	128
  5980   00126A  1052               	iorwf	??_MFRC522_Rd^0,w,c
  5981   00126C  6E55               	movwf	MFRC522_Rd@ucAddr^0,c
  5982   00126E  5053               	movf	(??_MFRC522_Rd+1)^0,w,c
  5983   001270  6E56               	movwf	(MFRC522_Rd@ucAddr+1)^0,c
  5984                           
  5985                           ;TRFID.c: 617:     for (i = 8; i > 0; i--) {
  5986   001272  0E00               	movlw	0
  5987   001274  6E5A               	movwf	(MFRC522_Rd@i+1)^0,c
  5988   001276  0E08               	movlw	8
  5989   001278  6E59               	movwf	MFRC522_Rd@i^0,c
  5990   00127A                     l3621:
  5991                           
  5992                           ;TRFID.c: 618:         LATDbits.LATD7 = ((ucAddr & 0x80) == 0x80);
  5993   00127A  AE55               	btfss	MFRC522_Rd@ucAddr^0,7,c
  5994   00127C  D003               	goto	u2320
  5995   00127E  6A52               	clrf	??_MFRC522_Rd^0,c
  5996   001280  2A52               	incf	??_MFRC522_Rd^0,f,c
  5997   001282  D001               	goto	u2338
  5998   001284                     u2320:
  5999   001284  6A52               	clrf	??_MFRC522_Rd^0,c
  6000   001286                     u2338:
  6001   001286  3252               	rrcf	??_MFRC522_Rd^0,f,c
  6002   001288  3252               	rrcf	??_MFRC522_Rd^0,f,c
  6003   00128A  508C               	movf	140,w,c	;volatile
  6004   00128C  1852               	xorwf	??_MFRC522_Rd^0,w,c
  6005   00128E  0B7F               	andlw	-129
  6006   001290  1852               	xorwf	??_MFRC522_Rd^0,w,c
  6007   001292  6E8C               	movwf	140,c	;volatile
  6008                           
  6009                           ;TRFID.c: 619:         LATBbits.LATB0 = 1;
  6010   001294  808A               	bsf	138,0,c	;volatile
  6011                           
  6012                           ;TRFID.c: 620:         ucAddr <<= 1;
  6013   001296  90D8               	bcf	status,0,c
  6014   001298  3655               	rlcf	MFRC522_Rd@ucAddr^0,f,c
  6015   00129A  3656               	rlcf	(MFRC522_Rd@ucAddr+1)^0,f,c
  6016                           
  6017                           ;TRFID.c: 621:         LATBbits.LATB0 = 0;
  6018   00129C  908A               	bcf	138,0,c	;volatile
  6019                           
  6020                           ;TRFID.c: 622:     }
  6021   00129E  0659               	decf	MFRC522_Rd@i^0,f,c
  6022   0012A0  A0D8               	btfss	status,0,c
  6023   0012A2  065A               	decf	(MFRC522_Rd@i+1)^0,f,c
  6024   0012A4  5059               	movf	MFRC522_Rd@i^0,w,c
  6025   0012A6  105A               	iorwf	(MFRC522_Rd@i+1)^0,w,c
  6026   0012A8  A4D8               	btfss	status,2,c
  6027   0012AA  D7E7               	goto	l3621
  6028                           
  6029                           ;TRFID.c: 624:     for (i = 8; i > 0; i--) {
  6030   0012AC  0E00               	movlw	0
  6031   0012AE  6E5A               	movwf	(MFRC522_Rd@i+1)^0,c
  6032   0012B0  0E08               	movlw	8
  6033   0012B2  6E59               	movwf	MFRC522_Rd@i^0,c
  6034   0012B4                     l541:
  6035                           
  6036                           ;TRFID.c: 625:         LATBbits.LATB0 = 1;
  6037   0012B4  808A               	bsf	138,0,c	;volatile
  6038                           
  6039                           ;TRFID.c: 626:         ucResult <<= 1;
  6040   0012B6  90D8               	bcf	status,0,c
  6041   0012B8  3657               	rlcf	MFRC522_Rd@ucResult^0,f,c
  6042   0012BA  3658               	rlcf	(MFRC522_Rd@ucResult+1)^0,f,c
  6043                           
  6044                           ;TRFID.c: 627:         ucResult |= PORTDbits.RD6;
  6045   0012BC  AC83               	btfss	131,6,c	;volatile
  6046   0012BE  D003               	goto	u2350
  6047   0012C0  6A52               	clrf	??_MFRC522_Rd^0,c
  6048   0012C2  2A52               	incf	??_MFRC522_Rd^0,f,c
  6049   0012C4  D001               	goto	u2358
  6050   0012C6                     u2350:
  6051   0012C6  6A52               	clrf	??_MFRC522_Rd^0,c
  6052   0012C8                     u2358:
  6053   0012C8  5052               	movf	??_MFRC522_Rd^0,w,c
  6054   0012CA  1257               	iorwf	MFRC522_Rd@ucResult^0,f,c
  6055                           
  6056                           ;TRFID.c: 628:         LATBbits.LATB0 = 0;
  6057   0012CC  908A               	bcf	138,0,c	;volatile
  6058                           
  6059                           ;TRFID.c: 629:     }
  6060   0012CE  0659               	decf	MFRC522_Rd@i^0,f,c
  6061   0012D0  A0D8               	btfss	status,0,c
  6062   0012D2  065A               	decf	(MFRC522_Rd@i+1)^0,f,c
  6063   0012D4  5059               	movf	MFRC522_Rd@i^0,w,c
  6064   0012D6  105A               	iorwf	(MFRC522_Rd@i+1)^0,w,c
  6065   0012D8  A4D8               	btfss	status,2,c
  6066   0012DA  D7EC               	goto	l541
  6067                           
  6068                           ;TRFID.c: 631:     LATBbits.LATB1 = 1;
  6069   0012DC  828A               	bsf	138,1,c	;volatile
  6070                           
  6071                           ;TRFID.c: 632:     LATBbits.LATB0 = 1;
  6072   0012DE  808A               	bsf	138,0,c	;volatile
  6073                           
  6074                           ;TRFID.c: 633:     return ucResult;
  6075   0012E0  5057               	movf	MFRC522_Rd@ucResult^0,w,c
  6076   0012E2  0012               	return		;funcret
  6077   0012E4                     __end_of_MFRC522_Rd:
  6078                           	callstack 0
  6079                           
  6080 ;; *************** function _InitPortDirections *****************
  6081 ;; Defined at:
  6082 ;;		line 15 in file "TRFID.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      void 
  6089 ;; Registers used:
  6090 ;;		None
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1
  6096 ;;      Params:         0       0       0
  6097 ;;      Locals:         0       0       0
  6098 ;;      Temps:          0       0       0
  6099 ;;      Totals:         0       0       0
  6100 ;;Total ram usage:        0 bytes
  6101 ;; Hardware stack levels used: 1
  6102 ;; Hardware stack levels required when called: 3
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_RFID_Init
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text23
  6111   001DEC                     __ptext23:
  6112                           	callstack 0
  6113   001DEC                     _InitPortDirections:
  6114                           	callstack 26
  6115                           
  6116                           ;TRFID.c: 16:     TRISDbits.TRISD6 = 1;
  6117                           
  6118                           ;incstack = 0
  6119   001DEC  8C95               	bsf	149,6,c	;volatile
  6120                           
  6121                           ;TRFID.c: 17:     TRISDbits.TRISD7 = 0;
  6122   001DEE  9E95               	bcf	149,7,c	;volatile
  6123                           
  6124                           ;TRFID.c: 18:     TRISBbits.TRISB0 = 0;
  6125   001DF0  9093               	bcf	147,0,c	;volatile
  6126                           
  6127                           ;TRFID.c: 19:     TRISBbits.TRISB1 = 0;
  6128   001DF2  9293               	bcf	147,1,c	;volatile
  6129                           
  6130                           ;TRFID.c: 20:     TRISDbits.TRISD5 = 0;
  6131   001DF4  9A95               	bcf	149,5,c	;volatile
  6132   001DF6  0012               	return		;funcret
  6133   001DF8                     __end_of_InitPortDirections:
  6134                           	callstack 0
  6135                           
  6136 ;; *************** function _MENU_MotorHandleSetIntensity *****************
  6137 ;; Defined at:
  6138 ;;		line 139 in file "TAD_MENU.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;		None
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;		None
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      void 
  6145 ;; Registers used:
  6146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1
  6152 ;;      Params:         0       0       0
  6153 ;;      Locals:         2       0       0
  6154 ;;      Temps:          0       0       0
  6155 ;;      Totals:         2       0       0
  6156 ;;Total ram usage:        2 bytes
  6157 ;; Hardware stack levels used: 1
  6158 ;; Hardware stack levels required when called: 4
  6159 ;; This function calls:
  6160 ;;		_LEDS_setIntensitat
  6161 ;;		_TM_GetTecla
  6162 ;;		_TM_IsKeyPressed
  6163 ;; This function is called by:
  6164 ;;		_main
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           	psect	text24
  6169   000B5C                     __ptext24:
  6170                           	callstack 0
  6171   000B5C                     _MENU_MotorHandleSetIntensity:
  6172                           	callstack 26
  6173                           
  6174                           ;TAD_MENU.c: 140:     switch (state_setIntensity) {
  6175                           
  6176                           ;incstack = 0
  6177   000B5C  D060               	goto	l4865
  6178   000B5E                     l4807:
  6179                           
  6180                           ;TAD_MENU.c: 142:             if (TM_IsKeyPressed()) {
  6181   000B5E  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  6182   000B62  0900               	iorlw	0
  6183   000B64  B4D8               	btfsc	status,2,c
  6184   000B66  0012               	return	
  6185   000B68                     u3560:
  6186                           
  6187                           ;TAD_MENU.c: 143:                 state_setIntensity++;
  6188   000B68  2A14               	incf	_state_setIntensity^0,f,c
  6189   000B6A  0012               	return	
  6190   000B6C                     l4811:
  6191                           
  6192                           ;TAD_MENU.c: 147:             if (!TM_IsKeyPressed()) {
  6193   000B6C  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  6194   000B70  0900               	iorlw	0
  6195   000B72  A4D8               	btfss	status,2,c
  6196   000B74  0012               	return	
  6197   000B76  D7F8               	goto	u3560
  6198   000B78                     l4815:
  6199                           
  6200                           ;TAD_MENU.c: 152:             TM_GetTecla(&key);
  6201   000B78  0E4F               	movlw	low _key@TAD_MENU$F1730
  6202   000B7A  6E52               	movwf	TM_GetTecla@c^0,c
  6203   000B7C  ECFC  F00E         	call	_TM_GetTecla	;wreg free
  6204                           
  6205                           ;TAD_MENU.c: 153:             if (someone && key >= '1' && key <= '6') {
  6206   000B80  5018               	movf	_someone^0,w,c
  6207   000B82  B4D8               	btfsc	status,2,c
  6208   000B84  D00A               	goto	l915
  6209   000B86  0E30               	movlw	48
  6210   000B88  644F               	cpfsgt	_key@TAD_MENU$F1730^0,c
  6211   000B8A  D007               	goto	l915
  6212   000B8C  0E37               	movlw	55
  6213   000B8E  604F               	cpfslt	_key@TAD_MENU$F1730^0,c
  6214   000B90  D004               	goto	l915
  6215                           
  6216                           ;TAD_MENU.c: 154:                 quinLed = key - '0' - 1;
  6217   000B92  504F               	movf	_key@TAD_MENU$F1730^0,w,c
  6218   000B94  0FCF               	addlw	207
  6219   000B96  6E16               	movwf	_quinLed^0,c
  6220   000B98  D7E7               	goto	u3560
  6221   000B9A                     l915:
  6222                           
  6223                           ;TAD_MENU.c: 157:                 state_setIntensity = 0;
  6224   000B9A  6A14               	clrf	_state_setIntensity^0,c
  6225   000B9C  0012               	return	
  6226   000B9E                     l4827:
  6227                           
  6228                           ;TAD_MENU.c: 161:             if (TM_IsKeyPressed()) {
  6229   000B9E  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  6230   000BA2  D7DF               	goto	L17
  6231   000BA4                     l4831:
  6232                           
  6233                           ;TAD_MENU.c: 166:             if (!TM_IsKeyPressed()) {
  6234   000BA4  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  6235   000BA8  D7E3               	goto	L13
  6236   000BAA                     l4835:
  6237                           
  6238                           ;TAD_MENU.c: 171:             TM_GetTecla(&key);
  6239   000BAA  0E4F               	movlw	low _key@TAD_MENU$F1730
  6240   000BAC  6E52               	movwf	TM_GetTecla@c^0,c
  6241   000BAE  ECFC  F00E         	call	_TM_GetTecla	;wreg free
  6242                           
  6243                           ;TAD_MENU.c: 172:             if (someone && ((key >= '0' && key <= '9') || key == '*'))
      +                           {
  6244   000BB2  5018               	movf	_someone^0,w,c
  6245   000BB4  B4D8               	btfsc	status,2,c
  6246   000BB6  0012               	return	
  6247   000BB8  0E2F               	movlw	47
  6248   000BBA  644F               	cpfsgt	_key@TAD_MENU$F1730^0,c
  6249   000BBC  D003               	goto	u3650
  6250   000BBE  0E39               	movlw	57
  6251   000BC0  644F               	cpfsgt	_key@TAD_MENU$F1730^0,c
  6252   000BC2  D004               	goto	u3660
  6253   000BC4                     u3650:
  6254   000BC4  0E2A               	movlw	42
  6255   000BC6  184F               	xorwf	_key@TAD_MENU$F1730^0,w,c
  6256   000BC8  A4D8               	btfss	status,2,c
  6257   000BCA  0012               	return	
  6258   000BCC                     u3660:
  6259                           
  6260                           ;TAD_MENU.c: 173:                 quinaIntensitat = (key == '*') ? 10 : key - '0';
  6261   000BCC  0E2A               	movlw	42
  6262   000BCE  184F               	xorwf	_key@TAD_MENU$F1730^0,w,c
  6263   000BD0  B4D8               	btfsc	status,2,c
  6264   000BD2  D007               	goto	l4849
  6265   000BD4  0ED0               	movlw	208
  6266   000BD6  244F               	addwf	_key@TAD_MENU$F1730^0,w,c
  6267   000BD8  6E54               	movwf	_MENU_MotorHandleSetIntensity$1751^0,c
  6268   000BDA  6A55               	clrf	(_MENU_MotorHandleSetIntensity$1751+1)^0,c
  6269   000BDC  0EFF               	movlw	255
  6270   000BDE  2255               	addwfc	(_MENU_MotorHandleSetIntensity$1751+1)^0,f,c
  6271   000BE0  D004               	goto	l4851
  6272   000BE2                     l4849:
  6273   000BE2  0E00               	movlw	0
  6274   000BE4  6E55               	movwf	(_MENU_MotorHandleSetIntensity$1751+1)^0,c
  6275   000BE6  0E0A               	movlw	10
  6276   000BE8  6E54               	movwf	_MENU_MotorHandleSetIntensity$1751^0,c
  6277   000BEA                     l4851:
  6278   000BEA  C054  F015         	movff	_MENU_MotorHandleSetIntensity$1751,_quinaIntensitat
  6279                           
  6280                           ;TAD_MENU.c: 174:                 leds_saved[INDEX_CURRENT][quinLed] = quinaIntensitat;
  6281   000BEE  5013               	movf	_INDEX_CURRENT^0,w,c
  6282   000BF0  0D06               	mullw	6
  6283   000BF2  50F3               	movf	243,w,c
  6284   000BF4  0FDC               	addlw	low _leds_saved@TAD_MENU$F1708
  6285   000BF6  2416               	addwf	_quinLed^0,w,c
  6286   000BF8  6ED9               	movwf	fsr2l,c
  6287   000BFA  6ADA               	clrf	fsr2h,c
  6288   000BFC  C015  FFDF         	movff	_quinaIntensitat,indf2
  6289                           
  6290                           ;TAD_MENU.c: 175:                 LEDS_CURRENT[quinLed] = quinaIntensitat;
  6291   000C00  5016               	movf	_quinLed^0,w,c
  6292   000C02  0F01               	addlw	low _LEDS_CURRENT
  6293   000C04  6ED9               	movwf	fsr2l,c
  6294   000C06  6ADA               	clrf	fsr2h,c
  6295   000C08  C015  FFDF         	movff	_quinaIntensitat,indf2
  6296                           
  6297                           ;TAD_MENU.c: 176:                 LEDS_setIntensitat(quinLed, quinaIntensitat);
  6298   000C0C  C015  F052         	movff	_quinaIntensitat,LEDS_setIntensitat@valor
  6299   000C10  5016               	movf	_quinLed^0,w,c
  6300   000C12  ECD9  F00E         	call	_LEDS_setIntensitat
  6301                           
  6302                           ;TAD_MENU.c: 177:                 state_setIntensity = 0;
  6303   000C16  6A14               	clrf	_state_setIntensity^0,c
  6304                           
  6305                           ;TAD_MENU.c: 178:                 actualitzar_lcd = 1;
  6306   000C18  0E01               	movlw	1
  6307   000C1A  6E17               	movwf	_actualitzar_lcd^0,c
  6308   000C1C  0012               	return	
  6309   000C1E                     l4865:
  6310   000C1E  5014               	movf	_state_setIntensity^0,w,c
  6311                           
  6312                           ; Switch size 1, requested type "simple"
  6313                           ; Number of cases is 6, Range of values is 0 to 5
  6314                           ; switch strategies available:
  6315                           ; Name         Instructions Cycles
  6316                           ; simple_byte           19    10 (average)
  6317                           ;	Chosen strategy is simple_byte
  6318   000C20  0A00               	xorlw	0	; case 0
  6319   000C22  B4D8               	btfsc	status,2,c
  6320   000C24  D79C               	goto	l4807
  6321   000C26  0A01               	xorlw	1	; case 1
  6322   000C28  B4D8               	btfsc	status,2,c
  6323   000C2A  D7A0               	goto	l4811
  6324   000C2C  0A03               	xorlw	3	; case 2
  6325   000C2E  B4D8               	btfsc	status,2,c
  6326   000C30  D7A3               	goto	l4815
  6327   000C32  0A01               	xorlw	1	; case 3
  6328   000C34  B4D8               	btfsc	status,2,c
  6329   000C36  D7B3               	goto	l4827
  6330   000C38  0A07               	xorlw	7	; case 4
  6331   000C3A  B4D8               	btfsc	status,2,c
  6332   000C3C  D7B3               	goto	l4831
  6333   000C3E  0A01               	xorlw	1	; case 5
  6334   000C40  A4D8               	btfss	status,2,c
  6335   000C42  0012               	return	
  6336   000C44  D7B2               	goto	l4835
  6337   000C46                     __end_of_MENU_MotorHandleSetIntensity:
  6338                           	callstack 0
  6339                           
  6340 ;; *************** function _MENU_MotorHandleHash *****************
  6341 ;; Defined at:
  6342 ;;		line 95 in file "TAD_MENU.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  j               2   15[COMRAM] int 
  6347 ;;  i               2   13[COMRAM] int 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      void 
  6350 ;; Registers used:
  6351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1
  6357 ;;      Params:         0       0       0
  6358 ;;      Locals:         4       0       0
  6359 ;;      Temps:          0       0       0
  6360 ;;      Totals:         4       0       0
  6361 ;;Total ram usage:        4 bytes
  6362 ;; Hardware stack levels used: 1
  6363 ;; Hardware stack levels required when called: 4
  6364 ;; This function calls:
  6365 ;;		_TI_GetTics
  6366 ;;		_TI_ResetTics
  6367 ;;		_TM_GetTecla
  6368 ;;		_TM_IsKeyPressed
  6369 ;; This function is called by:
  6370 ;;		_main
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text25
  6375   000C46                     __ptext25:
  6376                           	callstack 0
  6377   000C46                     _MENU_MotorHandleHash:
  6378                           	callstack 26
  6379                           
  6380                           ;TAD_MENU.c: 96:     static unsigned char state_hash = 0;;TAD_MENU.c: 97:     static uns
      +                          igned char bug_timer = 0;;TAD_MENU.c: 99:     switch(state_hash) {
  6381                           
  6382                           ;incstack = 0
  6383   000C46  D061               	goto	l4737
  6384   000C48                     l4677:
  6385                           
  6386                           ;TAD_MENU.c: 101:             if(TM_IsKeyPressed()) {
  6387   000C48  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  6388   000C4C  0900               	iorlw	0
  6389   000C4E  B4D8               	btfsc	status,2,c
  6390   000C50  0012               	return	
  6391                           
  6392                           ;TAD_MENU.c: 102:                 TI_ResetTics(TimerHash);
  6393   000C52  504E               	movf	_TimerHash^0,w,c
  6394   000C54  EC66  F00E         	call	_TI_ResetTics
  6395   000C58                     l4681:
  6396                           
  6397                           ;TAD_MENU.c: 103:                 state_hash++;
  6398   000C58  2A12               	incf	MENU_MotorHandleHash@state_hash^0,f,c
  6399   000C5A  0012               	return	
  6400   000C5C                     l4683:
  6401                           
  6402                           ;TAD_MENU.c: 108:             if(TI_GetTics(TimerHash) >= 500 ) {
  6403   000C5C  504E               	movf	_TimerHash^0,w,c
  6404   000C5E  EC92  F00C         	call	_TI_GetTics
  6405   000C62  5055               	movf	(?_TI_GetTics+3)^0,w,c
  6406   000C64  1054               	iorwf	(?_TI_GetTics+2)^0,w,c
  6407   000C66  E106               	bnz	u3440
  6408   000C68  0EF4               	movlw	244
  6409   000C6A  5C52               	subwf	?_TI_GetTics^0,w,c
  6410   000C6C  0E01               	movlw	1
  6411   000C6E  5853               	subwfb	(?_TI_GetTics+1)^0,w,c
  6412   000C70  A0D8               	btfss	status,0,c
  6413   000C72  D004               	goto	l4689
  6414   000C74                     u3440:
  6415                           
  6416                           ;TAD_MENU.c: 109:                 TI_ResetTics(TimerHash);
  6417   000C74  504E               	movf	_TimerHash^0,w,c
  6418   000C76  EC66  F00E         	call	_TI_ResetTics
  6419                           
  6420                           ;TAD_MENU.c: 110:                 bug_timer++;
  6421   000C7A  2A11               	incf	MENU_MotorHandleHash@bug_timer^0,f,c
  6422   000C7C                     l4689:
  6423                           
  6424                           ;TAD_MENU.c: 112:             if(!TM_IsKeyPressed()) {
  6425   000C7C  ECBE  F00E         	call	_TM_IsKeyPressed	;wreg free
  6426   000C80  0900               	iorlw	0
  6427   000C82  A4D8               	btfss	status,2,c
  6428   000C84  0012               	return	
  6429                           
  6430                           ;TAD_MENU.c: 113:                 TM_GetTecla(&key);
  6431   000C86  0E4F               	movlw	low _key@TAD_MENU$F1730
  6432   000C88  6E52               	movwf	TM_GetTecla@c^0,c
  6433   000C8A  ECFC  F00E         	call	_TM_GetTecla	;wreg free
  6434                           
  6435                           ;TAD_MENU.c: 114:                 if (key == '#') {
  6436   000C8E  0E23               	movlw	35
  6437   000C90  184F               	xorwf	_key@TAD_MENU$F1730^0,w,c
  6438   000C92  B4D8               	btfsc	status,2,c
  6439   000C94  D7E1               	goto	l4681
  6440                           
  6441                           ;TAD_MENU.c: 117:                     state_hash--;
  6442   000C96  0612               	decf	MENU_MotorHandleHash@state_hash^0,f,c
  6443   000C98  0012               	return	
  6444   000C9A                     l4699:
  6445                           
  6446                           ;TAD_MENU.c: 122:             if(bug_timer < 3) {
  6447   000C9A  0E03               	movlw	3
  6448   000C9C  6011               	cpfslt	MENU_MotorHandleHash@bug_timer^0,c
  6449   000C9E  D004               	goto	l4705
  6450                           
  6451                           ;TAD_MENU.c: 123:                 hash_less_3s = 1;
  6452   000CA0  0E01               	movlw	1
  6453   000CA2  6E1F               	movwf	_hash_less_3s^0,c
  6454                           
  6455                           ;TAD_MENU.c: 124:                 state_main_motor = 0;
  6456   000CA4  6A23               	clrf	_state_main_motor^0,c
  6457                           
  6458                           ;TAD_MENU.c: 125:             } else {
  6459   000CA6  D02E               	goto	l4733
  6460   000CA8                     l4705:
  6461                           
  6462                           ;TAD_MENU.c: 126:                 for(int i = 0; i < 6; i++) {
  6463   000CA8  0E00               	movlw	0
  6464   000CAA  6E60               	movwf	(MENU_MotorHandleHash@i+1)^0,c
  6465   000CAC  0E00               	movlw	0
  6466   000CAE  6E5F               	movwf	MENU_MotorHandleHash@i^0,c
  6467   000CB0                     l4711:
  6468                           
  6469                           ;TAD_MENU.c: 127:                     for (int j = 0; j < 6; j++) {
  6470   000CB0  0E00               	movlw	0
  6471   000CB2  6E62               	movwf	(MENU_MotorHandleHash@j+1)^0,c
  6472   000CB4  0E00               	movlw	0
  6473   000CB6  6E61               	movwf	MENU_MotorHandleHash@j^0,c
  6474   000CB8                     l4717:
  6475                           
  6476                           ;TAD_MENU.c: 128:                         leds_saved[i][j] = 0;
  6477   000CB8  505F               	movf	MENU_MotorHandleHash@i^0,w,c
  6478   000CBA  0D06               	mullw	6
  6479   000CBC  50F3               	movf	243,w,c
  6480   000CBE  0FDC               	addlw	low _leds_saved@TAD_MENU$F1708
  6481   000CC0  2461               	addwf	MENU_MotorHandleHash@j^0,w,c
  6482   000CC2  6ED9               	movwf	fsr2l,c
  6483   000CC4  6ADA               	clrf	fsr2h,c
  6484   000CC6  6ADF               	clrf	indf2,c
  6485                           
  6486                           ;TAD_MENU.c: 129:                         LEDS_CURRENT[j] = 0;
  6487   000CC8  5061               	movf	MENU_MotorHandleHash@j^0,w,c
  6488   000CCA  0F01               	addlw	low _LEDS_CURRENT
  6489   000CCC  6ED9               	movwf	fsr2l,c
  6490   000CCE  6ADA               	clrf	fsr2h,c
  6491   000CD0  6ADF               	clrf	indf2,c
  6492                           
  6493                           ;TAD_MENU.c: 130:                     }
  6494   000CD2  4A61               	infsnz	MENU_MotorHandleHash@j^0,f,c
  6495   000CD4  2A62               	incf	(MENU_MotorHandleHash@j+1)^0,f,c
  6496   000CD6  BE62               	btfsc	(MENU_MotorHandleHash@j+1)^0,7,c
  6497   000CD8  D7EF               	goto	l4717
  6498   000CDA  5062               	movf	(MENU_MotorHandleHash@j+1)^0,w,c
  6499   000CDC  E104               	bnz	u3480
  6500   000CDE  0E06               	movlw	6
  6501   000CE0  5C61               	subwf	MENU_MotorHandleHash@j^0,w,c
  6502   000CE2  A0D8               	btfss	status,0,c
  6503   000CE4  D7E9               	goto	l4717
  6504   000CE6                     u3480:
  6505                           
  6506                           ;TAD_MENU.c: 131:                 }
  6507   000CE6  4A5F               	infsnz	MENU_MotorHandleHash@i^0,f,c
  6508   000CE8  2A60               	incf	(MENU_MotorHandleHash@i+1)^0,f,c
  6509   000CEA  BE60               	btfsc	(MENU_MotorHandleHash@i+1)^0,7,c
  6510   000CEC  D7E1               	goto	l4711
  6511   000CEE  5060               	movf	(MENU_MotorHandleHash@i+1)^0,w,c
  6512   000CF0  E104               	bnz	u3490
  6513   000CF2  0E06               	movlw	6
  6514   000CF4  5C5F               	subwf	MENU_MotorHandleHash@i^0,w,c
  6515   000CF6  A0D8               	btfss	status,0,c
  6516   000CF8  D7DB               	goto	l4711
  6517   000CFA                     u3490:
  6518                           
  6519                           ;TAD_MENU.c: 132:                 if (someone) actualitzar_lcd = 1;
  6520   000CFA  5018               	movf	_someone^0,w,c
  6521   000CFC  B4D8               	btfsc	status,2,c
  6522   000CFE  D002               	goto	l4733
  6523   000D00  0E01               	movlw	1
  6524   000D02  6E17               	movwf	_actualitzar_lcd^0,c
  6525   000D04                     l4733:
  6526                           
  6527                           ;TAD_MENU.c: 134:             state_hash = bug_timer = 0;
  6528   000D04  6A11               	clrf	MENU_MotorHandleHash@bug_timer^0,c
  6529   000D06  6A12               	clrf	MENU_MotorHandleHash@state_hash^0,c
  6530                           
  6531                           ;TAD_MENU.c: 135:             break;
  6532   000D08  0012               	return	
  6533   000D0A                     l4737:
  6534   000D0A  5012               	movf	MENU_MotorHandleHash@state_hash^0,w,c
  6535                           
  6536                           ; Switch size 1, requested type "simple"
  6537                           ; Number of cases is 3, Range of values is 0 to 2
  6538                           ; switch strategies available:
  6539                           ; Name         Instructions Cycles
  6540                           ; simple_byte           10     6 (average)
  6541                           ;	Chosen strategy is simple_byte
  6542   000D0C  0A00               	xorlw	0	; case 0
  6543   000D0E  B4D8               	btfsc	status,2,c
  6544   000D10  D79B               	goto	l4677
  6545   000D12  0A01               	xorlw	1	; case 1
  6546   000D14  B4D8               	btfsc	status,2,c
  6547   000D16  D7A2               	goto	l4683
  6548   000D18  0A03               	xorlw	3	; case 2
  6549   000D1A  A4D8               	btfss	status,2,c
  6550   000D1C  0012               	return	
  6551   000D1E  D7BD               	goto	l4699
  6552   000D20                     __end_of_MENU_MotorHandleHash:
  6553                           	callstack 0
  6554                           
  6555 ;; *************** function _TM_IsKeyPressed *****************
  6556 ;; Defined at:
  6557 ;;		line 111 in file "TAD_TECLATMATRIU.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      unsigned char 
  6564 ;; Registers used:
  6565 ;;		wreg, status,2
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1
  6571 ;;      Params:         0       0       0
  6572 ;;      Locals:         1       0       0
  6573 ;;      Temps:          0       0       0
  6574 ;;      Totals:         1       0       0
  6575 ;;Total ram usage:        1 bytes
  6576 ;; Hardware stack levels used: 1
  6577 ;; Hardware stack levels required when called: 3
  6578 ;; This function calls:
  6579 ;;		Nothing
  6580 ;; This function is called by:
  6581 ;;		_TM_Motor
  6582 ;;		_MENU_MotorHandleHash
  6583 ;;		_MENU_MotorHandleSetIntensity
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text26
  6588   001D7C                     __ptext26:
  6589                           	callstack 0
  6590   001D7C                     _TM_IsKeyPressed:
  6591                           	callstack 26
  6592                           
  6593                           ;TAD_TECLATMATRIU.c: 112:     return (PORTDbits.RD2 || PORTDbits.RD1 || PORTCbits.RC4);
  6594                           
  6595                           ;incstack = 0
  6596   001D7C  0E01               	movlw	1
  6597   001D7E  6E52               	movwf	_TM_IsKeyPressed$1388^0,c
  6598   001D80  A483               	btfss	131,2,c	;volatile
  6599   001D82  B283               	btfsc	131,1,c	;volatile
  6600   001D84  D002               	goto	l4381
  6601   001D86  A882               	btfss	130,4,c	;volatile
  6602   001D88  6A52               	clrf	_TM_IsKeyPressed$1388^0,c
  6603   001D8A                     l4381:
  6604   001D8A  5052               	movf	_TM_IsKeyPressed$1388^0,w,c
  6605   001D8C  0012               	return		;funcret
  6606   001D8E                     __end_of_TM_IsKeyPressed:
  6607                           	callstack 0
  6608                           
  6609 ;; *************** function _TM_GetTecla *****************
  6610 ;; Defined at:
  6611 ;;		line 106 in file "TAD_TECLATMATRIU.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  c               1    0[COMRAM] PTR unsigned char 
  6614 ;;		 -> key@TAD_MENU$F1730(1), 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		wreg, fsr2l, fsr2h, status,2
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1
  6626 ;;      Params:         1       0       0
  6627 ;;      Locals:         0       0       0
  6628 ;;      Temps:          0       0       0
  6629 ;;      Totals:         1       0       0
  6630 ;;Total ram usage:        1 bytes
  6631 ;; Hardware stack levels used: 1
  6632 ;; Hardware stack levels required when called: 3
  6633 ;; This function calls:
  6634 ;;		Nothing
  6635 ;; This function is called by:
  6636 ;;		_MENU_MotorHandleHash
  6637 ;;		_MENU_MotorHandleSetIntensity
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text27
  6642   001DF8                     __ptext27:
  6643                           	callstack 0
  6644   001DF8                     _TM_GetTecla:
  6645                           	callstack 26
  6646                           
  6647                           ;TAD_TECLATMATRIU.c: 107:     *c = key;
  6648                           
  6649                           ;incstack = 0
  6650   001DF8  5052               	movf	TM_GetTecla@c^0,w,c
  6651   001DFA  6ED9               	movwf	fsr2l,c
  6652   001DFC  6ADA               	clrf	fsr2h,c
  6653   001DFE  C028  FFDF         	movff	_key,indf2
  6654   001E02  0012               	return		;funcret
  6655   001E04                     __end_of_TM_GetTecla:
  6656                           	callstack 0
  6657                           
  6658 ;; *************** function _MENU_MotorActualitzarLCD *****************
  6659 ;; Defined at:
  6660 ;;		line 185 in file "TAD_MENU.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;		None
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;		None
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1
  6674 ;;      Params:         0       0       0
  6675 ;;      Locals:         0       0       0
  6676 ;;      Temps:          0       0       0
  6677 ;;      Totals:         0       0       0
  6678 ;;Total ram usage:        0 bytes
  6679 ;; Hardware stack levels used: 1
  6680 ;; Hardware stack levels required when called: 8
  6681 ;; This function calls:
  6682 ;;		_printLCD
  6683 ;; This function is called by:
  6684 ;;		_main
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text28
  6689   001DD2                     __ptext28:
  6690                           	callstack 0
  6691   001DD2                     _MENU_MotorActualitzarLCD:
  6692                           	callstack 22
  6693                           
  6694                           ;TAD_MENU.c: 186:     if(actualitzar_lcd) {
  6695                           
  6696                           ;incstack = 0
  6697   001DD2  5017               	movf	_actualitzar_lcd^0,w,c
  6698   001DD4  B4D8               	btfsc	status,2,c
  6699   001DD6  0012               	return	
  6700                           
  6701                           ;TAD_MENU.c: 187:         actualitzar_lcd = 0;
  6702   001DD8  6A17               	clrf	_actualitzar_lcd^0,c
  6703                           
  6704                           ;TAD_MENU.c: 188:         printLCD();
  6705   001DDA  ECD6  F001         	call	_printLCD	;wreg free
  6706   001DDE  0012               	return		;funcret
  6707   001DE0                     __end_of_MENU_MotorActualitzarLCD:
  6708                           	callstack 0
  6709                           
  6710 ;; *************** function _printLCD *****************
  6711 ;; Defined at:
  6712 ;;		line 444 in file "TAD_MENU.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;		None
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      void 
  6719 ;; Registers used:
  6720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1
  6726 ;;      Params:         0       0       0
  6727 ;;      Locals:        12       0       0
  6728 ;;      Temps:          0       0       0
  6729 ;;      Totals:        12       0       0
  6730 ;;Total ram usage:       12 bytes
  6731 ;; Hardware stack levels used: 1
  6732 ;; Hardware stack levels required when called: 7
  6733 ;; This function calls:
  6734 ;;		_LcClear
  6735 ;;		_LcGotoXY
  6736 ;;		_LcPutChar
  6737 ;;		_findLastLetterUID
  6738 ;; This function is called by:
  6739 ;;		_MENU_MotorActualitzarLCD
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text29
  6744   0003AC                     __ptext29:
  6745                           	callstack 0
  6746   0003AC                     _printLCD:
  6747                           	callstack 22
  6748                           
  6749                           ;TAD_MENU.c: 447:     LcClear();
  6750                           
  6751                           ;incstack = 0
  6752   0003AC  EC85  F00E         	call	_LcClear	;wreg free
  6753                           
  6754                           ;TAD_MENU.c: 449:     LcGotoXY(0, 0);
  6755   0003B0  0E00               	movlw	0
  6756   0003B2  6E60               	movwf	LcGotoXY@Row^0,c
  6757   0003B4  0E00               	movlw	0
  6758   0003B6  ECDA  F008         	call	_LcGotoXY
  6759                           
  6760                           ;TAD_MENU.c: 450:     LcPutChar(findLastLetterUID(UID_CURRENT)); LcPutChar(' ');
  6761   0003BA  0EC1               	movlw	low _UID_CURRENT
  6762   0003BC  6E52               	movwf	findLastLetterUID@UID^0,c
  6763   0003BE  EC43  F00C         	call	_findLastLetterUID	;wreg free
  6764   0003C2  ECB9  F00A         	call	_LcPutChar
  6765   0003C6  0E20               	movlw	32
  6766   0003C8  ECB9  F00A         	call	_LcPutChar
  6767                           
  6768                           ;TAD_MENU.c: 451:     LcPutChar(hora_h + '0'); LcPutChar(hora_l + '0');
  6769   0003CC  501D               	movf	_hora_h^0,w,c
  6770   0003CE  0F30               	addlw	48
  6771   0003D0  ECB9  F00A         	call	_LcPutChar
  6772   0003D4  501C               	movf	_hora_l^0,w,c
  6773   0003D6  0F30               	addlw	48
  6774   0003D8  ECB9  F00A         	call	_LcPutChar
  6775                           
  6776                           ;TAD_MENU.c: 452:     LcPutChar(':');
  6777   0003DC  0E3A               	movlw	58
  6778   0003DE  ECB9  F00A         	call	_LcPutChar
  6779                           
  6780                           ;TAD_MENU.c: 453:     LcPutChar(minuts_h + '0'); LcPutChar(minuts_l + '0');
  6781   0003E2  501B               	movf	_minuts_h^0,w,c
  6782   0003E4  0F30               	addlw	48
  6783   0003E6  ECB9  F00A         	call	_LcPutChar
  6784   0003EA  501A               	movf	_minuts_l^0,w,c
  6785   0003EC  0F30               	addlw	48
  6786   0003EE  ECB9  F00A         	call	_LcPutChar
  6787                           
  6788                           ;TAD_MENU.c: 454:     LcPutChar(' ');
  6789   0003F2  0E20               	movlw	32
  6790   0003F4  ECB9  F00A         	call	_LcPutChar
  6791                           
  6792                           ;TAD_MENU.c: 455:     LcPutChar('1'); LcPutChar('-');
  6793   0003F8  0E31               	movlw	49
  6794   0003FA  ECB9  F00A         	call	_LcPutChar
  6795   0003FE  0E2D               	movlw	45
  6796   000400  ECB9  F00A         	call	_LcPutChar
  6797                           
  6798                           ;TAD_MENU.c: 456:     LcPutChar((LEDS_CURRENT[0] == 10) ? 'A' : (LEDS_CURRENT[0] + '0'))
      +                          ;
  6799   000404  0E0A               	movlw	10
  6800   000406  1801               	xorwf	_LEDS_CURRENT^0,w,c
  6801   000408  B4D8               	btfsc	status,2,c
  6802   00040A  D007               	goto	l4483
  6803   00040C  0E30               	movlw	48
  6804   00040E  2401               	addwf	_LEDS_CURRENT^0,w,c
  6805   000410  6E69               	movwf	_printLCD$1809^0,c
  6806   000412  6A6A               	clrf	(_printLCD$1809+1)^0,c
  6807   000414  0E00               	movlw	0
  6808   000416  226A               	addwfc	(_printLCD$1809+1)^0,f,c
  6809   000418  D004               	goto	l4485
  6810   00041A                     l4483:
  6811   00041A  0E00               	movlw	0
  6812   00041C  6E6A               	movwf	(_printLCD$1809+1)^0,c
  6813   00041E  0E41               	movlw	65
  6814   000420  6E69               	movwf	_printLCD$1809^0,c
  6815   000422                     l4485:
  6816   000422  5069               	movf	_printLCD$1809^0,w,c
  6817   000424  ECB9  F00A         	call	_LcPutChar
  6818                           
  6819                           ;TAD_MENU.c: 457:     LcPutChar(' ');
  6820   000428  0E20               	movlw	32
  6821   00042A  ECB9  F00A         	call	_LcPutChar
  6822                           
  6823                           ;TAD_MENU.c: 458:     LcPutChar('2'); LcPutChar('-');
  6824   00042E  0E32               	movlw	50
  6825   000430  ECB9  F00A         	call	_LcPutChar
  6826   000434  0E2D               	movlw	45
  6827   000436  ECB9  F00A         	call	_LcPutChar
  6828                           
  6829                           ;TAD_MENU.c: 459:     LcPutChar((LEDS_CURRENT[1] == 10) ? 'A' : (LEDS_CURRENT[1] + '0'))
      +                          ;
  6830   00043A  0E0A               	movlw	10
  6831   00043C  1802               	xorwf	(_LEDS_CURRENT+1)^0,w,c
  6832   00043E  B4D8               	btfsc	status,2,c
  6833   000440  D007               	goto	l4497
  6834   000442  0E30               	movlw	48
  6835   000444  2402               	addwf	(_LEDS_CURRENT+1)^0,w,c
  6836   000446  6E6B               	movwf	_printLCD$1810^0,c
  6837   000448  6A6C               	clrf	(_printLCD$1810+1)^0,c
  6838   00044A  0E00               	movlw	0
  6839   00044C  226C               	addwfc	(_printLCD$1810+1)^0,f,c
  6840   00044E  D004               	goto	l4499
  6841   000450                     l4497:
  6842   000450  0E00               	movlw	0
  6843   000452  6E6C               	movwf	(_printLCD$1810+1)^0,c
  6844   000454  0E41               	movlw	65
  6845   000456  6E6B               	movwf	_printLCD$1810^0,c
  6846   000458                     l4499:
  6847   000458  506B               	movf	_printLCD$1810^0,w,c
  6848   00045A  ECB9  F00A         	call	_LcPutChar
  6849                           
  6850                           ;TAD_MENU.c: 461:     LcGotoXY(0, 1);
  6851   00045E  0E01               	movlw	1
  6852   000460  6E60               	movwf	LcGotoXY@Row^0,c
  6853   000462  0E00               	movlw	0
  6854   000464  ECDA  F008         	call	_LcGotoXY
  6855                           
  6856                           ;TAD_MENU.c: 462:     LcPutChar('3'); LcPutChar('-');
  6857   000468  0E33               	movlw	51
  6858   00046A  ECB9  F00A         	call	_LcPutChar
  6859   00046E  0E2D               	movlw	45
  6860   000470  ECB9  F00A         	call	_LcPutChar
  6861                           
  6862                           ;TAD_MENU.c: 463:     LcPutChar((LEDS_CURRENT[2] == 10) ? 'A' : (LEDS_CURRENT[2] + '0'))
      +                          ;
  6863   000474  0E0A               	movlw	10
  6864   000476  1803               	xorwf	(_LEDS_CURRENT+2)^0,w,c
  6865   000478  B4D8               	btfsc	status,2,c
  6866   00047A  D007               	goto	l4511
  6867   00047C  0E30               	movlw	48
  6868   00047E  2403               	addwf	(_LEDS_CURRENT+2)^0,w,c
  6869   000480  6E6D               	movwf	_printLCD$1811^0,c
  6870   000482  6A6E               	clrf	(_printLCD$1811+1)^0,c
  6871   000484  0E00               	movlw	0
  6872   000486  226E               	addwfc	(_printLCD$1811+1)^0,f,c
  6873   000488  D004               	goto	l4513
  6874   00048A                     l4511:
  6875   00048A  0E00               	movlw	0
  6876   00048C  6E6E               	movwf	(_printLCD$1811+1)^0,c
  6877   00048E  0E41               	movlw	65
  6878   000490  6E6D               	movwf	_printLCD$1811^0,c
  6879   000492                     l4513:
  6880   000492  506D               	movf	_printLCD$1811^0,w,c
  6881   000494  ECB9  F00A         	call	_LcPutChar
  6882                           
  6883                           ;TAD_MENU.c: 464:     LcPutChar(' ');
  6884   000498  0E20               	movlw	32
  6885   00049A  ECB9  F00A         	call	_LcPutChar
  6886                           
  6887                           ;TAD_MENU.c: 465:     LcPutChar('4'); LcPutChar('-');
  6888   00049E  0E34               	movlw	52
  6889   0004A0  ECB9  F00A         	call	_LcPutChar
  6890   0004A4  0E2D               	movlw	45
  6891   0004A6  ECB9  F00A         	call	_LcPutChar
  6892                           
  6893                           ;TAD_MENU.c: 466:     LcPutChar((LEDS_CURRENT[3] == 10) ? 'A' : (LEDS_CURRENT[3] + '0'))
      +                          ;
  6894   0004AA  0E0A               	movlw	10
  6895   0004AC  1804               	xorwf	(_LEDS_CURRENT+3)^0,w,c
  6896   0004AE  B4D8               	btfsc	status,2,c
  6897   0004B0  D007               	goto	l4525
  6898   0004B2  0E30               	movlw	48
  6899   0004B4  2404               	addwf	(_LEDS_CURRENT+3)^0,w,c
  6900   0004B6  6E6F               	movwf	_printLCD$1812^0,c
  6901   0004B8  6A70               	clrf	(_printLCD$1812+1)^0,c
  6902   0004BA  0E00               	movlw	0
  6903   0004BC  2270               	addwfc	(_printLCD$1812+1)^0,f,c
  6904   0004BE  D004               	goto	l4527
  6905   0004C0                     l4525:
  6906   0004C0  0E00               	movlw	0
  6907   0004C2  6E70               	movwf	(_printLCD$1812+1)^0,c
  6908   0004C4  0E41               	movlw	65
  6909   0004C6  6E6F               	movwf	_printLCD$1812^0,c
  6910   0004C8                     l4527:
  6911   0004C8  506F               	movf	_printLCD$1812^0,w,c
  6912   0004CA  ECB9  F00A         	call	_LcPutChar
  6913                           
  6914                           ;TAD_MENU.c: 467:     LcPutChar(' ');
  6915   0004CE  0E20               	movlw	32
  6916   0004D0  ECB9  F00A         	call	_LcPutChar
  6917                           
  6918                           ;TAD_MENU.c: 468:     LcPutChar('5'); LcPutChar('-');
  6919   0004D4  0E35               	movlw	53
  6920   0004D6  ECB9  F00A         	call	_LcPutChar
  6921   0004DA  0E2D               	movlw	45
  6922   0004DC  ECB9  F00A         	call	_LcPutChar
  6923                           
  6924                           ;TAD_MENU.c: 469:     LcPutChar((LEDS_CURRENT[4] == 10) ? 'A' : (LEDS_CURRENT[4] + '0'))
      +                          ;
  6925   0004E0  0E0A               	movlw	10
  6926   0004E2  1805               	xorwf	(_LEDS_CURRENT+4)^0,w,c
  6927   0004E4  B4D8               	btfsc	status,2,c
  6928   0004E6  D007               	goto	l4539
  6929   0004E8  0E30               	movlw	48
  6930   0004EA  2405               	addwf	(_LEDS_CURRENT+4)^0,w,c
  6931   0004EC  6E71               	movwf	_printLCD$1813^0,c
  6932   0004EE  6A72               	clrf	(_printLCD$1813+1)^0,c
  6933   0004F0  0E00               	movlw	0
  6934   0004F2  2272               	addwfc	(_printLCD$1813+1)^0,f,c
  6935   0004F4  D004               	goto	l4541
  6936   0004F6                     l4539:
  6937   0004F6  0E00               	movlw	0
  6938   0004F8  6E72               	movwf	(_printLCD$1813+1)^0,c
  6939   0004FA  0E41               	movlw	65
  6940   0004FC  6E71               	movwf	_printLCD$1813^0,c
  6941   0004FE                     l4541:
  6942   0004FE  5071               	movf	_printLCD$1813^0,w,c
  6943   000500  ECB9  F00A         	call	_LcPutChar
  6944                           
  6945                           ;TAD_MENU.c: 470:     LcPutChar(' ');
  6946   000504  0E20               	movlw	32
  6947   000506  ECB9  F00A         	call	_LcPutChar
  6948                           
  6949                           ;TAD_MENU.c: 471:     LcPutChar('6'); LcPutChar('-');
  6950   00050A  0E36               	movlw	54
  6951   00050C  ECB9  F00A         	call	_LcPutChar
  6952   000510  0E2D               	movlw	45
  6953   000512  ECB9  F00A         	call	_LcPutChar
  6954                           
  6955                           ;TAD_MENU.c: 472:     LcPutChar((LEDS_CURRENT[5] == 10) ? 'A' : (LEDS_CURRENT[5] + '0'))
      +                          ;
  6956   000516  0E0A               	movlw	10
  6957   000518  1806               	xorwf	(_LEDS_CURRENT+5)^0,w,c
  6958   00051A  B4D8               	btfsc	status,2,c
  6959   00051C  D007               	goto	l4553
  6960   00051E  0E30               	movlw	48
  6961   000520  2406               	addwf	(_LEDS_CURRENT+5)^0,w,c
  6962   000522  6E73               	movwf	_printLCD$1814^0,c
  6963   000524  6A74               	clrf	(_printLCD$1814+1)^0,c
  6964   000526  0E00               	movlw	0
  6965   000528  2274               	addwfc	(_printLCD$1814+1)^0,f,c
  6966   00052A  D004               	goto	l4555
  6967   00052C                     l4553:
  6968   00052C  0E00               	movlw	0
  6969   00052E  6E74               	movwf	(_printLCD$1814+1)^0,c
  6970   000530  0E41               	movlw	65
  6971   000532  6E73               	movwf	_printLCD$1814^0,c
  6972   000534                     l4555:
  6973   000534  5073               	movf	_printLCD$1814^0,w,c
  6974   000536  ECB9  F00A         	call	_LcPutChar
  6975   00053A  0012               	return		;funcret
  6976   00053C                     __end_of_printLCD:
  6977                           	callstack 0
  6978                           
  6979 ;; *************** function _findLastLetterUID *****************
  6980 ;; Defined at:
  6981 ;;		line 428 in file "TAD_MENU.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  UID             1    0[COMRAM] PTR unsigned char 
  6984 ;;		 -> UID_CURRENT(5), 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  lowNibble       1    3[COMRAM] unsigned char 
  6987 ;;  highNibble      1    2[COMRAM] unsigned char 
  6988 ;;  i               2    4[COMRAM] int 
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      unsigned char 
  6991 ;; Registers used:
  6992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMRAM   BANK0   BANK1
  6998 ;;      Params:         1       0       0
  6999 ;;      Locals:         4       0       0
  7000 ;;      Temps:          1       0       0
  7001 ;;      Totals:         6       0       0
  7002 ;;Total ram usage:        6 bytes
  7003 ;; Hardware stack levels used: 1
  7004 ;; Hardware stack levels required when called: 3
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_printLCD
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text30
  7013   001886                     __ptext30:
  7014                           	callstack 0
  7015   001886                     _findLastLetterUID:
  7016                           	callstack 25
  7017                           
  7018                           ;TAD_MENU.c: 429:     for (int i = 4; i >= 0; i--) {
  7019                           
  7020                           ;incstack = 0
  7021   001886  0E00               	movlw	0
  7022   001888  6E57               	movwf	(findLastLetterUID@i+1)^0,c
  7023   00188A  0E04               	movlw	4
  7024   00188C  6E56               	movwf	findLastLetterUID@i^0,c
  7025   00188E                     l3947:
  7026                           
  7027                           ;TAD_MENU.c: 430:         unsigned char highNibble = (UID[i] >> 4) & 0x0F;
  7028   00188E  5052               	movf	findLastLetterUID@UID^0,w,c
  7029   001890  2456               	addwf	findLastLetterUID@i^0,w,c
  7030   001892  6ED9               	movwf	fsr2l,c
  7031   001894  6ADA               	clrf	fsr2h,c
  7032   001896  50DF               	movf	indf2,w,c
  7033   001898  6E53               	movwf	??_findLastLetterUID^0,c
  7034   00189A  3853               	swapf	??_findLastLetterUID^0,w,c
  7035   00189C  0B0F               	andlw	15
  7036   00189E  0B0F               	andlw	15
  7037   0018A0  6E54               	movwf	findLastLetterUID@highNibble^0,c
  7038                           
  7039                           ;TAD_MENU.c: 431:         unsigned char lowNibble = UID[i] & 0x0F;
  7040   0018A2  5052               	movf	findLastLetterUID@UID^0,w,c
  7041   0018A4  2456               	addwf	findLastLetterUID@i^0,w,c
  7042   0018A6  6ED9               	movwf	fsr2l,c
  7043   0018A8  6ADA               	clrf	fsr2h,c
  7044   0018AA  50DF               	movf	indf2,w,c
  7045   0018AC  0B0F               	andlw	15
  7046   0018AE  6E55               	movwf	findLastLetterUID@lowNibble^0,c
  7047                           
  7048                           ;TAD_MENU.c: 433:         if (lowNibble >= 10) {
  7049   0018B0  0E09               	movlw	9
  7050   0018B2  6455               	cpfsgt	findLastLetterUID@lowNibble^0,c
  7051   0018B4  D003               	goto	l3955
  7052                           
  7053                           ;TAD_MENU.c: 434:             return 'A' + (lowNibble - 10);
  7054   0018B6  5055               	movf	findLastLetterUID@lowNibble^0,w,c
  7055   0018B8  0F37               	addlw	55
  7056   0018BA  0012               	return	
  7057   0018BC                     l3955:
  7058                           
  7059                           ;TAD_MENU.c: 437:         if (highNibble >= 10) {
  7060   0018BC  0E09               	movlw	9
  7061   0018BE  6454               	cpfsgt	findLastLetterUID@highNibble^0,c
  7062   0018C0  D003               	goto	l3961
  7063                           
  7064                           ;TAD_MENU.c: 438:             return 'A' + (highNibble - 10);
  7065   0018C2  5054               	movf	findLastLetterUID@highNibble^0,w,c
  7066   0018C4  0F37               	addlw	55
  7067   0018C6  0012               	return	
  7068   0018C8                     l3961:
  7069                           
  7070                           ;TAD_MENU.c: 440:     }
  7071   0018C8  0656               	decf	findLastLetterUID@i^0,f,c
  7072   0018CA  A0D8               	btfss	status,0,c
  7073   0018CC  0657               	decf	(findLastLetterUID@i+1)^0,f,c
  7074   0018CE  AE57               	btfss	(findLastLetterUID@i+1)^0,7,c
  7075   0018D0  D7DE               	goto	l3947
  7076                           
  7077                           ;TAD_MENU.c: 441:     return '0';
  7078   0018D2  0E30               	movlw	48
  7079   0018D4  0012               	return		;funcret
  7080   0018D6                     __end_of_findLastLetterUID:
  7081                           	callstack 0
  7082                           
  7083 ;; *************** function _LcPutChar *****************
  7084 ;; Defined at:
  7085 ;;		line 165 in file "LcTLCD.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  c               1    wreg     unsigned char 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  c               1   22[COMRAM] unsigned char 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      void 
  7092 ;; Registers used:
  7093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1
  7099 ;;      Params:         0       0       0
  7100 ;;      Locals:         1       0       0
  7101 ;;      Temps:          0       0       0
  7102 ;;      Totals:         1       0       0
  7103 ;;Total ram usage:        1 bytes
  7104 ;; Hardware stack levels used: 1
  7105 ;; Hardware stack levels required when called: 6
  7106 ;; This function calls:
  7107 ;;		_CantaData
  7108 ;;		_LcGotoXY
  7109 ;;		_WaitForBusy
  7110 ;; This function is called by:
  7111 ;;		_printLCD
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           	psect	text31
  7116   001572                     __ptext31:
  7117                           	callstack 0
  7118   001572                     _LcPutChar:
  7119                           	callstack 22
  7120                           
  7121                           ;incstack = 0
  7122                           ;LcPutChar@c stored from wreg
  7123   001572  6E68               	movwf	LcPutChar@c^0,c
  7124                           
  7125                           ;LcTLCD.c: 175:  WaitForBusy(); CantaData(c);
  7126   001574  EC01  F00D         	call	_WaitForBusy	;wreg free
  7127   001578  5068               	movf	LcPutChar@c^0,w,c
  7128   00157A  EC97  F00D         	call	_CantaData
  7129                           
  7130                           ;LcTLCD.c: 177:  ++ColumnAct;
  7131   00157E  2A46               	incf	_ColumnAct^0,f,c
  7132                           
  7133                           ;LcTLCD.c: 178:  if (Rows == 3) {
  7134   001580  0E03               	movlw	3
  7135   001582  1849               	xorwf	_Rows^0,w,c
  7136   001584  A4D8               	btfss	status,2,c
  7137   001586  D00F               	goto	l3755
  7138                           
  7139                           ;LcTLCD.c: 179:   if (ColumnAct >= 20) {
  7140   001588  0E13               	movlw	19
  7141   00158A  6446               	cpfsgt	_ColumnAct^0,c
  7142   00158C  0012               	return	
  7143                           
  7144                           ;LcTLCD.c: 180:    ColumnAct = 0;
  7145   00158E  6A46               	clrf	_ColumnAct^0,c
  7146                           
  7147                           ;LcTLCD.c: 181:    if (++RowAct >= 4) RowAct = 0;
  7148   001590  2A47               	incf	_RowAct^0,f,c
  7149   001592  0E03               	movlw	3
  7150   001594  6447               	cpfsgt	_RowAct^0,c
  7151   001596  D001               	goto	l3753
  7152   001598  6A47               	clrf	_RowAct^0,c
  7153   00159A                     l3753:
  7154                           
  7155                           ;LcTLCD.c: 182:    LcGotoXY(ColumnAct, RowAct);
  7156   00159A  C047  F060         	movff	_RowAct,LcGotoXY@Row
  7157   00159E  5046               	movf	_ColumnAct^0,w,c
  7158   0015A0  ECDA  F008         	call	_LcGotoXY
  7159   0015A4  0012               	return	
  7160   0015A6                     l3755:
  7161                           
  7162                           ;LcTLCD.c: 185:  if (Rows == 2) {
  7163   0015A6  0E02               	movlw	2
  7164   0015A8  1849               	xorwf	_Rows^0,w,c
  7165   0015AA  A4D8               	btfss	status,2,c
  7166   0015AC  D00F               	goto	l3767
  7167                           
  7168                           ;LcTLCD.c: 186:   if (ColumnAct >= 40) {
  7169   0015AE  0E27               	movlw	39
  7170   0015B0  6446               	cpfsgt	_ColumnAct^0,c
  7171   0015B2  0012               	return	
  7172                           
  7173                           ;LcTLCD.c: 187:    ColumnAct = 0;
  7174   0015B4  6A46               	clrf	_ColumnAct^0,c
  7175                           
  7176                           ;LcTLCD.c: 188:    if (++RowAct >= 2) RowAct = 0;
  7177   0015B6  2A47               	incf	_RowAct^0,f,c
  7178   0015B8  0E01               	movlw	1
  7179   0015BA  6447               	cpfsgt	_RowAct^0,c
  7180   0015BC  D001               	goto	l3765
  7181   0015BE  6A47               	clrf	_RowAct^0,c
  7182   0015C0                     l3765:
  7183                           
  7184                           ;LcTLCD.c: 189:    LcGotoXY(ColumnAct, RowAct);
  7185   0015C0  C047  F060         	movff	_RowAct,LcGotoXY@Row
  7186   0015C4  5046               	movf	_ColumnAct^0,w,c
  7187   0015C6  ECDA  F008         	call	_LcGotoXY
  7188   0015CA  0012               	return	
  7189   0015CC                     l3767:
  7190                           
  7191                           ;LcTLCD.c: 192:  if (RowAct == 1) {
  7192   0015CC  0447               	decf	_RowAct^0,w,c
  7193   0015CE  A4D8               	btfss	status,2,c
  7194   0015D0  0012               	return	
  7195                           
  7196                           ;LcTLCD.c: 193:   if (ColumnAct >= 40) ColumnAct = 0;
  7197   0015D2  0E27               	movlw	39
  7198   0015D4  6446               	cpfsgt	_ColumnAct^0,c
  7199   0015D6  D001               	goto	l3773
  7200   0015D8  6A46               	clrf	_ColumnAct^0,c
  7201   0015DA                     l3773:
  7202                           
  7203                           ;LcTLCD.c: 194:   LcGotoXY(ColumnAct, RowAct);
  7204   0015DA  C047  F060         	movff	_RowAct,LcGotoXY@Row
  7205   0015DE  5046               	movf	_ColumnAct^0,w,c
  7206   0015E0  ECDA  F008         	call	_LcGotoXY
  7207   0015E4  0012               	return		;funcret
  7208   0015E6                     __end_of_LcPutChar:
  7209                           	callstack 0
  7210                           
  7211 ;; *************** function _LcGotoXY *****************
  7212 ;; Defined at:
  7213 ;;		line 138 in file "LcTLCD.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  Column          1    wreg     unsigned char 
  7216 ;;  Row             1   14[COMRAM] unsigned char 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  Column          1   21[COMRAM] unsigned char 
  7219 ;;  Fisics          2   19[COMRAM] int 
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      void 
  7222 ;; Registers used:
  7223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1
  7229 ;;      Params:         1       0       0
  7230 ;;      Locals:         5       0       0
  7231 ;;      Temps:          2       0       0
  7232 ;;      Totals:         8       0       0
  7233 ;;Total ram usage:        8 bytes
  7234 ;; Hardware stack levels used: 1
  7235 ;; Hardware stack levels required when called: 5
  7236 ;; This function calls:
  7237 ;;		_CantaIR
  7238 ;;		_WaitForBusy
  7239 ;; This function is called by:
  7240 ;;		_LcPutChar
  7241 ;;		_printLCD
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text32
  7246   0011B4                     __ptext32:
  7247                           	callstack 0
  7248   0011B4                     _LcGotoXY:
  7249                           	callstack 22
  7250                           
  7251                           ;incstack = 0
  7252                           ;LcGotoXY@Column stored from wreg
  7253   0011B4  6E67               	movwf	LcGotoXY@Column^0,c
  7254                           
  7255                           ;LcTLCD.c: 142:  int Fisics;;LcTLCD.c: 144:  switch (Rows) {
  7256   0011B6  D036               	goto	l3685
  7257   0011B8                     l3663:
  7258                           
  7259                           ;LcTLCD.c: 146:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7260   0011B8  5060               	movf	LcGotoXY@Row^0,w,c
  7261   0011BA  B4D8               	btfsc	status,2,c
  7262   0011BC  D004               	goto	l3667
  7263   0011BE  0E00               	movlw	0
  7264   0011C0  6E64               	movwf	(_LcGotoXY$682+1)^0,c
  7265   0011C2  0E40               	movlw	64
  7266   0011C4  D003               	goto	L14
  7267   0011C6                     l3667:
  7268   0011C6  0E00               	movlw	0
  7269   0011C8  6E64               	movwf	(_LcGotoXY$682+1)^0,c
  7270   0011CA  0E00               	movlw	0
  7271   0011CC                     L14:
  7272   0011CC  6E63               	movwf	_LcGotoXY$682^0,c
  7273   0011CE  5067               	movf	LcGotoXY@Column^0,w,c
  7274   0011D0  2463               	addwf	_LcGotoXY$682^0,w,c
  7275   0011D2  6E65               	movwf	LcGotoXY@Fisics^0,c
  7276   0011D4  0E00               	movlw	0
  7277   0011D6  2064               	addwfc	(_LcGotoXY$682+1)^0,w,c
  7278   0011D8  6E66               	movwf	(LcGotoXY@Fisics+1)^0,c
  7279   0011DA  D02F               	goto	l3687
  7280   0011DC                     l171:
  7281                           
  7282                           ;LcTLCD.c: 148:    Fisics = Column;
  7283   0011DC  C067  F065         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7284   0011E0  6A66               	clrf	(LcGotoXY@Fisics+1)^0,c
  7285                           
  7286                           ;LcTLCD.c: 149:    if (Row == 1) Fisics += 0x40; else
  7287   0011E2  0460               	decf	LcGotoXY@Row^0,w,c
  7288   0011E4  A4D8               	btfss	status,2,c
  7289   0011E6  D002               	goto	l3675
  7290   0011E8  0E40               	movlw	64
  7291   0011EA  D005               	goto	L15
  7292   0011EC                     l3675:
  7293                           
  7294                           ;LcTLCD.c: 150:    if (Row == 2) Fisics += Columns; else
  7295   0011EC  0E02               	movlw	2
  7296   0011EE  1860               	xorwf	LcGotoXY@Row^0,w,c
  7297   0011F0  A4D8               	btfss	status,2,c
  7298   0011F2  D004               	goto	l3679
  7299   0011F4  5048               	movf	_Columns^0,w,c
  7300   0011F6                     L15:
  7301   0011F6  2665               	addwf	LcGotoXY@Fisics^0,f,c
  7302   0011F8  0E00               	movlw	0
  7303   0011FA  D00E               	goto	L16
  7304   0011FC                     l3679:
  7305                           
  7306                           ;LcTLCD.c: 151:    if (Row == 3) Fisics += 0x40+Columns;
  7307   0011FC  0E03               	movlw	3
  7308   0011FE  1860               	xorwf	LcGotoXY@Row^0,w,c
  7309   001200  A4D8               	btfss	status,2,c
  7310   001202  D01B               	goto	l3687
  7311   001204  5048               	movf	_Columns^0,w,c
  7312   001206  6E61               	movwf	??_LcGotoXY^0,c
  7313   001208  6A62               	clrf	(??_LcGotoXY+1)^0,c
  7314   00120A  0E40               	movlw	64
  7315   00120C  2661               	addwf	??_LcGotoXY^0,f,c
  7316   00120E  0E00               	movlw	0
  7317   001210  2262               	addwfc	(??_LcGotoXY+1)^0,f,c
  7318   001212  5061               	movf	??_LcGotoXY^0,w,c
  7319   001214  2665               	addwf	LcGotoXY@Fisics^0,f,c
  7320   001216  5062               	movf	(??_LcGotoXY+1)^0,w,c
  7321   001218                     L16:
  7322   001218  2266               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7323                           
  7324                           ;LcTLCD.c: 152:    break;
  7325   00121A  D00F               	goto	l3687
  7326   00121C                     l178:
  7327                           
  7328                           ;LcTLCD.c: 155:    Fisics = Column; break;
  7329   00121C  C067  F065         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7330   001220  6A66               	clrf	(LcGotoXY@Fisics+1)^0,c
  7331   001222  D00B               	goto	l3687
  7332   001224                     l3685:
  7333   001224  5049               	movf	_Rows^0,w,c
  7334                           
  7335                           ; Switch size 1, requested type "simple"
  7336                           ; Number of cases is 3, Range of values is 1 to 4
  7337                           ; switch strategies available:
  7338                           ; Name         Instructions Cycles
  7339                           ; simple_byte           10     6 (average)
  7340                           ;	Chosen strategy is simple_byte
  7341   001226  0A01               	xorlw	1	; case 1
  7342   001228  B4D8               	btfsc	status,2,c
  7343   00122A  D7F8               	goto	l178
  7344   00122C  0A03               	xorlw	3	; case 2
  7345   00122E  B4D8               	btfsc	status,2,c
  7346   001230  D7C3               	goto	l3663
  7347   001232  0A06               	xorlw	6	; case 4
  7348   001234  B4D8               	btfsc	status,2,c
  7349   001236  D7D2               	goto	l171
  7350   001238  D7F1               	goto	l178
  7351   00123A                     l3687:
  7352                           
  7353                           ;LcTLCD.c: 158:  WaitForBusy();
  7354   00123A  EC01  F00D         	call	_WaitForBusy	;wreg free
  7355                           
  7356                           ;LcTLCD.c: 159:  CantaIR(0x80 | (char) Fisics);
  7357   00123E  5065               	movf	LcGotoXY@Fisics^0,w,c
  7358   001240  0980               	iorlw	128
  7359   001242  ECB0  F00D         	call	_CantaIR
  7360                           
  7361                           ;LcTLCD.c: 161:  RowAct = Row;
  7362   001246  C060  F047         	movff	LcGotoXY@Row,_RowAct
  7363                           
  7364                           ;LcTLCD.c: 162:  ColumnAct = Column;
  7365   00124A  C067  F046         	movff	LcGotoXY@Column,_ColumnAct
  7366   00124E  0012               	return		;funcret
  7367   001250                     __end_of_LcGotoXY:
  7368                           	callstack 0
  7369                           
  7370 ;; *************** function _CantaData *****************
  7371 ;; Defined at:
  7372 ;;		line 250 in file "LcTLCD.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  Data            1    wreg     unsigned char 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  Data            1    2[COMRAM] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1
  7386 ;;      Params:         0       0       0
  7387 ;;      Locals:         1       0       0
  7388 ;;      Temps:          0       0       0
  7389 ;;      Totals:         1       0       0
  7390 ;;Total ram usage:        1 bytes
  7391 ;; Hardware stack levels used: 1
  7392 ;; Hardware stack levels required when called: 4
  7393 ;; This function calls:
  7394 ;;		_CantaPartAlta
  7395 ;;		_CantaPartBaixa
  7396 ;; This function is called by:
  7397 ;;		_LcPutChar
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           	psect	text33
  7402   001B2E                     __ptext33:
  7403                           	callstack 0
  7404   001B2E                     _CantaData:
  7405                           	callstack 23
  7406                           
  7407                           ;incstack = 0
  7408                           ;CantaData@Data stored from wreg
  7409   001B2E  6E54               	movwf	CantaData@Data^0,c
  7410                           
  7411                           ;LcTLCD.c: 251:  (TRISAbits.TRISA5 = TRISEbits.TRISE0 = TRISEbits.TRISE1 = TRISEbits.TRI
      +                          SE2 = 0);
  7412   001B30  9496               	bcf	150,2,c	;volatile
  7413   001B32  9296               	bcf	150,1,c	;volatile
  7414   001B34  9096               	bcf	150,0,c	;volatile
  7415   001B36  9A92               	bcf	146,5,c	;volatile
  7416                           
  7417                           ;LcTLCD.c: 252:  (LATAbits.LATA2 = 1);
  7418   001B38  8489               	bsf	137,2,c	;volatile
  7419                           
  7420                           ;LcTLCD.c: 253:  (LATAbits.LATA3 = 0);
  7421   001B3A  9689               	bcf	137,3,c	;volatile
  7422                           
  7423                           ;LcTLCD.c: 254:  (LATAbits.LATA4 = 1);
  7424   001B3C  8889               	bsf	137,4,c	;volatile
  7425                           
  7426                           ;LcTLCD.c: 255:  CantaPartAlta(Data);
  7427   001B3E  5054               	movf	CantaData@Data^0,w,c
  7428   001B40  EC60  F00B         	call	_CantaPartAlta
  7429                           
  7430                           ;LcTLCD.c: 256:  (LATAbits.LATA4 = 1);
  7431   001B44  8889               	bsf	137,4,c	;volatile
  7432                           
  7433                           ;LcTLCD.c: 257:  (LATAbits.LATA4 = 0);
  7434   001B46  9889               	bcf	137,4,c	;volatile
  7435                           
  7436                           ;LcTLCD.c: 258:  (LATAbits.LATA4 = 0);
  7437   001B48  9889               	bcf	137,4,c	;volatile
  7438                           
  7439                           ;LcTLCD.c: 259:  (LATAbits.LATA4 = 1);
  7440   001B4A  8889               	bsf	137,4,c	;volatile
  7441                           
  7442                           ;LcTLCD.c: 260:  CantaPartBaixa(Data);
  7443   001B4C  5054               	movf	CantaData@Data^0,w,c
  7444   001B4E  EC2D  F00B         	call	_CantaPartBaixa
  7445                           
  7446                           ;LcTLCD.c: 261:  (LATAbits.LATA4 = 1);
  7447   001B52  8889               	bsf	137,4,c	;volatile
  7448                           
  7449                           ;LcTLCD.c: 262:  (LATAbits.LATA4 = 0);
  7450   001B54  9889               	bcf	137,4,c	;volatile
  7451                           
  7452                           ;LcTLCD.c: 263:  (TRISAbits.TRISA5 = TRISEbits.TRISE0 = TRISEbits.TRISE1 = TRISEbits.TRI
      +                          SE2 = 1);
  7453   001B56  8496               	bsf	150,2,c	;volatile
  7454   001B58  8296               	bsf	150,1,c	;volatile
  7455   001B5A  8096               	bsf	150,0,c	;volatile
  7456   001B5C  8A92               	bsf	146,5,c	;volatile
  7457   001B5E  0012               	return		;funcret
  7458   001B60                     __end_of_CantaData:
  7459                           	callstack 0
  7460                           
  7461 ;; *************** function _LcClear *****************
  7462 ;; Defined at:
  7463 ;;		line 115 in file "LcTLCD.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1
  7477 ;;      Params:         0       0       0
  7478 ;;      Locals:         0       0       0
  7479 ;;      Temps:          0       0       0
  7480 ;;      Totals:         0       0       0
  7481 ;;Total ram usage:        0 bytes
  7482 ;; Hardware stack levels used: 1
  7483 ;; Hardware stack levels required when called: 5
  7484 ;; This function calls:
  7485 ;;		_CantaIR
  7486 ;;		_Espera
  7487 ;;		_WaitForBusy
  7488 ;; This function is called by:
  7489 ;;		_main
  7490 ;;		_MENU_SaveUID
  7491 ;;		_printLCD
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           	psect	text34
  7496   001D0A                     __ptext34:
  7497                           	callstack 0
  7498   001D0A                     _LcClear:
  7499                           	callstack 23
  7500                           
  7501                           ;LcTLCD.c: 118:  WaitForBusy(); CantaIR(0x01);
  7502                           
  7503                           ;incstack = 0
  7504   001D0A  EC01  F00D         	call	_WaitForBusy	;wreg free
  7505   001D0E  0E01               	movlw	1
  7506   001D10  ECB0  F00D         	call	_CantaIR
  7507                           
  7508                           ;LcTLCD.c: 119:  Espera(Timer, 3);
  7509   001D14  0E00               	movlw	0
  7510   001D16  6E60               	movwf	(Espera@ms+1)^0,c
  7511   001D18  0E03               	movlw	3
  7512   001D1A  6E5F               	movwf	Espera@ms^0,c
  7513   001D1C  5051               	movf	_Timer^0,w,c
  7514   001D1E  EC62  F00D         	call	_Espera
  7515   001D22  0012               	return		;funcret
  7516   001D24                     __end_of_LcClear:
  7517                           	callstack 0
  7518                           
  7519 ;; *************** function _MENU_Motor *****************
  7520 ;; Defined at:
  7521 ;;		line 43 in file "TAD_MENU.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;		None
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;  i               2   26[COMRAM] int 
  7526 ;;  received_cha    1   28[COMRAM] unsigned char 
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1
  7536 ;;      Params:         0       0       0
  7537 ;;      Locals:         3       0       0
  7538 ;;      Temps:          0       0       0
  7539 ;;      Totals:         3       0       0
  7540 ;;Total ram usage:        3 bytes
  7541 ;; Hardware stack levels used: 1
  7542 ;; Hardware stack levels required when called: 7
  7543 ;; This function calls:
  7544 ;;		_SIO_Receive
  7545 ;;		_SIO_Send
  7546 ;;		_SIO_SendString
  7547 ;;		_handleEscKey
  7548 ;;		_handleIntensity
  7549 ;;		_handleMainMenu
  7550 ;;		_option3
  7551 ;;		_showConfigLeds
  7552 ;;		_showUID
  7553 ;; This function is called by:
  7554 ;;		_main
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text35
  7559   000D20                     __ptext35:
  7560                           	callstack 0
  7561   000D20                     _MENU_Motor:
  7562                           	callstack 23
  7563                           
  7564                           ;TAD_MENU.c: 44:     unsigned char received_char = 0;
  7565                           
  7566                           ;incstack = 0
  7567   000D20  6A6E               	clrf	MENU_Motor@received_char^0,c
  7568                           
  7569                           ;TAD_MENU.c: 46:     SIO_Receive(&received_char);
  7570   000D22  0E6E               	movlw	low MENU_Motor@received_char
  7571   000D24  6E52               	movwf	SIO_Receive@character^0,c
  7572   000D26  ECE1  F00E         	call	_SIO_Receive	;wreg free
  7573                           
  7574                           ;TAD_MENU.c: 48:     handleEscKey(received_char);
  7575   000D2A  506E               	movf	MENU_Motor@received_char^0,w,c
  7576   000D2C  ECD0  F00E         	call	_handleEscKey
  7577                           
  7578                           ;TAD_MENU.c: 49:     handleIntensity();
  7579   000D30  EC3C  F00A         	call	_handleIntensity	;wreg free
  7580                           
  7581                           ;TAD_MENU.c: 50:     handleMainMenu();
  7582   000D34  EC1B  F00E         	call	_handleMainMenu	;wreg free
  7583                           
  7584                           ;TAD_MENU.c: 52:     switch(state_main_motor) {
  7585   000D38  D055               	goto	l4803
  7586   000D3A                     l4749:
  7587                           
  7588                           ;TAD_MENU.c: 54:             if(received_char == '1' || received_char == '2' || received
      +                          _char == '3') {
  7589   000D3A  0E31               	movlw	49
  7590   000D3C  186E               	xorwf	MENU_Motor@received_char^0,w,c
  7591   000D3E  B4D8               	btfsc	status,2,c
  7592   000D40  D008               	goto	u3530
  7593   000D42  0E32               	movlw	50
  7594   000D44  186E               	xorwf	MENU_Motor@received_char^0,w,c
  7595   000D46  B4D8               	btfsc	status,2,c
  7596   000D48  D004               	goto	u3530
  7597   000D4A  0E33               	movlw	51
  7598   000D4C  186E               	xorwf	MENU_Motor@received_char^0,w,c
  7599   000D4E  A4D8               	btfss	status,2,c
  7600   000D50  0012               	return	
  7601   000D52                     u3530:
  7602                           
  7603                           ;TAD_MENU.c: 55:                 SIO_Send(received_char);
  7604   000D52  506E               	movf	MENU_Motor@received_char^0,w,c
  7605   000D54  ECC7  F00E         	call	_SIO_Send
  7606                           
  7607                           ;TAD_MENU.c: 56:                 option = received_char;
  7608   000D58  C06E  F01E         	movff	MENU_Motor@received_char,_option
  7609                           
  7610                           ;TAD_MENU.c: 58:                 state_main_motor++;
  7611   000D5C  2A23               	incf	_state_main_motor^0,f,c
  7612                           
  7613                           ;TAD_MENU.c: 59:                 state_option3 = 0;
  7614   000D5E  6A22               	clrf	_state_option3^0,c
  7615   000D60  0012               	return	
  7616   000D62                     l4765:
  7617                           
  7618                           ;TAD_MENU.c: 67:                     if(someone) {
  7619   000D62  5018               	movf	_someone^0,w,c
  7620   000D64  B4D8               	btfsc	status,2,c
  7621   000D66  D004               	goto	l4769
  7622                           
  7623                           ;TAD_MENU.c: 68:                         showUID(INDEX_CURRENT);
  7624   000D68  5013               	movf	_INDEX_CURRENT^0,w,c
  7625   000D6A  ECFD  F006         	call	_showUID
  7626                           
  7627                           ;TAD_MENU.c: 69:                     } else {
  7628   000D6E  D006               	goto	l4771
  7629   000D70                     l4769:
  7630                           
  7631                           ;TAD_MENU.c: 70:                         SIO_SendString(res_a_mostrar);
  7632   000D70  0E7D               	movlw	low _res_a_mostrar
  7633   000D72  6E53               	movwf	SIO_SendString@str^0,c
  7634   000D74  0E1F               	movlw	high _res_a_mostrar
  7635   000D76  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7636   000D78  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7637   000D7C                     l4771:
  7638                           
  7639                           ;TAD_MENU.c: 72:                     state_main_motor++;
  7640   000D7C  2A23               	incf	_state_main_motor^0,f,c
  7641                           
  7642                           ;TAD_MENU.c: 73:                     break;
  7643   000D7E  0012               	return	
  7644   000D80                     l4773:
  7645                           
  7646                           ;TAD_MENU.c: 75:                     for(int i = 1; i < 6; i++) {
  7647   000D80  0E00               	movlw	0
  7648   000D82  6E6D               	movwf	(MENU_Motor@i+1)^0,c
  7649   000D84  0E01               	movlw	1
  7650   000D86  6E6C               	movwf	MENU_Motor@i^0,c
  7651   000D88                     l4779:
  7652                           
  7653                           ;TAD_MENU.c: 76:                         showUID((char)i);
  7654   000D88  506C               	movf	MENU_Motor@i^0,w,c
  7655   000D8A  ECFD  F006         	call	_showUID
  7656                           
  7657                           ;TAD_MENU.c: 77:                         showConfigLeds((char)i);
  7658   000D8E  506C               	movf	MENU_Motor@i^0,w,c
  7659   000D90  EC38  F008         	call	_showConfigLeds
  7660                           
  7661                           ;TAD_MENU.c: 78:                         SIO_SendString("\r\n");
  7662   000D94  0EFA               	movlw	low STR_1
  7663   000D96  6E53               	movwf	SIO_SendString@str^0,c
  7664   000D98  0E1F               	movlw	high STR_1
  7665   000D9A  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7666   000D9C  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7667                           
  7668                           ;TAD_MENU.c: 79:                     }
  7669   000DA0  4A6C               	infsnz	MENU_Motor@i^0,f,c
  7670   000DA2  2A6D               	incf	(MENU_Motor@i+1)^0,f,c
  7671   000DA4  BE6D               	btfsc	(MENU_Motor@i+1)^0,7,c
  7672   000DA6  D7F0               	goto	l4779
  7673   000DA8  506D               	movf	(MENU_Motor@i+1)^0,w,c
  7674   000DAA  E1E8               	bnz	l4771
  7675   000DAC  0E06               	movlw	6
  7676   000DAE  5C6C               	subwf	MENU_Motor@i^0,w,c
  7677   000DB0  B0D8               	btfsc	status,0,c
  7678   000DB2  D7E4               	goto	l4771
  7679   000DB4  D7E9               	goto	l4779
  7680   000DB6                     l4789:
  7681                           
  7682                           ;TAD_MENU.c: 83:                     option3(received_char);
  7683   000DB6  506E               	movf	MENU_Motor@received_char^0,w,c
  7684   000DB8  EC31  F005         	call	_option3
  7685                           
  7686                           ;TAD_MENU.c: 84:                     break;
  7687   000DBC  0012               	return	
  7688   000DBE                     l4793:
  7689   000DBE  501E               	movf	_option^0,w,c
  7690                           
  7691                           ; Switch size 1, requested type "simple"
  7692                           ; Number of cases is 3, Range of values is 49 to 51
  7693                           ; switch strategies available:
  7694                           ; Name         Instructions Cycles
  7695                           ; simple_byte           10     6 (average)
  7696                           ;	Chosen strategy is simple_byte
  7697   000DC0  0A31               	xorlw	49	; case 49
  7698   000DC2  B4D8               	btfsc	status,2,c
  7699   000DC4  D7CE               	goto	l4765
  7700   000DC6  0A03               	xorlw	3	; case 50
  7701   000DC8  B4D8               	btfsc	status,2,c
  7702   000DCA  D7DA               	goto	l4773
  7703   000DCC  0A01               	xorlw	1	; case 51
  7704   000DCE  A4D8               	btfss	status,2,c
  7705   000DD0  0012               	return	
  7706   000DD2  D7F1               	goto	l4789
  7707   000DD4                     l4795:
  7708                           
  7709                           ;TAD_MENU.c: 88:             SIO_SendString("\r\n\r\nOpció: ");
  7710   000DD4  0EE6               	movlw	low STR_2
  7711   000DD6  6E53               	movwf	SIO_SendString@str^0,c
  7712   000DD8  0E1F               	movlw	high STR_2
  7713   000DDA  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7714   000DDC  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7715                           
  7716                           ;TAD_MENU.c: 90:             state_main_motor = 0;
  7717   000DE0  6A23               	clrf	_state_main_motor^0,c
  7718                           
  7719                           ;TAD_MENU.c: 91:             break;
  7720   000DE2  0012               	return	
  7721   000DE4                     l4803:
  7722   000DE4  5023               	movf	_state_main_motor^0,w,c
  7723                           
  7724                           ; Switch size 1, requested type "simple"
  7725                           ; Number of cases is 3, Range of values is 0 to 2
  7726                           ; switch strategies available:
  7727                           ; Name         Instructions Cycles
  7728                           ; simple_byte           10     6 (average)
  7729                           ;	Chosen strategy is simple_byte
  7730   000DE6  0A00               	xorlw	0	; case 0
  7731   000DE8  B4D8               	btfsc	status,2,c
  7732   000DEA  D7A7               	goto	l4749
  7733   000DEC  0A01               	xorlw	1	; case 1
  7734   000DEE  B4D8               	btfsc	status,2,c
  7735   000DF0  D7E6               	goto	l4793
  7736   000DF2  0A03               	xorlw	3	; case 2
  7737   000DF4  A4D8               	btfss	status,2,c
  7738   000DF6  0012               	return	
  7739   000DF8  D7ED               	goto	l4795
  7740   000DFA                     __end_of_MENU_Motor:
  7741                           	callstack 0
  7742                           
  7743 ;; *************** function _showUID *****************
  7744 ;; Defined at:
  7745 ;;		line 382 in file "TAD_MENU.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  index           1    wreg     unsigned char 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  index           1   25[COMRAM] unsigned char 
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  1    wreg      void 
  7752 ;; Registers used:
  7753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMRAM   BANK0   BANK1
  7759 ;;      Params:         0       0       0
  7760 ;;      Locals:         1       0       0
  7761 ;;      Temps:          0       0       0
  7762 ;;      Totals:         1       0       0
  7763 ;;Total ram usage:        1 bytes
  7764 ;; Hardware stack levels used: 1
  7765 ;; Hardware stack levels required when called: 6
  7766 ;; This function calls:
  7767 ;;		_SIO_SendString
  7768 ;;		_printHex
  7769 ;; This function is called by:
  7770 ;;		_MENU_Motor
  7771 ;;		_MENU_SaveUID
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           	psect	text36
  7776   000DFA                     __ptext36:
  7777                           	callstack 0
  7778   000DFA                     _showUID:
  7779                           	callstack 22
  7780                           
  7781                           ;incstack = 0
  7782                           ;showUID@index stored from wreg
  7783   000DFA  6E6B               	movwf	showUID@index^0,c
  7784                           
  7785                           ;TAD_MENU.c: 383:     SIO_SendString("\r\n\tUID: ");
  7786   000DFC  0EA9               	movlw	low (STR_6+26)
  7787   000DFE  6E53               	movwf	SIO_SendString@str^0,c
  7788   000E00  0E1F               	movlw	high (STR_6+26)
  7789   000E02  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7790   000E04  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7791                           
  7792                           ;TAD_MENU.c: 384:     printHex(uid_saved[index][0]);
  7793   000E08  506B               	movf	showUID@index^0,w,c
  7794   000E0A  0D05               	mullw	5
  7795   000E0C  0E55               	movlw	low _uid_saved
  7796   000E0E  24F3               	addwf	243,w,c
  7797   000E10  6EF6               	movwf	tblptrl,c
  7798   000E12  0E1E               	movlw	high _uid_saved
  7799   000E14  20F4               	addwfc	244,w,c
  7800   000E16  6EF7               	movwf	tblptrh,c
  7801   000E18                     	if	0	;There are less than 3 active tblptr bytes
  7802   000E18                     	endif
  7803   000E18  0008               	tblrd		*
  7804   000E1A  50F5               	movf	tablat,w,c
  7805   000E1C  EC18  F00C         	call	_printHex
  7806                           
  7807                           ;TAD_MENU.c: 385:     SIO_SendString("-");
  7808   000E20  0EFD               	movlw	low STR_7
  7809   000E22  6E53               	movwf	SIO_SendString@str^0,c
  7810   000E24  0E1F               	movlw	high STR_7
  7811   000E26  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7812   000E28  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7813                           
  7814                           ;TAD_MENU.c: 386:     printHex(uid_saved[index][1]);
  7815   000E2C  506B               	movf	showUID@index^0,w,c
  7816   000E2E  0D05               	mullw	5
  7817   000E30  0E01               	movlw	1
  7818   000E32  26F3               	addwf	243,f,c
  7819   000E34  0E00               	movlw	0
  7820   000E36  22F4               	addwfc	244,f,c
  7821   000E38  0E55               	movlw	low _uid_saved
  7822   000E3A  24F3               	addwf	243,w,c
  7823   000E3C  6EF6               	movwf	tblptrl,c
  7824   000E3E  0E1E               	movlw	high _uid_saved
  7825   000E40  20F4               	addwfc	244,w,c
  7826   000E42  6EF7               	movwf	tblptrh,c
  7827   000E44                     	if	0	;There are less than 3 active tblptr bytes
  7828   000E44                     	endif
  7829   000E44  0008               	tblrd		*
  7830   000E46  50F5               	movf	tablat,w,c
  7831   000E48  EC18  F00C         	call	_printHex
  7832                           
  7833                           ;TAD_MENU.c: 387:     SIO_SendString("-");
  7834   000E4C  0EFD               	movlw	low STR_7
  7835   000E4E  6E53               	movwf	SIO_SendString@str^0,c
  7836   000E50  0E1F               	movlw	high STR_7
  7837   000E52  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7838   000E54  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7839                           
  7840                           ;TAD_MENU.c: 388:     printHex(uid_saved[index][2]);
  7841   000E58  506B               	movf	showUID@index^0,w,c
  7842   000E5A  0D05               	mullw	5
  7843   000E5C  0E02               	movlw	2
  7844   000E5E  26F3               	addwf	243,f,c
  7845   000E60  0E00               	movlw	0
  7846   000E62  22F4               	addwfc	244,f,c
  7847   000E64  0E55               	movlw	low _uid_saved
  7848   000E66  24F3               	addwf	243,w,c
  7849   000E68  6EF6               	movwf	tblptrl,c
  7850   000E6A  0E1E               	movlw	high _uid_saved
  7851   000E6C  20F4               	addwfc	244,w,c
  7852   000E6E  6EF7               	movwf	tblptrh,c
  7853   000E70                     	if	0	;There are less than 3 active tblptr bytes
  7854   000E70                     	endif
  7855   000E70  0008               	tblrd		*
  7856   000E72  50F5               	movf	tablat,w,c
  7857   000E74  EC18  F00C         	call	_printHex
  7858                           
  7859                           ;TAD_MENU.c: 389:     SIO_SendString("-");
  7860   000E78  0EFD               	movlw	low STR_7
  7861   000E7A  6E53               	movwf	SIO_SendString@str^0,c
  7862   000E7C  0E1F               	movlw	high STR_7
  7863   000E7E  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7864   000E80  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7865                           
  7866                           ;TAD_MENU.c: 390:     printHex(uid_saved[index][3]);
  7867   000E84  506B               	movf	showUID@index^0,w,c
  7868   000E86  0D05               	mullw	5
  7869   000E88  0E03               	movlw	3
  7870   000E8A  26F3               	addwf	243,f,c
  7871   000E8C  0E00               	movlw	0
  7872   000E8E  22F4               	addwfc	244,f,c
  7873   000E90  0E55               	movlw	low _uid_saved
  7874   000E92  24F3               	addwf	243,w,c
  7875   000E94  6EF6               	movwf	tblptrl,c
  7876   000E96  0E1E               	movlw	high _uid_saved
  7877   000E98  20F4               	addwfc	244,w,c
  7878   000E9A  6EF7               	movwf	tblptrh,c
  7879   000E9C                     	if	0	;There are less than 3 active tblptr bytes
  7880   000E9C                     	endif
  7881   000E9C  0008               	tblrd		*
  7882   000E9E  50F5               	movf	tablat,w,c
  7883   000EA0  EC18  F00C         	call	_printHex
  7884                           
  7885                           ;TAD_MENU.c: 391:     SIO_SendString("-");
  7886   000EA4  0EFD               	movlw	low STR_7
  7887   000EA6  6E53               	movwf	SIO_SendString@str^0,c
  7888   000EA8  0E1F               	movlw	high STR_7
  7889   000EAA  6E54               	movwf	(SIO_SendString@str+1)^0,c
  7890   000EAC  ECC0  F00B         	call	_SIO_SendString	;wreg free
  7891                           
  7892                           ;TAD_MENU.c: 392:     printHex(uid_saved[index][4]);
  7893   000EB0  506B               	movf	showUID@index^0,w,c
  7894   000EB2  0D05               	mullw	5
  7895   000EB4  0E04               	movlw	4
  7896   000EB6  26F3               	addwf	243,f,c
  7897   000EB8  0E00               	movlw	0
  7898   000EBA  22F4               	addwfc	244,f,c
  7899   000EBC  0E55               	movlw	low _uid_saved
  7900   000EBE  24F3               	addwf	243,w,c
  7901   000EC0  6EF6               	movwf	tblptrl,c
  7902   000EC2  0E1E               	movlw	high _uid_saved
  7903   000EC4  20F4               	addwfc	244,w,c
  7904   000EC6  6EF7               	movwf	tblptrh,c
  7905   000EC8                     	if	0	;There are less than 3 active tblptr bytes
  7906   000EC8                     	endif
  7907   000EC8  0008               	tblrd		*
  7908   000ECA  50F5               	movf	tablat,w,c
  7909   000ECC  EC18  F00C         	call	_printHex
  7910   000ED0  0012               	return		;funcret
  7911   000ED2                     __end_of_showUID:
  7912                           	callstack 0
  7913                           
  7914 ;; *************** function _printHex *****************
  7915 ;; Defined at:
  7916 ;;		line 354 in file "TAD_MENU.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  value           1    wreg     unsigned char 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  value           1   24[COMRAM] unsigned char 
  7921 ;;  hex_chars      17    4[COMRAM] const unsigned char [17]
  7922 ;;  hex_out         3   21[COMRAM] unsigned char [3]
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  1    wreg      void 
  7925 ;; Registers used:
  7926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1
  7932 ;;      Params:         0       0       0
  7933 ;;      Locals:        21       0       0
  7934 ;;      Temps:          1       0       0
  7935 ;;      Totals:        22       0       0
  7936 ;;Total ram usage:       22 bytes
  7937 ;; Hardware stack levels used: 1
  7938 ;; Hardware stack levels required when called: 5
  7939 ;; This function calls:
  7940 ;;		_SIO_SendString
  7941 ;; This function is called by:
  7942 ;;		_MENU_SaveUID
  7943 ;;		_showUID
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           	psect	text37
  7948   001830                     __ptext37:
  7949                           	callstack 0
  7950   001830                     _printHex:
  7951                           	callstack 22
  7952                           
  7953                           ;incstack = 0
  7954                           ;printHex@value stored from wreg
  7955   001830  6E6A               	movwf	printHex@value^0,c
  7956                           
  7957                           ;TAD_MENU.c: 355:     const char hex_chars[] = "0123456789ABCDEF";
  7958   001832  0E73               	movlw	low printHex@F2821
  7959   001834  6EF6               	movwf	tblptrl,c
  7960   001836                     	if	1	;There is more than 1 active tblptr byte
  7961   001836  0E1E               	movlw	high printHex@F2821
  7962   001838  6EF7               	movwf	tblptrh,c
  7963   00183A                     	endif
  7964   00183A                     	if	0	;There are less than 3 active tblptr bytes
  7965   00183A                     	endif
  7966   00183A  EE20  F056         	lfsr	2,printHex@hex_chars
  7967   00183E  0E10               	movlw	16
  7968   001840                     u2460:
  7969   001840  0009               	tblrd		*+
  7970   001842  CFF5 FFDE          	movff	tablat,postinc2
  7971   001846  06E8               	decf	wreg,f,c
  7972   001848  E2FB               	bc	u2460
  7973                           
  7974                           ;TAD_MENU.c: 356:     char hex_out[3];;TAD_MENU.c: 358:     hex_out[0] = hex_chars[(valu
      +                          e >> 4) & 0x0F];
  7975   00184A  C06A  F055         	movff	printHex@value,??_printHex
  7976   00184E  3A55               	swapf	??_printHex^0,f,c
  7977   001850  0E0F               	movlw	15
  7978   001852  1655               	andwf	??_printHex^0,f,c
  7979   001854  0E0F               	movlw	15
  7980   001856  1655               	andwf	??_printHex^0,f,c
  7981   001858  5055               	movf	??_printHex^0,w,c
  7982   00185A  0F56               	addlw	low printHex@hex_chars
  7983   00185C  6ED9               	movwf	fsr2l,c
  7984   00185E  6ADA               	clrf	fsr2h,c
  7985   001860  50DF               	movf	indf2,w,c
  7986   001862  6E67               	movwf	printHex@hex_out^0,c
  7987                           
  7988                           ;TAD_MENU.c: 359:     hex_out[1] = hex_chars[value & 0x0F];
  7989   001864  C06A  F055         	movff	printHex@value,??_printHex
  7990   001868  0E0F               	movlw	15
  7991   00186A  1655               	andwf	??_printHex^0,f,c
  7992   00186C  5055               	movf	??_printHex^0,w,c
  7993   00186E  0F56               	addlw	low printHex@hex_chars
  7994   001870  6ED9               	movwf	fsr2l,c
  7995   001872  6ADA               	clrf	fsr2h,c
  7996   001874  50DF               	movf	indf2,w,c
  7997   001876  6E68               	movwf	(printHex@hex_out+1)^0,c
  7998                           
  7999                           ;TAD_MENU.c: 360:     hex_out[2] = '\0';
  8000   001878  6A69               	clrf	(printHex@hex_out+2)^0,c
  8001                           
  8002                           ;TAD_MENU.c: 362:     SIO_SendString(hex_out);
  8003   00187A  0E67               	movlw	low printHex@hex_out
  8004   00187C  6E53               	movwf	SIO_SendString@str^0,c
  8005   00187E  6A54               	clrf	(SIO_SendString@str+1)^0,c
  8006   001880  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8007   001884  0012               	return		;funcret
  8008   001886                     __end_of_printHex:
  8009                           	callstack 0
  8010                           
  8011 ;; *************** function _showConfigLeds *****************
  8012 ;; Defined at:
  8013 ;;		line 395 in file "TAD_MENU.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  index           1    wreg     unsigned char 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  index           1   10[COMRAM] unsigned char 
  8018 ;;  i               2   11[COMRAM] unsigned int 
  8019 ;;  buffer          4    6[COMRAM] unsigned char [4]
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      void 
  8022 ;; Registers used:
  8023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1
  8029 ;;      Params:         0       0       0
  8030 ;;      Locals:         9       0       0
  8031 ;;      Temps:          1       0       0
  8032 ;;      Totals:        10       0       0
  8033 ;;Total ram usage:       10 bytes
  8034 ;; Hardware stack levels used: 1
  8035 ;; Hardware stack levels required when called: 5
  8036 ;; This function calls:
  8037 ;;		_SIO_SendString
  8038 ;; This function is called by:
  8039 ;;		_MENU_Motor
  8040 ;;		_MENU_SaveUID
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           	psect	text38
  8045   001070                     __ptext38:
  8046                           	callstack 0
  8047   001070                     _showConfigLeds:
  8048                           	callstack 23
  8049                           
  8050                           ;incstack = 0
  8051                           ;showConfigLeds@index stored from wreg
  8052   001070  6E5C               	movwf	showConfigLeds@index^0,c
  8053                           
  8054                           ;TAD_MENU.c: 396:     char buffer[4];;TAD_MENU.c: 398:     SIO_SendString("\r\n\t");
  8055   001072  0EF2               	movlw	low STR_14
  8056   001074  6E53               	movwf	SIO_SendString@str^0,c
  8057   001076  0E1F               	movlw	high STR_14
  8058   001078  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8059   00107A  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8060                           
  8061                           ;TAD_MENU.c: 400:     for (unsigned int i = 0; i < 6; i++) {
  8062   00107E  0E00               	movlw	0
  8063   001080  6E5E               	movwf	(showConfigLeds@i+1)^0,c
  8064   001082  0E00               	movlw	0
  8065   001084  6E5D               	movwf	showConfigLeds@i^0,c
  8066   001086                     l3855:
  8067                           
  8068                           ;TAD_MENU.c: 401:         if (i > 0) {
  8069   001086  505D               	movf	showConfigLeds@i^0,w,c
  8070   001088  105E               	iorwf	(showConfigLeds@i+1)^0,w,c
  8071   00108A  B4D8               	btfsc	status,2,c
  8072   00108C  D006               	goto	l3859
  8073                           
  8074                           ;TAD_MENU.c: 402:             SIO_SendString(" - ");
  8075   00108E  0EF6               	movlw	low STR_15
  8076   001090  6E53               	movwf	SIO_SendString@str^0,c
  8077   001092  0E1F               	movlw	high STR_15
  8078   001094  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8079   001096  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8080   00109A                     l3859:
  8081                           
  8082                           ;TAD_MENU.c: 405:         buffer[0] = 'L';
  8083   00109A  0E4C               	movlw	76
  8084   00109C  6E58               	movwf	showConfigLeds@buffer^0,c
  8085                           
  8086                           ;TAD_MENU.c: 406:         buffer[1] = (char) i + '0';
  8087   00109E  505D               	movf	showConfigLeds@i^0,w,c
  8088   0010A0  0F30               	addlw	48
  8089   0010A2  6E59               	movwf	(showConfigLeds@buffer+1)^0,c
  8090                           
  8091                           ;TAD_MENU.c: 407:         buffer[2] = ':';
  8092   0010A4  0E3A               	movlw	58
  8093   0010A6  6E5A               	movwf	(showConfigLeds@buffer+2)^0,c
  8094                           
  8095                           ;TAD_MENU.c: 408:         buffer[3] = '\0';
  8096   0010A8  6A5B               	clrf	(showConfigLeds@buffer+3)^0,c
  8097                           
  8098                           ;TAD_MENU.c: 410:         SIO_SendString(buffer);
  8099   0010AA  0E58               	movlw	low showConfigLeds@buffer
  8100   0010AC  6E53               	movwf	SIO_SendString@str^0,c
  8101   0010AE  6A54               	clrf	(SIO_SendString@str+1)^0,c
  8102   0010B0  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8103                           
  8104                           ;TAD_MENU.c: 412:         buffer[0] = (leds_saved[index][i] == 10) ? 'A' : (leds_saved[i
      +                          ndex][i] + '0');
  8105   0010B4  505C               	movf	showConfigLeds@index^0,w,c
  8106   0010B6  0D06               	mullw	6
  8107   0010B8  50F3               	movf	243,w,c
  8108   0010BA  0FDC               	addlw	low _leds_saved@TAD_MENU$F1708
  8109   0010BC  245D               	addwf	showConfigLeds@i^0,w,c
  8110   0010BE  6ED9               	movwf	fsr2l,c
  8111   0010C0  6ADA               	clrf	fsr2h,c
  8112   0010C2  0E0A               	movlw	10
  8113   0010C4  18DE               	xorwf	postinc2,w,c
  8114   0010C6  B4D8               	btfsc	status,2,c
  8115   0010C8  D010               	goto	l3873
  8116   0010CA  505C               	movf	showConfigLeds@index^0,w,c
  8117   0010CC  0D06               	mullw	6
  8118   0010CE  50F3               	movf	243,w,c
  8119   0010D0  0FDC               	addlw	low _leds_saved@TAD_MENU$F1708
  8120   0010D2  245D               	addwf	showConfigLeds@i^0,w,c
  8121   0010D4  6ED9               	movwf	fsr2l,c
  8122   0010D6  6ADA               	clrf	fsr2h,c
  8123   0010D8  50DF               	movf	indf2,w,c
  8124   0010DA  6E55               	movwf	??_showConfigLeds^0,c
  8125   0010DC  0E30               	movlw	48
  8126   0010DE  2455               	addwf	??_showConfigLeds^0,w,c
  8127   0010E0  6E56               	movwf	_showConfigLeds$1797^0,c
  8128   0010E2  6A57               	clrf	(_showConfigLeds$1797+1)^0,c
  8129   0010E4  0E00               	movlw	0
  8130   0010E6  2257               	addwfc	(_showConfigLeds$1797+1)^0,f,c
  8131   0010E8  D004               	goto	l3875
  8132   0010EA                     l3873:
  8133   0010EA  0E00               	movlw	0
  8134   0010EC  6E57               	movwf	(_showConfigLeds$1797+1)^0,c
  8135   0010EE  0E41               	movlw	65
  8136   0010F0  6E56               	movwf	_showConfigLeds$1797^0,c
  8137   0010F2                     l3875:
  8138   0010F2  C056  F058         	movff	_showConfigLeds$1797,showConfigLeds@buffer
  8139                           
  8140                           ;TAD_MENU.c: 413:         buffer[1] = '\0';
  8141   0010F6  6A59               	clrf	(showConfigLeds@buffer+1)^0,c
  8142                           
  8143                           ;TAD_MENU.c: 415:         SIO_SendString(buffer);
  8144   0010F8  0E58               	movlw	low showConfigLeds@buffer
  8145   0010FA  6E53               	movwf	SIO_SendString@str^0,c
  8146   0010FC  6A54               	clrf	(SIO_SendString@str+1)^0,c
  8147   0010FE  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8148                           
  8149                           ;TAD_MENU.c: 416:     }
  8150   001102  4A5D               	infsnz	showConfigLeds@i^0,f,c
  8151   001104  2A5E               	incf	(showConfigLeds@i+1)^0,f,c
  8152   001106  505E               	movf	(showConfigLeds@i+1)^0,w,c
  8153   001108  E105               	bnz	u2630
  8154   00110A  0E06               	movlw	6
  8155   00110C  5C5D               	subwf	showConfigLeds@i^0,w,c
  8156   00110E  B0D8               	btfsc	status,0,c
  8157   001110  0012               	return	
  8158   001112  D7B9               	goto	l3855
  8159   001114                     u2630:
  8160   001114  0012               	return		;funcret
  8161   001116                     __end_of_showConfigLeds:
  8162                           	callstack 0
  8163                           
  8164 ;; *************** function _option3 *****************
  8165 ;; Defined at:
  8166 ;;		line 258 in file "TAD_MENU.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;  received_cha    1    wreg     unsigned char 
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;  received_cha    1    3[COMRAM] unsigned char 
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      void 
  8173 ;; Registers used:
  8174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1
  8180 ;;      Params:         0       0       0
  8181 ;;      Locals:         1       0       0
  8182 ;;      Temps:          0       0       0
  8183 ;;      Totals:         1       0       0
  8184 ;;Total ram usage:        1 bytes
  8185 ;; Hardware stack levels used: 1
  8186 ;; Hardware stack levels required when called: 5
  8187 ;; This function calls:
  8188 ;;		_SIO_Send
  8189 ;;		_SIO_SendString
  8190 ;; This function is called by:
  8191 ;;		_MENU_Motor
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text39
  8196   000A62                     __ptext39:
  8197                           	callstack 0
  8198   000A62                     _option3:
  8199                           	callstack 24
  8200                           
  8201                           ;incstack = 0
  8202                           ;option3@received_char stored from wreg
  8203   000A62  6E55               	movwf	option3@received_char^0,c
  8204                           
  8205                           ;TAD_MENU.c: 259:     switch(state_option3) {
  8206   000A64  D05E               	goto	l4475
  8207   000A66                     l4409:
  8208                           
  8209                           ;TAD_MENU.c: 261:             SIO_SendString(hora_sistema);
  8210   000A66  0E55               	movlw	low _hora_sistema
  8211   000A68  6E53               	movwf	SIO_SendString@str^0,c
  8212   000A6A  0E1F               	movlw	high _hora_sistema
  8213   000A6C  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8214   000A6E  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8215   000A72                     l4411:
  8216                           
  8217                           ;TAD_MENU.c: 262:             state_option3++;
  8218   000A72  2A22               	incf	_state_option3^0,f,c
  8219                           
  8220                           ;TAD_MENU.c: 263:             break;
  8221   000A74  0012               	return	
  8222   000A76                     l4413:
  8223                           
  8224                           ;TAD_MENU.c: 265:             if (received_char >= '0' && received_char <= '9') {
  8225   000A76  0E2F               	movlw	47
  8226   000A78  6455               	cpfsgt	option3@received_char^0,c
  8227   000A7A  0012               	return	
  8228   000A7C  0E3A               	movlw	58
  8229   000A7E  6055               	cpfslt	option3@received_char^0,c
  8230   000A80  0012               	return	
  8231                           
  8232                           ;TAD_MENU.c: 266:                 hora_h = received_char - '0';
  8233   000A82  5055               	movf	option3@received_char^0,w,c
  8234   000A84  0FD0               	addlw	208
  8235   000A86  6E1D               	movwf	_hora_h^0,c
  8236                           
  8237                           ;TAD_MENU.c: 267:                 SIO_Send(received_char);
  8238   000A88  5055               	movf	option3@received_char^0,w,c
  8239   000A8A  ECC7  F00E         	call	_SIO_Send
  8240   000A8E  D7F1               	goto	l4411
  8241   000A90                     l4423:
  8242                           
  8243                           ;TAD_MENU.c: 272:             if (received_char >= '0' && received_char <= '9') {
  8244   000A90  0E2F               	movlw	47
  8245   000A92  6455               	cpfsgt	option3@received_char^0,c
  8246   000A94  0012               	return	
  8247   000A96  0E3A               	movlw	58
  8248   000A98  6055               	cpfslt	option3@received_char^0,c
  8249   000A9A  0012               	return	
  8250                           
  8251                           ;TAD_MENU.c: 273:                 hora_l = received_char - '0';
  8252   000A9C  5055               	movf	option3@received_char^0,w,c
  8253   000A9E  0FD0               	addlw	208
  8254   000AA0  6E1C               	movwf	_hora_l^0,c
  8255                           
  8256                           ;TAD_MENU.c: 274:                 SIO_Send(received_char);
  8257   000AA2  5055               	movf	option3@received_char^0,w,c
  8258   000AA4  ECC7  F00E         	call	_SIO_Send
  8259   000AA8  D7E4               	goto	l4411
  8260   000AAA                     l4433:
  8261                           
  8262                           ;TAD_MENU.c: 279:             SIO_SendString(separador_hora);
  8263   000AAA  0E8D               	movlw	low _separador_hora
  8264   000AAC  6E53               	movwf	SIO_SendString@str^0,c
  8265   000AAE  0E1F               	movlw	high _separador_hora
  8266   000AB0  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8267   000AB2  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8268   000AB6  D7DD               	goto	l4411
  8269   000AB8                     l4437:
  8270                           
  8271                           ;TAD_MENU.c: 283:             if (received_char >= '0' && received_char <= '9') {
  8272   000AB8  0E2F               	movlw	47
  8273   000ABA  6455               	cpfsgt	option3@received_char^0,c
  8274   000ABC  0012               	return	
  8275   000ABE  0E3A               	movlw	58
  8276   000AC0  6055               	cpfslt	option3@received_char^0,c
  8277   000AC2  0012               	return	
  8278                           
  8279                           ;TAD_MENU.c: 284:                 minuts_h = received_char - '0';
  8280   000AC4  5055               	movf	option3@received_char^0,w,c
  8281   000AC6  0FD0               	addlw	208
  8282   000AC8  6E1B               	movwf	_minuts_h^0,c
  8283                           
  8284                           ;TAD_MENU.c: 285:                 SIO_Send(received_char);
  8285   000ACA  5055               	movf	option3@received_char^0,w,c
  8286   000ACC  ECC7  F00E         	call	_SIO_Send
  8287   000AD0  D7D0               	goto	l4411
  8288   000AD2                     l4447:
  8289                           
  8290                           ;TAD_MENU.c: 290:             if (received_char >= '0' && received_char <= '9') {
  8291   000AD2  0E2F               	movlw	47
  8292   000AD4  6455               	cpfsgt	option3@received_char^0,c
  8293   000AD6  0012               	return	
  8294   000AD8  0E3A               	movlw	58
  8295   000ADA  6055               	cpfslt	option3@received_char^0,c
  8296   000ADC  0012               	return	
  8297                           
  8298                           ;TAD_MENU.c: 291:                 minuts_l = received_char - '0';
  8299   000ADE  5055               	movf	option3@received_char^0,w,c
  8300   000AE0  0FD0               	addlw	208
  8301   000AE2  6E1A               	movwf	_minuts_l^0,c
  8302                           
  8303                           ;TAD_MENU.c: 292:                 SIO_Send(received_char);
  8304   000AE4  5055               	movf	option3@received_char^0,w,c
  8305   000AE6  ECC7  F00E         	call	_SIO_Send
  8306   000AEA  D7C3               	goto	l4411
  8307   000AEC                     l4457:
  8308                           
  8309                           ;TAD_MENU.c: 297:             SIO_SendString(enter_aplicar);
  8310   000AEC  0E3D               	movlw	low _enter_aplicar
  8311   000AEE  6E53               	movwf	SIO_SendString@str^0,c
  8312   000AF0  0E1F               	movlw	high _enter_aplicar
  8313   000AF2  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8314   000AF4  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8315   000AF8  D7BC               	goto	l4411
  8316   000AFA                     l4461:
  8317                           
  8318                           ;TAD_MENU.c: 301:             if (received_char == 0x0D) {
  8319   000AFA  0E0D               	movlw	13
  8320   000AFC  1855               	xorwf	option3@received_char^0,w,c
  8321   000AFE  A4D8               	btfss	status,2,c
  8322   000B00  0012               	return	
  8323                           
  8324                           ;TAD_MENU.c: 302:                 SIO_SendString(canvis_aplicats);
  8325   000B02  0E6A               	movlw	low _canvis_aplicats
  8326   000B04  6E53               	movwf	SIO_SendString@str^0,c
  8327   000B06  0E1F               	movlw	high _canvis_aplicats
  8328   000B08  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8329   000B0A  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8330   000B0E  D7B1               	goto	l4411
  8331   000B10                     l4467:
  8332                           
  8333                           ;TAD_MENU.c: 307:             if(someone) actualitzar_lcd = 1;
  8334   000B10  5018               	movf	_someone^0,w,c
  8335   000B12  B4D8               	btfsc	status,2,c
  8336   000B14  D002               	goto	l985
  8337   000B16  0E01               	movlw	1
  8338   000B18  6E17               	movwf	_actualitzar_lcd^0,c
  8339   000B1A                     l985:
  8340                           
  8341                           ;TAD_MENU.c: 308:             state_main_motor = 2;
  8342   000B1A  0E02               	movlw	2
  8343   000B1C  6E23               	movwf	_state_main_motor^0,c
  8344                           
  8345                           ;TAD_MENU.c: 309:             state_option3 = 0;
  8346   000B1E  6A22               	clrf	_state_option3^0,c
  8347                           
  8348                           ;TAD_MENU.c: 310:             break;
  8349   000B20  0012               	return	
  8350   000B22                     l4475:
  8351   000B22  5022               	movf	_state_option3^0,w,c
  8352                           
  8353                           ; Switch size 1, requested type "simple"
  8354                           ; Number of cases is 9, Range of values is 0 to 8
  8355                           ; switch strategies available:
  8356                           ; Name         Instructions Cycles
  8357                           ; simple_byte           28    15 (average)
  8358                           ;	Chosen strategy is simple_byte
  8359   000B24  0A00               	xorlw	0	; case 0
  8360   000B26  B4D8               	btfsc	status,2,c
  8361   000B28  D79E               	goto	l4409
  8362   000B2A  0A01               	xorlw	1	; case 1
  8363   000B2C  B4D8               	btfsc	status,2,c
  8364   000B2E  D7A3               	goto	l4413
  8365   000B30  0A03               	xorlw	3	; case 2
  8366   000B32  B4D8               	btfsc	status,2,c
  8367   000B34  D7AD               	goto	l4423
  8368   000B36  0A01               	xorlw	1	; case 3
  8369   000B38  B4D8               	btfsc	status,2,c
  8370   000B3A  D7B7               	goto	l4433
  8371   000B3C  0A07               	xorlw	7	; case 4
  8372   000B3E  B4D8               	btfsc	status,2,c
  8373   000B40  D7BB               	goto	l4437
  8374   000B42  0A01               	xorlw	1	; case 5
  8375   000B44  B4D8               	btfsc	status,2,c
  8376   000B46  D7C5               	goto	l4447
  8377   000B48  0A03               	xorlw	3	; case 6
  8378   000B4A  B4D8               	btfsc	status,2,c
  8379   000B4C  D7CF               	goto	l4457
  8380   000B4E  0A01               	xorlw	1	; case 7
  8381   000B50  B4D8               	btfsc	status,2,c
  8382   000B52  D7D3               	goto	l4461
  8383   000B54  0A0F               	xorlw	15	; case 8
  8384   000B56  A4D8               	btfss	status,2,c
  8385   000B58  0012               	return	
  8386   000B5A  D7DA               	goto	l4467
  8387   000B5C                     __end_of_option3:
  8388                           	callstack 0
  8389                           
  8390 ;; *************** function _handleMainMenu *****************
  8391 ;; Defined at:
  8392 ;;		line 232 in file "TAD_MENU.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;		None
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMRAM   BANK0   BANK1
  8406 ;;      Params:         0       0       0
  8407 ;;      Locals:         0       0       0
  8408 ;;      Temps:          0       0       0
  8409 ;;      Totals:         0       0       0
  8410 ;;Total ram usage:        0 bytes
  8411 ;; Hardware stack levels used: 1
  8412 ;; Hardware stack levels required when called: 5
  8413 ;; This function calls:
  8414 ;;		_SIO_SendString
  8415 ;; This function is called by:
  8416 ;;		_MENU_Motor
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text40
  8421   001C36                     __ptext40:
  8422                           	callstack 0
  8423   001C36                     _handleMainMenu:
  8424                           	callstack 24
  8425                           
  8426                           ;TAD_MENU.c: 233:     if(start_system || esc_key || hash_less_3s) {
  8427                           
  8428                           ;incstack = 0
  8429   001C36  5021               	movf	_start_system^0,w,c
  8430   001C38  A4D8               	btfss	status,2,c
  8431   001C3A  D006               	goto	u3160
  8432   001C3C  5020               	movf	_esc_key^0,w,c
  8433   001C3E  A4D8               	btfss	status,2,c
  8434   001C40  D003               	goto	u3160
  8435   001C42  501F               	movf	_hash_less_3s^0,w,c
  8436   001C44  B4D8               	btfsc	status,2,c
  8437   001C46  0012               	return	
  8438   001C48                     u3160:
  8439                           
  8440                           ;TAD_MENU.c: 234:         start_system = esc_key = hash_less_3s = 0;
  8441   001C48  6A1F               	clrf	_hash_less_3s^0,c
  8442   001C4A  6A20               	clrf	_esc_key^0,c
  8443   001C4C  6A21               	clrf	_start_system^0,c
  8444                           
  8445                           ;TAD_MENU.c: 236:         SIO_SendString(menu_principal);
  8446   001C4E  0E91               	movlw	low _menu_principal
  8447   001C50  6E53               	movwf	SIO_SendString@str^0,c
  8448   001C52  0E1E               	movlw	high _menu_principal
  8449   001C54  6E54               	movwf	(SIO_SendString@str+1)^0,c
  8450   001C56  ECC0  F00B         	call	_SIO_SendString	;wreg free
  8451   001C5A  0012               	return		;funcret
  8452   001C5C                     __end_of_handleMainMenu:
  8453                           	callstack 0
  8454                           
  8455 ;; *************** function _SIO_SendString *****************
  8456 ;; Defined at:
  8457 ;;		line 43 in file "TAD_SIO.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  str             2    1[COMRAM] PTR const unsigned char 
  8460 ;;		 -> showConfigLeds@buffer(4), STR_15(4), STR_14(4), STR_13(2), 
  8461 ;;		 -> STR_12(2), STR_11(2), STR_10(2), STR_9(9), 
  8462 ;;		 -> printHex@hex_out(3), STR_8(12), STR_7(2), STR_6(35), 
  8463 ;;		 -> STR_5(14), STR_4(15), STR_3(23), canvis_aplicats(19), 
  8464 ;;		 -> enter_aplicar(24), separador_hora(2), hora_sistema(21), menu_principal(172), 
  8465 ;;		 -> STR_2(12), STR_1(3), res_a_mostrar(16), 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1
  8477 ;;      Params:         2       0       0
  8478 ;;      Locals:         0       0       0
  8479 ;;      Temps:          0       0       0
  8480 ;;      Totals:         2       0       0
  8481 ;;Total ram usage:        2 bytes
  8482 ;; Hardware stack levels used: 1
  8483 ;; Hardware stack levels required when called: 4
  8484 ;; This function calls:
  8485 ;;		_SIO_Send
  8486 ;; This function is called by:
  8487 ;;		_MENU_Motor
  8488 ;;		_handleMainMenu
  8489 ;;		_option3
  8490 ;;		_MENU_SaveUID
  8491 ;;		_printHex
  8492 ;;		_showUID
  8493 ;;		_showConfigLeds
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text41
  8498   001780                     __ptext41:
  8499                           	callstack 0
  8500   001780                     _SIO_SendString:
  8501                           	callstack 22
  8502                           
  8503                           ;TAD_SIO.c: 44:     while(*str) {
  8504                           
  8505                           ;incstack = 0
  8506   001780  D017               	goto	l3655
  8507   001782                     l3651:
  8508                           
  8509                           ;TAD_SIO.c: 45:         if (SIO_Send(*str)) {
  8510   001782  C053  FFF6         	movff	SIO_SendString@str,tblptrl
  8511   001786  C054  FFF7         	movff	SIO_SendString@str+1,tblptrh
  8512   00178A  6AF8               	clrf	tblptru,c
  8513   00178C  0E01               	movlw	(high __ramtop+-1)
  8514   00178E  64F7               	cpfsgt	tblptrh,c
  8515   001790  D003               	bra	u2377
  8516   001792  0008               	tblrd		*
  8517   001794  50F5               	movf	tablat,w,c
  8518   001796  D005               	bra	u2370
  8519   001798                     u2377:
  8520   001798  CFF6 FFE1          	movff	tblptrl,fsr1l
  8521   00179C  CFF7 FFE2          	movff	tblptrh,fsr1h
  8522   0017A0  50E7               	movf	indf1,w,c
  8523   0017A2                     u2370:
  8524   0017A2  ECC7  F00E         	call	_SIO_Send
  8525   0017A6  0900               	iorlw	0
  8526   0017A8  B4D8               	btfsc	status,2,c
  8527   0017AA  D002               	goto	l3655
  8528                           
  8529                           ;TAD_SIO.c: 46:             str++;
  8530   0017AC  4A53               	infsnz	SIO_SendString@str^0,f,c
  8531   0017AE  2A54               	incf	(SIO_SendString@str+1)^0,f,c
  8532   0017B0                     l3655:
  8533                           
  8534                           ;TAD_SIO.c: 44:     while(*str) {
  8535   0017B0  C053  FFF6         	movff	SIO_SendString@str,tblptrl
  8536   0017B4  C054  FFF7         	movff	SIO_SendString@str+1,tblptrh
  8537   0017B8  6AF8               	clrf	tblptru,c
  8538   0017BA  0E01               	movlw	(high __ramtop+-1)
  8539   0017BC  64F7               	cpfsgt	tblptrh,c
  8540   0017BE  D003               	bra	u2397
  8541   0017C0  0008               	tblrd		*
  8542   0017C2  50F5               	movf	tablat,w,c
  8543   0017C4  D005               	bra	u2390
  8544   0017C6                     u2397:
  8545   0017C6  CFF6 FFE1          	movff	tblptrl,fsr1l
  8546   0017CA  CFF7 FFE2          	movff	tblptrh,fsr1h
  8547   0017CE  50E7               	movf	indf1,w,c
  8548   0017D0                     u2390:
  8549   0017D0  0900               	iorlw	0
  8550   0017D2  B4D8               	btfsc	status,2,c
  8551   0017D4  0012               	return	
  8552   0017D6  D7D5               	goto	l3651
  8553   0017D8                     __end_of_SIO_SendString:
  8554                           	callstack 0
  8555                           
  8556 ;; *************** function _SIO_Send *****************
  8557 ;; Defined at:
  8558 ;;		line 26 in file "TAD_SIO.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  character       1    wreg     unsigned char 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  character       1    0[COMRAM] unsigned char 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      unsigned char 
  8565 ;; Registers used:
  8566 ;;		wreg
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1
  8572 ;;      Params:         0       0       0
  8573 ;;      Locals:         1       0       0
  8574 ;;      Temps:          0       0       0
  8575 ;;      Totals:         1       0       0
  8576 ;;Total ram usage:        1 bytes
  8577 ;; Hardware stack levels used: 1
  8578 ;; Hardware stack levels required when called: 3
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_SIO_SendString
  8583 ;;		_MENU_Motor
  8584 ;;		_option3
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text42
  8589   001D8E                     __ptext42:
  8590                           	callstack 0
  8591   001D8E                     _SIO_Send:
  8592                           	callstack 22
  8593                           
  8594                           ;incstack = 0
  8595                           ;SIO_Send@character stored from wreg
  8596   001D8E  6E52               	movwf	SIO_Send@character^0,c
  8597                           
  8598                           ;TAD_SIO.c: 27:     if (TXSTAbits.TRMT) {
  8599   001D90  A2AC               	btfss	172,1,c	;volatile
  8600   001D92  D004               	goto	l3515
  8601                           
  8602                           ;TAD_SIO.c: 28:         TXREG = character;
  8603   001D94  C052  FFAD         	movff	SIO_Send@character,4013	;volatile
  8604                           
  8605                           ;TAD_SIO.c: 29:         return 1;
  8606   001D98  0E01               	movlw	1
  8607   001D9A  0012               	return	
  8608   001D9C                     l3515:
  8609                           
  8610                           ;TAD_SIO.c: 31:     return 0;
  8611   001D9C  0E00               	movlw	0
  8612   001D9E  0012               	return		;funcret
  8613   001DA0                     __end_of_SIO_Send:
  8614                           	callstack 0
  8615                           
  8616 ;; *************** function _handleIntensity *****************
  8617 ;; Defined at:
  8618 ;;		line 240 in file "TAD_MENU.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;		None
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      void 
  8625 ;; Registers used:
  8626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1
  8632 ;;      Params:         0       0       0
  8633 ;;      Locals:         0       0       0
  8634 ;;      Temps:          0       0       0
  8635 ;;      Totals:         0       0       0
  8636 ;;Total ram usage:        0 bytes
  8637 ;; Hardware stack levels used: 1
  8638 ;; Hardware stack levels required when called: 4
  8639 ;; This function calls:
  8640 ;;		_LEDS_setIntensitat
  8641 ;; This function is called by:
  8642 ;;		_MENU_Motor
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           	psect	text43
  8647   001478                     __ptext43:
  8648                           	callstack 0
  8649   001478                     _handleIntensity:
  8650                           	callstack 25
  8651                           
  8652                           ;TAD_MENU.c: 241:     if(!someone) {
  8653                           
  8654                           ;incstack = 0
  8655   001478  5018               	movf	_someone^0,w,c
  8656   00147A  A4D8               	btfss	status,2,c
  8657   00147C  D01F               	goto	l4397
  8658                           
  8659                           ;TAD_MENU.c: 242:         LEDS_setIntensitat(0, 0);
  8660   00147E  0E00               	movlw	0
  8661   001480  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  8662   001482  0E00               	movlw	0
  8663   001484  ECD9  F00E         	call	_LEDS_setIntensitat
  8664                           
  8665                           ;TAD_MENU.c: 243:         LEDS_setIntensitat(1, 0);
  8666   001488  0E00               	movlw	0
  8667   00148A  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  8668   00148C  0E01               	movlw	1
  8669   00148E  ECD9  F00E         	call	_LEDS_setIntensitat
  8670                           
  8671                           ;TAD_MENU.c: 244:         LEDS_setIntensitat(2, 0);
  8672   001492  0E00               	movlw	0
  8673   001494  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  8674   001496  0E02               	movlw	2
  8675   001498  ECD9  F00E         	call	_LEDS_setIntensitat
  8676                           
  8677                           ;TAD_MENU.c: 245:         LEDS_setIntensitat(3, 0);
  8678   00149C  0E00               	movlw	0
  8679   00149E  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  8680   0014A0  0E03               	movlw	3
  8681   0014A2  ECD9  F00E         	call	_LEDS_setIntensitat
  8682                           
  8683                           ;TAD_MENU.c: 246:         LEDS_setIntensitat(4, 0);
  8684   0014A6  0E00               	movlw	0
  8685   0014A8  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  8686   0014AA  0E04               	movlw	4
  8687   0014AC  ECD9  F00E         	call	_LEDS_setIntensitat
  8688                           
  8689                           ;TAD_MENU.c: 247:         LEDS_setIntensitat(5, 0);
  8690   0014B0  0E00               	movlw	0
  8691   0014B2  6E52               	movwf	LEDS_setIntensitat@valor^0,c
  8692   0014B4  0E05               	movlw	5
  8693   0014B6  ECD9  F00E         	call	_LEDS_setIntensitat
  8694                           
  8695                           ;TAD_MENU.c: 248:     } else {
  8696   0014BA  0012               	return	
  8697   0014BC                     l4397:
  8698                           
  8699                           ;TAD_MENU.c: 249:         LEDS_setIntensitat(0, LEDS_CURRENT[0]);
  8700   0014BC  C001  F052         	movff	_LEDS_CURRENT,LEDS_setIntensitat@valor
  8701   0014C0  0E00               	movlw	0
  8702   0014C2  ECD9  F00E         	call	_LEDS_setIntensitat
  8703                           
  8704                           ;TAD_MENU.c: 250:         LEDS_setIntensitat(1, LEDS_CURRENT[1]);
  8705   0014C6  C002  F052         	movff	_LEDS_CURRENT+1,LEDS_setIntensitat@valor
  8706   0014CA  0E01               	movlw	1
  8707   0014CC  ECD9  F00E         	call	_LEDS_setIntensitat
  8708                           
  8709                           ;TAD_MENU.c: 251:         LEDS_setIntensitat(2, LEDS_CURRENT[2]);
  8710   0014D0  C003  F052         	movff	_LEDS_CURRENT+2,LEDS_setIntensitat@valor
  8711   0014D4  0E02               	movlw	2
  8712   0014D6  ECD9  F00E         	call	_LEDS_setIntensitat
  8713                           
  8714                           ;TAD_MENU.c: 252:         LEDS_setIntensitat(3, LEDS_CURRENT[3]);
  8715   0014DA  C004  F052         	movff	_LEDS_CURRENT+3,LEDS_setIntensitat@valor
  8716   0014DE  0E03               	movlw	3
  8717   0014E0  ECD9  F00E         	call	_LEDS_setIntensitat
  8718                           
  8719                           ;TAD_MENU.c: 253:         LEDS_setIntensitat(4, LEDS_CURRENT[4]);
  8720   0014E4  C005  F052         	movff	_LEDS_CURRENT+4,LEDS_setIntensitat@valor
  8721   0014E8  0E04               	movlw	4
  8722   0014EA  ECD9  F00E         	call	_LEDS_setIntensitat
  8723                           
  8724                           ;TAD_MENU.c: 254:         LEDS_setIntensitat(5, LEDS_CURRENT[5]);
  8725   0014EE  C006  F052         	movff	_LEDS_CURRENT+5,LEDS_setIntensitat@valor
  8726   0014F2  0E05               	movlw	5
  8727   0014F4  ECD9  F00E         	call	_LEDS_setIntensitat
  8728   0014F8  0012               	return		;funcret
  8729   0014FA                     __end_of_handleIntensity:
  8730                           	callstack 0
  8731                           
  8732 ;; *************** function _LEDS_setIntensitat *****************
  8733 ;; Defined at:
  8734 ;;		line 61 in file "TAD_LEDS.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  quinLed         1    wreg     unsigned char 
  8737 ;;  valor           1    0[COMRAM] unsigned char 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  quinLed         1    1[COMRAM] unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1
  8749 ;;      Params:         1       0       0
  8750 ;;      Locals:         1       0       0
  8751 ;;      Temps:          0       0       0
  8752 ;;      Totals:         2       0       0
  8753 ;;Total ram usage:        2 bytes
  8754 ;; Hardware stack levels used: 1
  8755 ;; Hardware stack levels required when called: 3
  8756 ;; This function calls:
  8757 ;;		Nothing
  8758 ;; This function is called by:
  8759 ;;		_MENU_MotorHandleSetIntensity
  8760 ;;		_handleIntensity
  8761 ;;		_MENU_SaveUID
  8762 ;; This function uses a non-reentrant model
  8763 ;;
  8764                           
  8765                           	psect	text44
  8766   001DB2                     __ptext44:
  8767                           	callstack 0
  8768   001DB2                     _LEDS_setIntensitat:
  8769                           	callstack 25
  8770                           
  8771                           ;incstack = 0
  8772                           ;LEDS_setIntensitat@quinLed stored from wreg
  8773   001DB2  6E53               	movwf	LEDS_setIntensitat@quinLed^0,c
  8774                           
  8775                           ;TAD_LEDS.c: 62:     intensitat[quinLed] = valor;
  8776   001DB4  5053               	movf	LEDS_setIntensitat@quinLed^0,w,c
  8777   001DB6  0FAD               	addlw	low _intensitat
  8778   001DB8  6ED9               	movwf	fsr2l,c
  8779   001DBA  6ADA               	clrf	fsr2h,c
  8780   001DBC  C052  FFDF         	movff	LEDS_setIntensitat@valor,indf2
  8781   001DC0  0012               	return		;funcret
  8782   001DC2                     __end_of_LEDS_setIntensitat:
  8783                           	callstack 0
  8784                           
  8785 ;; *************** function _handleEscKey *****************
  8786 ;; Defined at:
  8787 ;;		line 224 in file "TAD_MENU.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;  received_cha    1    wreg     unsigned char 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  received_cha    1    0[COMRAM] unsigned char 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      void 
  8794 ;; Registers used:
  8795 ;;		wreg, status,2, status,0
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMRAM   BANK0   BANK1
  8801 ;;      Params:         0       0       0
  8802 ;;      Locals:         1       0       0
  8803 ;;      Temps:          0       0       0
  8804 ;;      Totals:         1       0       0
  8805 ;;Total ram usage:        1 bytes
  8806 ;; Hardware stack levels used: 1
  8807 ;; Hardware stack levels required when called: 3
  8808 ;; This function calls:
  8809 ;;		Nothing
  8810 ;; This function is called by:
  8811 ;;		_MENU_Motor
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           	psect	text45
  8816   001DA0                     __ptext45:
  8817                           	callstack 0
  8818   001DA0                     _handleEscKey:
  8819                           	callstack 26
  8820                           
  8821                           ;incstack = 0
  8822                           ;handleEscKey@received_char stored from wreg
  8823   001DA0  6E52               	movwf	handleEscKey@received_char^0,c
  8824                           
  8825                           ;TAD_MENU.c: 225:     if (received_char == 0x1B) {
  8826   001DA2  0E1B               	movlw	27
  8827   001DA4  1852               	xorwf	handleEscKey@received_char^0,w,c
  8828   001DA6  A4D8               	btfss	status,2,c
  8829   001DA8  0012               	return	
  8830                           
  8831                           ;TAD_MENU.c: 226:         esc_key = 1;
  8832   001DAA  0E01               	movlw	1
  8833   001DAC  6E20               	movwf	_esc_key^0,c
  8834                           
  8835                           ;TAD_MENU.c: 227:         state_main_motor = 0;
  8836   001DAE  6A23               	clrf	_state_main_motor^0,c
  8837   001DB0  0012               	return		;funcret
  8838   001DB2                     __end_of_handleEscKey:
  8839                           	callstack 0
  8840                           
  8841 ;; *************** function _SIO_Receive *****************
  8842 ;; Defined at:
  8843 ;;		line 34 in file "TAD_SIO.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  character       1    0[COMRAM] PTR unsigned char 
  8846 ;;		 -> MENU_Motor@received_char(1), 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      unsigned char 
  8851 ;; Registers used:
  8852 ;;		wreg, fsr2l, fsr2h, status,2
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMRAM   BANK0   BANK1
  8858 ;;      Params:         1       0       0
  8859 ;;      Locals:         0       0       0
  8860 ;;      Temps:          0       0       0
  8861 ;;      Totals:         1       0       0
  8862 ;;Total ram usage:        1 bytes
  8863 ;; Hardware stack levels used: 1
  8864 ;; Hardware stack levels required when called: 3
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_MENU_Motor
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           	psect	text46
  8873   001DC2                     __ptext46:
  8874                           	callstack 0
  8875   001DC2                     _SIO_Receive:
  8876                           	callstack 26
  8877                           
  8878                           ;TAD_SIO.c: 35:     if (PIR1bits.RCIF) {
  8879                           
  8880                           ;incstack = 0
  8881   001DC2  AA9E               	btfss	158,5,c	;volatile
  8882   001DC4  0012               	return	
  8883                           
  8884                           ;TAD_SIO.c: 36:         *character = RCREG;
  8885   001DC6  5052               	movf	SIO_Receive@character^0,w,c
  8886   001DC8  6ED9               	movwf	fsr2l,c
  8887   001DCA  6ADA               	clrf	fsr2h,c
  8888   001DCC  CFAE FFDF          	movff	4014,indf2	;volatile
  8889   001DD0  0012               	return		;funcret
  8890   001DD2                     __end_of_SIO_Receive:
  8891                           	callstack 0
  8892                           
  8893 ;; *************** function _MENU_Init *****************
  8894 ;; Defined at:
  8895 ;;		line 32 in file "TAD_MENU.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;		None
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;		None
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  1    wreg      void 
  8902 ;; Registers used:
  8903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMRAM   BANK0   BANK1
  8909 ;;      Params:         0       0       0
  8910 ;;      Locals:         0       0       0
  8911 ;;      Temps:          0       0       0
  8912 ;;      Totals:         0       0       0
  8913 ;;Total ram usage:        0 bytes
  8914 ;; Hardware stack levels used: 1
  8915 ;; Hardware stack levels required when called: 4
  8916 ;; This function calls:
  8917 ;;		_TI_NewTimer
  8918 ;; This function is called by:
  8919 ;;		_main
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text47
  8924   001C5C                     __ptext47:
  8925                           	callstack 0
  8926   001C5C                     _MENU_Init:
  8927                           	callstack 26
  8928                           
  8929                           ;incstack = 0
  8930   001C5C  6A4F               	clrf	_key@TAD_MENU$F1730^0,c
  8931   001C5E  6A1A               	clrf	_minuts_l^0,c
  8932   001C60  6A1B               	clrf	_minuts_h^0,c
  8933   001C62  6A1C               	clrf	_hora_l^0,c
  8934   001C64  6A1D               	clrf	_hora_h^0,c
  8935                           
  8936                           ;TAD_MENU.c: 33:     state_main_motor = state_option3 =
  8937   001C66  6A1F               	clrf	_hash_less_3s^0,c
  8938   001C68  6A20               	clrf	_esc_key^0,c
  8939   001C6A  6A18               	clrf	_someone^0,c
  8940   001C6C  6A17               	clrf	_actualitzar_lcd^0,c
  8941   001C6E  6A22               	clrf	_state_option3^0,c
  8942   001C70  6A23               	clrf	_state_main_motor^0,c
  8943                           
  8944                           ;TAD_MENU.c: 37:     state_setIntensity = 0;
  8945   001C72  6A14               	clrf	_state_setIntensity^0,c
  8946                           
  8947                           ;TAD_MENU.c: 38:     start_system = 1;
  8948   001C74  0E01               	movlw	1
  8949   001C76  6E21               	movwf	_start_system^0,c
  8950                           
  8951                           ;TAD_MENU.c: 40:     TI_NewTimer(&TimerHash);
  8952   001C78  0E4E               	movlw	low _TimerHash
  8953   001C7A  6E52               	movwf	TI_NewTimer@TimerHandle^0,c
  8954   001C7C  EC44  F00D         	call	_TI_NewTimer	;wreg free
  8955   001C80  0012               	return		;funcret
  8956   001C82                     __end_of_MENU_Init:
  8957                           	callstack 0
  8958                           
  8959 ;; *************** function _LcInit *****************
  8960 ;; Defined at:
  8961 ;;		line 69 in file "LcTLCD.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  rows            1    wreg     unsigned char 
  8964 ;;  columns         1   20[COMRAM] unsigned char 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  rows            1   21[COMRAM] unsigned char 
  8967 ;;  i               2   22[COMRAM] int 
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      void 
  8970 ;; Registers used:
  8971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMRAM   BANK0   BANK1
  8977 ;;      Params:         1       0       0
  8978 ;;      Locals:         3       0       0
  8979 ;;      Temps:          0       0       0
  8980 ;;      Totals:         4       0       0
  8981 ;;Total ram usage:        4 bytes
  8982 ;; Hardware stack levels used: 1
  8983 ;; Hardware stack levels required when called: 5
  8984 ;; This function calls:
  8985 ;;		_CantaIR
  8986 ;;		_EscriuPrimeraOrdre
  8987 ;;		_Espera
  8988 ;;		_TI_NewTimer
  8989 ;;		_WaitForBusy
  8990 ;; This function is called by:
  8991 ;;		_main
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text48
  8996   000ED2                     __ptext48:
  8997                           	callstack 0
  8998   000ED2                     _LcInit:
  8999                           	callstack 25
  9000                           
  9001                           ;incstack = 0
  9002                           ;LcInit@rows stored from wreg
  9003   000ED2  6E67               	movwf	LcInit@rows^0,c
  9004                           
  9005                           ;LcTLCD.c: 75:  int i;;LcTLCD.c: 77:     TI_NewTimer(&Timer);
  9006   000ED4  0E51               	movlw	low _Timer
  9007   000ED6  6E52               	movwf	TI_NewTimer@TimerHandle^0,c
  9008   000ED8  EC44  F00D         	call	_TI_NewTimer	;wreg free
  9009                           
  9010                           ;LcTLCD.c: 78:  Rows = rows; Columns = columns;
  9011   000EDC  C067  F049         	movff	LcInit@rows,_Rows
  9012   000EE0  C066  F048         	movff	LcInit@columns,_Columns
  9013                           
  9014                           ;LcTLCD.c: 79:  RowAct = ColumnAct = 0;
  9015   000EE4  6A46               	clrf	_ColumnAct^0,c
  9016   000EE6  6A47               	clrf	_RowAct^0,c
  9017                           
  9018                           ;LcTLCD.c: 80:  (TRISAbits.TRISA2 = TRISAbits.TRISA3 = TRISAbits.TRISA4 = 0);
  9019   000EE8  9892               	bcf	146,4,c	;volatile
  9020   000EEA  9692               	bcf	146,3,c	;volatile
  9021   000EEC  9492               	bcf	146,2,c	;volatile
  9022                           
  9023                           ;LcTLCD.c: 81:  for (i = 0; i < 2; i++) {
  9024   000EEE  0E00               	movlw	0
  9025   000EF0  6E69               	movwf	(LcInit@i+1)^0,c
  9026   000EF2  0E00               	movlw	0
  9027   000EF4  6E68               	movwf	LcInit@i^0,c
  9028   000EF6                     l4633:
  9029                           
  9030                           ;LcTLCD.c: 82:   Espera(Timer, 100);
  9031   000EF6  0E00               	movlw	0
  9032   000EF8  6E60               	movwf	(Espera@ms+1)^0,c
  9033   000EFA  0E64               	movlw	100
  9034   000EFC  6E5F               	movwf	Espera@ms^0,c
  9035   000EFE  5051               	movf	_Timer^0,w,c
  9036   000F00  EC62  F00D         	call	_Espera
  9037                           
  9038                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  9039   000F04  0E03               	movlw	3
  9040   000F06  EC7D  F00A         	call	_EscriuPrimeraOrdre
  9041                           
  9042                           ;LcTLCD.c: 86:   Espera(Timer, 5);
  9043   000F0A  0E00               	movlw	0
  9044   000F0C  6E60               	movwf	(Espera@ms+1)^0,c
  9045   000F0E  0E05               	movlw	5
  9046   000F10  6E5F               	movwf	Espera@ms^0,c
  9047   000F12  5051               	movf	_Timer^0,w,c
  9048   000F14  EC62  F00D         	call	_Espera
  9049                           
  9050                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  9051   000F18  0E03               	movlw	3
  9052   000F1A  EC7D  F00A         	call	_EscriuPrimeraOrdre
  9053                           
  9054                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  9055   000F1E  0E00               	movlw	0
  9056   000F20  6E60               	movwf	(Espera@ms+1)^0,c
  9057   000F22  0E01               	movlw	1
  9058   000F24  6E5F               	movwf	Espera@ms^0,c
  9059   000F26  5051               	movf	_Timer^0,w,c
  9060   000F28  EC62  F00D         	call	_Espera
  9061                           
  9062                           ;LcTLCD.c: 89:   EscriuPrimeraOrdre(0x02 | 0x01);
  9063   000F2C  0E03               	movlw	3
  9064   000F2E  EC7D  F00A         	call	_EscriuPrimeraOrdre
  9065                           
  9066                           ;LcTLCD.c: 90:   Espera(Timer, 1);
  9067   000F32  0E00               	movlw	0
  9068   000F34  6E60               	movwf	(Espera@ms+1)^0,c
  9069   000F36  0E01               	movlw	1
  9070   000F38  6E5F               	movwf	Espera@ms^0,c
  9071   000F3A  5051               	movf	_Timer^0,w,c
  9072   000F3C  EC62  F00D         	call	_Espera
  9073                           
  9074                           ;LcTLCD.c: 93:   EscriuPrimeraOrdre(0x02);
  9075   000F40  0E02               	movlw	2
  9076   000F42  EC7D  F00A         	call	_EscriuPrimeraOrdre
  9077                           
  9078                           ;LcTLCD.c: 94:   Espera(Timer, 1);
  9079   000F46  0E00               	movlw	0
  9080   000F48  6E60               	movwf	(Espera@ms+1)^0,c
  9081   000F4A  0E01               	movlw	1
  9082   000F4C  6E5F               	movwf	Espera@ms^0,c
  9083   000F4E  5051               	movf	_Timer^0,w,c
  9084   000F50  EC62  F00D         	call	_Espera
  9085                           
  9086                           ;LcTLCD.c: 95:   CantaIR(0x20 | 0x08);
  9087   000F54  0E28               	movlw	40
  9088   000F56  ECB0  F00D         	call	_CantaIR
  9089                           
  9090                           ;LcTLCD.c: 98:   WaitForBusy(); CantaIR(0x08);
  9091   000F5A  EC01  F00D         	call	_WaitForBusy	;wreg free
  9092   000F5E  0E08               	movlw	8
  9093   000F60  ECB0  F00D         	call	_CantaIR
  9094                           
  9095                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x01);
  9096   000F64  EC01  F00D         	call	_WaitForBusy	;wreg free
  9097   000F68  0E01               	movlw	1
  9098   000F6A  ECB0  F00D         	call	_CantaIR
  9099                           
  9100                           ;LcTLCD.c: 100:   Espera(Timer,3);
  9101   000F6E  0E00               	movlw	0
  9102   000F70  6E60               	movwf	(Espera@ms+1)^0,c
  9103   000F72  0E03               	movlw	3
  9104   000F74  6E5F               	movwf	Espera@ms^0,c
  9105   000F76  5051               	movf	_Timer^0,w,c
  9106   000F78  EC62  F00D         	call	_Espera
  9107                           
  9108                           ;LcTLCD.c: 101:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9109   000F7C  EC01  F00D         	call	_WaitForBusy	;wreg free
  9110   000F80  0E06               	movlw	6
  9111   000F82  ECB0  F00D         	call	_CantaIR
  9112                           
  9113                           ;LcTLCD.c: 102:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9114   000F86  EC01  F00D         	call	_WaitForBusy	;wreg free
  9115   000F8A  0E0F               	movlw	15
  9116   000F8C  ECB0  F00D         	call	_CantaIR
  9117                           
  9118                           ;LcTLCD.c: 103:  }
  9119   000F90  4A68               	infsnz	LcInit@i^0,f,c
  9120   000F92  2A69               	incf	(LcInit@i+1)^0,f,c
  9121   000F94  BE69               	btfsc	(LcInit@i+1)^0,7,c
  9122   000F96  D7AF               	goto	l4633
  9123   000F98  5069               	movf	(LcInit@i+1)^0,w,c
  9124   000F9A  E105               	bnz	u3410
  9125   000F9C  0E02               	movlw	2
  9126   000F9E  5C68               	subwf	LcInit@i^0,w,c
  9127   000FA0  B0D8               	btfsc	status,0,c
  9128   000FA2  0012               	return	
  9129   000FA4  D7A8               	goto	l4633
  9130   000FA6                     u3410:
  9131   000FA6  0012               	return		;funcret
  9132   000FA8                     __end_of_LcInit:
  9133                           	callstack 0
  9134                           
  9135 ;; *************** function _Espera *****************
  9136 ;; Defined at:
  9137 ;;		line 215 in file "LcTLCD.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  Timer           1    wreg     unsigned char 
  9140 ;;  ms              2   13[COMRAM] int 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;  Timer           1   19[COMRAM] unsigned char 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  1    wreg      void 
  9145 ;; Registers used:
  9146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1
  9152 ;;      Params:         2       0       0
  9153 ;;      Locals:         1       0       0
  9154 ;;      Temps:          4       0       0
  9155 ;;      Totals:         7       0       0
  9156 ;;Total ram usage:        7 bytes
  9157 ;; Hardware stack levels used: 1
  9158 ;; Hardware stack levels required when called: 4
  9159 ;; This function calls:
  9160 ;;		_TI_GetTics
  9161 ;;		_TI_ResetTics
  9162 ;; This function is called by:
  9163 ;;		_LcInit
  9164 ;;		_LcClear
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text49
  9169   001AC4                     __ptext49:
  9170                           	callstack 0
  9171   001AC4                     _Espera:
  9172                           	callstack 23
  9173                           
  9174                           ;incstack = 0
  9175                           ;Espera@Timer stored from wreg
  9176   001AC4  6E65               	movwf	Espera@Timer^0,c
  9177                           
  9178                           ;LcTLCD.c: 216:  TI_ResetTics(Timer);
  9179   001AC6  5065               	movf	Espera@Timer^0,w,c
  9180   001AC8  EC66  F00E         	call	_TI_ResetTics
  9181   001ACC                     l3659:
  9182   001ACC  C05F  F061         	movff	Espera@ms,??_Espera
  9183   001AD0  C060  F062         	movff	Espera@ms+1,??_Espera+1
  9184   001AD4  0E00               	movlw	0
  9185   001AD6  BE62               	btfsc	(??_Espera+1)^0,7,c
  9186   001AD8  0EFF               	movlw	255
  9187   001ADA  6E63               	movwf	(??_Espera+2)^0,c
  9188   001ADC  6E64               	movwf	(??_Espera+3)^0,c
  9189   001ADE  5065               	movf	Espera@Timer^0,w,c
  9190   001AE0  EC92  F00C         	call	_TI_GetTics
  9191   001AE4  5061               	movf	??_Espera^0,w,c
  9192   001AE6  5C52               	subwf	?_TI_GetTics^0,w,c
  9193   001AE8  5062               	movf	(??_Espera+1)^0,w,c
  9194   001AEA  5853               	subwfb	(?_TI_GetTics+1)^0,w,c
  9195   001AEC  5063               	movf	(??_Espera+2)^0,w,c
  9196   001AEE  5854               	subwfb	(?_TI_GetTics+2)^0,w,c
  9197   001AF0  5064               	movf	(??_Espera+3)^0,w,c
  9198   001AF2  5855               	subwfb	(?_TI_GetTics+3)^0,w,c
  9199   001AF4  B0D8               	btfsc	status,0,c
  9200   001AF6  0012               	return	
  9201   001AF8  D7E9               	goto	l3659
  9202   001AFA                     __end_of_Espera:
  9203                           	callstack 0
  9204                           
  9205 ;; *************** function _EscriuPrimeraOrdre *****************
  9206 ;; Defined at:
  9207 ;;		line 284 in file "LcTLCD.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;  ordre           1    wreg     unsigned char 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  ordre           1    1[COMRAM] unsigned char 
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, status,2, status,0
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMRAM   BANK0   BANK1
  9221 ;;      Params:         0       0       0
  9222 ;;      Locals:         1       0       0
  9223 ;;      Temps:          1       0       0
  9224 ;;      Totals:         2       0       0
  9225 ;;Total ram usage:        2 bytes
  9226 ;; Hardware stack levels used: 1
  9227 ;; Hardware stack levels required when called: 3
  9228 ;; This function calls:
  9229 ;;		Nothing
  9230 ;; This function is called by:
  9231 ;;		_LcInit
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           	psect	text50
  9236   0014FA                     __ptext50:
  9237                           	callstack 0
  9238   0014FA                     _EscriuPrimeraOrdre:
  9239                           	callstack 26
  9240                           
  9241                           ;incstack = 0
  9242                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9243   0014FA  6E53               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9244                           
  9245                           ;LcTLCD.c: 286:  (TRISAbits.TRISA5 = TRISEbits.TRISE0 = TRISEbits.TRISE1 = TRISEbits.TRI
      +                          SE2 = 0); (LATAbits.LATA2 = 0); (LATAbits.LATA3 = 0);
  9246   0014FC  9496               	bcf	150,2,c	;volatile
  9247   0014FE  9296               	bcf	150,1,c	;volatile
  9248   001500  9096               	bcf	150,0,c	;volatile
  9249   001502  9A92               	bcf	146,5,c	;volatile
  9250   001504  9489               	bcf	137,2,c	;volatile
  9251   001506  9689               	bcf	137,3,c	;volatile
  9252                           
  9253                           ;LcTLCD.c: 287:  (LATAbits.LATA4 = 1); (LATAbits.LATA4 = 1);
  9254   001508  8889               	bsf	137,4,c	;volatile
  9255   00150A  8889               	bsf	137,4,c	;volatile
  9256                           
  9257                           ;LcTLCD.c: 288:   (LATEbits.LATE2 = (ordre & 0x08 ? 1 : 0));
  9258   00150C  A653               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9259   00150E  D003               	goto	u700
  9260   001510  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9261   001512  2A52               	incf	??_EscriuPrimeraOrdre^0,f,c
  9262   001514  D001               	goto	u718
  9263   001516                     u700:
  9264   001516  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9265   001518                     u718:
  9266   001518  4652               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9267   00151A  4652               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9268   00151C  508D               	movf	141,w,c	;volatile
  9269   00151E  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9270   001520  0BFB               	andlw	-5
  9271   001522  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9272   001524  6E8D               	movwf	141,c	;volatile
  9273                           
  9274                           ;LcTLCD.c: 289:   (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  9275   001526  A453               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9276   001528  D003               	goto	u720
  9277   00152A  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9278   00152C  2A52               	incf	??_EscriuPrimeraOrdre^0,f,c
  9279   00152E  D001               	goto	u738
  9280   001530                     u720:
  9281   001530  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9282   001532                     u738:
  9283   001532  4652               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9284   001534  508D               	movf	141,w,c	;volatile
  9285   001536  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9286   001538  0BFD               	andlw	-3
  9287   00153A  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9288   00153C  6E8D               	movwf	141,c	;volatile
  9289                           
  9290                           ;LcTLCD.c: 290:   (LATEbits.LATE0 = (ordre & 0x02 ? 1 : 0));
  9291   00153E  A253               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9292   001540  D003               	goto	u740
  9293   001542  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9294   001544  2A52               	incf	??_EscriuPrimeraOrdre^0,f,c
  9295   001546  D001               	goto	u758
  9296   001548                     u740:
  9297   001548  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9298   00154A                     u758:
  9299   00154A  508D               	movf	141,w,c	;volatile
  9300   00154C  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9301   00154E  0BFE               	andlw	-2
  9302   001550  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9303   001552  6E8D               	movwf	141,c	;volatile
  9304                           
  9305                           ;LcTLCD.c: 291:   (LATAbits.LATA5 = (ordre & 0x01 ? 1 : 0));
  9306   001554  A053               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9307   001556  D003               	goto	u760
  9308   001558  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9309   00155A  2A52               	incf	??_EscriuPrimeraOrdre^0,f,c
  9310   00155C  D001               	goto	u778
  9311   00155E                     u760:
  9312   00155E  6A52               	clrf	??_EscriuPrimeraOrdre^0,c
  9313   001560                     u778:
  9314   001560  3A52               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9315   001562  4652               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9316   001564  5089               	movf	137,w,c	;volatile
  9317   001566  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9318   001568  0BDF               	andlw	-33
  9319   00156A  1852               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9320   00156C  6E89               	movwf	137,c	;volatile
  9321                           
  9322                           ;LcTLCD.c: 292:  (LATAbits.LATA4 = 0);
  9323   00156E  9889               	bcf	137,4,c	;volatile
  9324   001570  0012               	return		;funcret
  9325   001572                     __end_of_EscriuPrimeraOrdre:
  9326                           	callstack 0
  9327                           
  9328 ;; *************** function _LcCursorOn *****************
  9329 ;; Defined at:
  9330 ;;		line 122 in file "LcTLCD.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  1    wreg      void 
  9337 ;; Registers used:
  9338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1
  9344 ;;      Params:         0       0       0
  9345 ;;      Locals:         0       0       0
  9346 ;;      Temps:          0       0       0
  9347 ;;      Totals:         0       0       0
  9348 ;;Total ram usage:        0 bytes
  9349 ;; Hardware stack levels used: 1
  9350 ;; Hardware stack levels required when called: 5
  9351 ;; This function calls:
  9352 ;;		_CantaIR
  9353 ;;		_WaitForBusy
  9354 ;; This function is called by:
  9355 ;;		_main
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text51
  9360   001E04                     __ptext51:
  9361                           	callstack 0
  9362   001E04                     _LcCursorOn:
  9363                           	callstack 25
  9364                           
  9365                           ;LcTLCD.c: 125:  WaitForBusy();
  9366                           
  9367                           ;incstack = 0
  9368   001E04  EC01  F00D         	call	_WaitForBusy	;wreg free
  9369                           
  9370                           ;LcTLCD.c: 126:  CantaIR(0x08 | 0x04 | 0x02);
  9371   001E08  0E0E               	movlw	14
  9372   001E0A  ECB0  F00D         	call	_CantaIR
  9373   001E0E  0012               	return		;funcret
  9374   001E10                     __end_of_LcCursorOn:
  9375                           	callstack 0
  9376                           
  9377 ;; *************** function _WaitForBusy *****************
  9378 ;; Defined at:
  9379 ;;		line 266 in file "LcTLCD.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  Busy            1   13[COMRAM] unsigned char 
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1
  9393 ;;      Params:         0       0       0
  9394 ;;      Locals:         1       0       0
  9395 ;;      Temps:          0       0       0
  9396 ;;      Totals:         1       0       0
  9397 ;;Total ram usage:        1 bytes
  9398 ;; Hardware stack levels used: 1
  9399 ;; Hardware stack levels required when called: 4
  9400 ;; This function calls:
  9401 ;;		_TI_GetTics
  9402 ;;		_TI_ResetTics
  9403 ;; This function is called by:
  9404 ;;		_LcInit
  9405 ;;		_LcClear
  9406 ;;		_LcCursorOn
  9407 ;;		_LcGotoXY
  9408 ;;		_LcPutChar
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text52
  9413   001A02                     __ptext52:
  9414                           	callstack 0
  9415   001A02                     _WaitForBusy:
  9416                           	callstack 23
  9417                           
  9418                           ;LcTLCD.c: 267:  (TRISAbits.TRISA5 = TRISEbits.TRISE0 = TRISEbits.TRISE1 = TRISEbits.TRI
      +                          SE2 = 1);
  9419                           
  9420                           ;incstack = 0
  9421   001A02  8496               	bsf	150,2,c	;volatile
  9422   001A04  8296               	bsf	150,1,c	;volatile
  9423   001A06  8096               	bsf	150,0,c	;volatile
  9424   001A08  8A92               	bsf	146,5,c	;volatile
  9425                           
  9426                           ;LcTLCD.c: 268:  (LATAbits.LATA2 = 0);
  9427   001A0A  9489               	bcf	137,2,c	;volatile
  9428                           
  9429                           ;LcTLCD.c: 269:  (LATAbits.LATA3 = 1);
  9430   001A0C  8689               	bsf	137,3,c	;volatile
  9431                           
  9432                           ;LcTLCD.c: 270:  TI_ResetTics(Timer);
  9433   001A0E  5051               	movf	_Timer^0,w,c
  9434   001A10  EC66  F00E         	call	_TI_ResetTics
  9435   001A14                     l3541:
  9436                           
  9437                           ;LcTLCD.c: 272:   (LATAbits.LATA4 = 1);(LATAbits.LATA4 = 1);
  9438   001A14  8889               	bsf	137,4,c	;volatile
  9439   001A16  8889               	bsf	137,4,c	;volatile
  9440                           
  9441                           ;LcTLCD.c: 273:   Busy = (PORTEbits.RE2);
  9442   001A18  0E00               	movlw	0
  9443   001A1A  B484               	btfsc	132,2,c	;volatile
  9444   001A1C  0E01               	movlw	1
  9445   001A1E  6E5F               	movwf	WaitForBusy@Busy^0,c
  9446                           
  9447                           ;LcTLCD.c: 274:   (LATAbits.LATA4 = 0);
  9448   001A20  9889               	bcf	137,4,c	;volatile
  9449                           
  9450                           ;LcTLCD.c: 275:   (LATAbits.LATA4 = 0);
  9451   001A22  9889               	bcf	137,4,c	;volatile
  9452                           
  9453                           ;LcTLCD.c: 276:   (LATAbits.LATA4 = 1);(LATAbits.LATA4 = 1);
  9454   001A24  8889               	bsf	137,4,c	;volatile
  9455   001A26  8889               	bsf	137,4,c	;volatile
  9456                           
  9457                           ;LcTLCD.c: 278:   (LATAbits.LATA4 = 0);
  9458   001A28  9889               	bcf	137,4,c	;volatile
  9459                           
  9460                           ;LcTLCD.c: 279:   (LATAbits.LATA4 = 0);
  9461   001A2A  9889               	bcf	137,4,c	;volatile
  9462                           
  9463                           ;LcTLCD.c: 280:   if (TI_GetTics(Timer)) break;
  9464   001A2C  5051               	movf	_Timer^0,w,c
  9465   001A2E  EC92  F00C         	call	_TI_GetTics
  9466   001A32  5052               	movf	?_TI_GetTics^0,w,c
  9467   001A34  1053               	iorwf	(?_TI_GetTics+1)^0,w,c
  9468   001A36  1054               	iorwf	(?_TI_GetTics+2)^0,w,c
  9469   001A38  1055               	iorwf	(?_TI_GetTics+3)^0,w,c
  9470   001A3A  A4D8               	btfss	status,2,c
  9471   001A3C  0012               	return	
  9472                           
  9473                           ;LcTLCD.c: 281:  } while(Busy);
  9474   001A3E  505F               	movf	WaitForBusy@Busy^0,w,c
  9475   001A40  B4D8               	btfsc	status,2,c
  9476   001A42  0012               	return	
  9477   001A44  D7E7               	goto	l3541
  9478   001A46                     __end_of_WaitForBusy:
  9479                           	callstack 0
  9480                           
  9481 ;; *************** function _CantaIR *****************
  9482 ;; Defined at:
  9483 ;;		line 234 in file "LcTLCD.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;  IR              1    wreg     unsigned char 
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  IR              1    2[COMRAM] unsigned char 
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  1    wreg      void 
  9490 ;; Registers used:
  9491 ;;		wreg, status,2, status,0, cstack
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMRAM   BANK0   BANK1
  9497 ;;      Params:         0       0       0
  9498 ;;      Locals:         1       0       0
  9499 ;;      Temps:          0       0       0
  9500 ;;      Totals:         1       0       0
  9501 ;;Total ram usage:        1 bytes
  9502 ;; Hardware stack levels used: 1
  9503 ;; Hardware stack levels required when called: 4
  9504 ;; This function calls:
  9505 ;;		_CantaPartAlta
  9506 ;;		_CantaPartBaixa
  9507 ;; This function is called by:
  9508 ;;		_LcInit
  9509 ;;		_LcClear
  9510 ;;		_LcCursorOn
  9511 ;;		_LcGotoXY
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	text53
  9516   001B60                     __ptext53:
  9517                           	callstack 0
  9518   001B60                     _CantaIR:
  9519                           	callstack 23
  9520                           
  9521                           ;incstack = 0
  9522                           ;CantaIR@IR stored from wreg
  9523   001B60  6E54               	movwf	CantaIR@IR^0,c
  9524                           
  9525                           ;LcTLCD.c: 235:  (TRISAbits.TRISA5 = TRISEbits.TRISE0 = TRISEbits.TRISE1 = TRISEbits.TRI
      +                          SE2 = 0);
  9526   001B62  9496               	bcf	150,2,c	;volatile
  9527   001B64  9296               	bcf	150,1,c	;volatile
  9528   001B66  9096               	bcf	150,0,c	;volatile
  9529   001B68  9A92               	bcf	146,5,c	;volatile
  9530                           
  9531                           ;LcTLCD.c: 236:  (LATAbits.LATA2 = 0);
  9532   001B6A  9489               	bcf	137,2,c	;volatile
  9533                           
  9534                           ;LcTLCD.c: 237:  (LATAbits.LATA3 = 0);
  9535   001B6C  9689               	bcf	137,3,c	;volatile
  9536                           
  9537                           ;LcTLCD.c: 238:  (LATAbits.LATA4 = 1);
  9538   001B6E  8889               	bsf	137,4,c	;volatile
  9539                           
  9540                           ;LcTLCD.c: 239:  CantaPartAlta(IR);
  9541   001B70  5054               	movf	CantaIR@IR^0,w,c
  9542   001B72  EC60  F00B         	call	_CantaPartAlta
  9543                           
  9544                           ;LcTLCD.c: 240:  (LATAbits.LATA4 = 1);
  9545   001B76  8889               	bsf	137,4,c	;volatile
  9546                           
  9547                           ;LcTLCD.c: 241:  (LATAbits.LATA4 = 0);
  9548   001B78  9889               	bcf	137,4,c	;volatile
  9549                           
  9550                           ;LcTLCD.c: 242:  (LATAbits.LATA4 = 0);
  9551   001B7A  9889               	bcf	137,4,c	;volatile
  9552                           
  9553                           ;LcTLCD.c: 243:  (LATAbits.LATA4 = 1);
  9554   001B7C  8889               	bsf	137,4,c	;volatile
  9555                           
  9556                           ;LcTLCD.c: 244:  CantaPartBaixa(IR);
  9557   001B7E  5054               	movf	CantaIR@IR^0,w,c
  9558   001B80  EC2D  F00B         	call	_CantaPartBaixa
  9559                           
  9560                           ;LcTLCD.c: 245:  (LATAbits.LATA4 = 1);
  9561   001B84  8889               	bsf	137,4,c	;volatile
  9562                           
  9563                           ;LcTLCD.c: 246:  (LATAbits.LATA4 = 0);
  9564   001B86  9889               	bcf	137,4,c	;volatile
  9565                           
  9566                           ;LcTLCD.c: 247:  (TRISAbits.TRISA5 = TRISEbits.TRISE0 = TRISEbits.TRISE1 = TRISEbits.TRI
      +                          SE2 = 1);
  9567   001B88  8496               	bsf	150,2,c	;volatile
  9568   001B8A  8296               	bsf	150,1,c	;volatile
  9569   001B8C  8096               	bsf	150,0,c	;volatile
  9570   001B8E  8A92               	bsf	146,5,c	;volatile
  9571   001B90  0012               	return		;funcret
  9572   001B92                     __end_of_CantaIR:
  9573                           	callstack 0
  9574                           
  9575 ;; *************** function _CantaPartBaixa *****************
  9576 ;; Defined at:
  9577 ;;		line 227 in file "LcTLCD.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  c               1    wreg     unsigned char 
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;  c               1    1[COMRAM] unsigned char 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  1    wreg      void 
  9584 ;; Registers used:
  9585 ;;		wreg, status,2, status,0
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMRAM   BANK0   BANK1
  9591 ;;      Params:         0       0       0
  9592 ;;      Locals:         1       0       0
  9593 ;;      Temps:          1       0       0
  9594 ;;      Totals:         2       0       0
  9595 ;;Total ram usage:        2 bytes
  9596 ;; Hardware stack levels used: 1
  9597 ;; Hardware stack levels required when called: 3
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_CantaIR
  9602 ;;		_CantaData
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text54
  9607   00165A                     __ptext54:
  9608                           	callstack 0
  9609   00165A                     _CantaPartBaixa:
  9610                           	callstack 23
  9611                           
  9612                           ;incstack = 0
  9613                           ;CantaPartBaixa@c stored from wreg
  9614   00165A  6E53               	movwf	CantaPartBaixa@c^0,c
  9615                           
  9616                           ;LcTLCD.c: 228:   (LATEbits.LATE2 = (c & 0x08 ? 1 : 0));
  9617   00165C  A653               	btfss	CantaPartBaixa@c^0,3,c
  9618   00165E  D003               	goto	u2140
  9619   001660  6A52               	clrf	??_CantaPartBaixa^0,c
  9620   001662  2A52               	incf	??_CantaPartBaixa^0,f,c
  9621   001664  D001               	goto	u2158
  9622   001666                     u2140:
  9623   001666  6A52               	clrf	??_CantaPartBaixa^0,c
  9624   001668                     u2158:
  9625   001668  4652               	rlncf	??_CantaPartBaixa^0,f,c
  9626   00166A  4652               	rlncf	??_CantaPartBaixa^0,f,c
  9627   00166C  508D               	movf	141,w,c	;volatile
  9628   00166E  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9629   001670  0BFB               	andlw	-5
  9630   001672  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9631   001674  6E8D               	movwf	141,c	;volatile
  9632                           
  9633                           ;LcTLCD.c: 229:   (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  9634   001676  A453               	btfss	CantaPartBaixa@c^0,2,c
  9635   001678  D003               	goto	u2160
  9636   00167A  6A52               	clrf	??_CantaPartBaixa^0,c
  9637   00167C  2A52               	incf	??_CantaPartBaixa^0,f,c
  9638   00167E  D001               	goto	u2178
  9639   001680                     u2160:
  9640   001680  6A52               	clrf	??_CantaPartBaixa^0,c
  9641   001682                     u2178:
  9642   001682  4652               	rlncf	??_CantaPartBaixa^0,f,c
  9643   001684  508D               	movf	141,w,c	;volatile
  9644   001686  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9645   001688  0BFD               	andlw	-3
  9646   00168A  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9647   00168C  6E8D               	movwf	141,c	;volatile
  9648                           
  9649                           ;LcTLCD.c: 230:   (LATEbits.LATE0 = (c & 0x02 ? 1 : 0));
  9650   00168E  A253               	btfss	CantaPartBaixa@c^0,1,c
  9651   001690  D003               	goto	u2180
  9652   001692  6A52               	clrf	??_CantaPartBaixa^0,c
  9653   001694  2A52               	incf	??_CantaPartBaixa^0,f,c
  9654   001696  D001               	goto	u2198
  9655   001698                     u2180:
  9656   001698  6A52               	clrf	??_CantaPartBaixa^0,c
  9657   00169A                     u2198:
  9658   00169A  508D               	movf	141,w,c	;volatile
  9659   00169C  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9660   00169E  0BFE               	andlw	-2
  9661   0016A0  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9662   0016A2  6E8D               	movwf	141,c	;volatile
  9663                           
  9664                           ;LcTLCD.c: 231:   (LATAbits.LATA5 = (c & 0x01 ? 1 : 0));
  9665   0016A4  A053               	btfss	CantaPartBaixa@c^0,0,c
  9666   0016A6  D003               	goto	u2200
  9667   0016A8  6A52               	clrf	??_CantaPartBaixa^0,c
  9668   0016AA  2A52               	incf	??_CantaPartBaixa^0,f,c
  9669   0016AC  D001               	goto	u2218
  9670   0016AE                     u2200:
  9671   0016AE  6A52               	clrf	??_CantaPartBaixa^0,c
  9672   0016B0                     u2218:
  9673   0016B0  3A52               	swapf	??_CantaPartBaixa^0,f,c
  9674   0016B2  4652               	rlncf	??_CantaPartBaixa^0,f,c
  9675   0016B4  5089               	movf	137,w,c	;volatile
  9676   0016B6  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9677   0016B8  0BDF               	andlw	-33
  9678   0016BA  1852               	xorwf	??_CantaPartBaixa^0,w,c
  9679   0016BC  6E89               	movwf	137,c	;volatile
  9680   0016BE  0012               	return		;funcret
  9681   0016C0                     __end_of_CantaPartBaixa:
  9682                           	callstack 0
  9683                           
  9684 ;; *************** function _CantaPartAlta *****************
  9685 ;; Defined at:
  9686 ;;		line 220 in file "LcTLCD.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  c               1    wreg     unsigned char 
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  c               1    1[COMRAM] unsigned char 
  9691 ;; Return value:  Size  Location     Type
  9692 ;;                  1    wreg      void 
  9693 ;; Registers used:
  9694 ;;		wreg, status,2, status,0
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMRAM   BANK0   BANK1
  9700 ;;      Params:         0       0       0
  9701 ;;      Locals:         1       0       0
  9702 ;;      Temps:          1       0       0
  9703 ;;      Totals:         2       0       0
  9704 ;;Total ram usage:        2 bytes
  9705 ;; Hardware stack levels used: 1
  9706 ;; Hardware stack levels required when called: 3
  9707 ;; This function calls:
  9708 ;;		Nothing
  9709 ;; This function is called by:
  9710 ;;		_CantaIR
  9711 ;;		_CantaData
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text55
  9716   0016C0                     __ptext55:
  9717                           	callstack 0
  9718   0016C0                     _CantaPartAlta:
  9719                           	callstack 23
  9720                           
  9721                           ;incstack = 0
  9722                           ;CantaPartAlta@c stored from wreg
  9723   0016C0  6E53               	movwf	CantaPartAlta@c^0,c
  9724                           
  9725                           ;LcTLCD.c: 221:   (LATEbits.LATE2 = (c & 0x80 ? 1 : 0));
  9726   0016C2  AE53               	btfss	CantaPartAlta@c^0,7,c
  9727   0016C4  D003               	goto	u2060
  9728   0016C6  6A52               	clrf	??_CantaPartAlta^0,c
  9729   0016C8  2A52               	incf	??_CantaPartAlta^0,f,c
  9730   0016CA  D001               	goto	u2078
  9731   0016CC                     u2060:
  9732   0016CC  6A52               	clrf	??_CantaPartAlta^0,c
  9733   0016CE                     u2078:
  9734   0016CE  4652               	rlncf	??_CantaPartAlta^0,f,c
  9735   0016D0  4652               	rlncf	??_CantaPartAlta^0,f,c
  9736   0016D2  508D               	movf	141,w,c	;volatile
  9737   0016D4  1852               	xorwf	??_CantaPartAlta^0,w,c
  9738   0016D6  0BFB               	andlw	-5
  9739   0016D8  1852               	xorwf	??_CantaPartAlta^0,w,c
  9740   0016DA  6E8D               	movwf	141,c	;volatile
  9741                           
  9742                           ;LcTLCD.c: 222:   (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  9743   0016DC  AC53               	btfss	CantaPartAlta@c^0,6,c
  9744   0016DE  D003               	goto	u2080
  9745   0016E0  6A52               	clrf	??_CantaPartAlta^0,c
  9746   0016E2  2A52               	incf	??_CantaPartAlta^0,f,c
  9747   0016E4  D001               	goto	u2098
  9748   0016E6                     u2080:
  9749   0016E6  6A52               	clrf	??_CantaPartAlta^0,c
  9750   0016E8                     u2098:
  9751   0016E8  4652               	rlncf	??_CantaPartAlta^0,f,c
  9752   0016EA  508D               	movf	141,w,c	;volatile
  9753   0016EC  1852               	xorwf	??_CantaPartAlta^0,w,c
  9754   0016EE  0BFD               	andlw	-3
  9755   0016F0  1852               	xorwf	??_CantaPartAlta^0,w,c
  9756   0016F2  6E8D               	movwf	141,c	;volatile
  9757                           
  9758                           ;LcTLCD.c: 223:   (LATEbits.LATE0 = (c & 0x20 ? 1 : 0));
  9759   0016F4  AA53               	btfss	CantaPartAlta@c^0,5,c
  9760   0016F6  D003               	goto	u2100
  9761   0016F8  6A52               	clrf	??_CantaPartAlta^0,c
  9762   0016FA  2A52               	incf	??_CantaPartAlta^0,f,c
  9763   0016FC  D001               	goto	u2118
  9764   0016FE                     u2100:
  9765   0016FE  6A52               	clrf	??_CantaPartAlta^0,c
  9766   001700                     u2118:
  9767   001700  508D               	movf	141,w,c	;volatile
  9768   001702  1852               	xorwf	??_CantaPartAlta^0,w,c
  9769   001704  0BFE               	andlw	-2
  9770   001706  1852               	xorwf	??_CantaPartAlta^0,w,c
  9771   001708  6E8D               	movwf	141,c	;volatile
  9772                           
  9773                           ;LcTLCD.c: 224:   (LATAbits.LATA5 = (c & 0x10 ? 1 : 0));
  9774   00170A  A853               	btfss	CantaPartAlta@c^0,4,c
  9775   00170C  D003               	goto	u2120
  9776   00170E  6A52               	clrf	??_CantaPartAlta^0,c
  9777   001710  2A52               	incf	??_CantaPartAlta^0,f,c
  9778   001712  D001               	goto	u2138
  9779   001714                     u2120:
  9780   001714  6A52               	clrf	??_CantaPartAlta^0,c
  9781   001716                     u2138:
  9782   001716  3A52               	swapf	??_CantaPartAlta^0,f,c
  9783   001718  4652               	rlncf	??_CantaPartAlta^0,f,c
  9784   00171A  5089               	movf	137,w,c	;volatile
  9785   00171C  1852               	xorwf	??_CantaPartAlta^0,w,c
  9786   00171E  0BDF               	andlw	-33
  9787   001720  1852               	xorwf	??_CantaPartAlta^0,w,c
  9788   001722  6E89               	movwf	137,c	;volatile
  9789   001724  0012               	return		;funcret
  9790   001726                     __end_of_CantaPartAlta:
  9791                           	callstack 0
  9792                           
  9793 ;; *************** function _LEDS_Motor *****************
  9794 ;; Defined at:
  9795 ;;		line 28 in file "TAD_LEDS.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  quinLed         1    wreg     unsigned char 
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;  quinLed         1   20[COMRAM] unsigned char 
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  1    wreg      void 
  9802 ;; Registers used:
  9803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMRAM   BANK0   BANK1
  9809 ;;      Params:         0       0       0
  9810 ;;      Locals:         1       0       0
  9811 ;;      Temps:          7       0       0
  9812 ;;      Totals:         8       0       0
  9813 ;;Total ram usage:        8 bytes
  9814 ;; Hardware stack levels used: 1
  9815 ;; Hardware stack levels required when called: 4
  9816 ;; This function calls:
  9817 ;;		_LEDS_setState
  9818 ;;		_TI_GetTics
  9819 ;;		_TI_ResetTics
  9820 ;; This function is called by:
  9821 ;;		_main
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           	psect	text56
  9826   000820                     __ptext56:
  9827                           	callstack 0
  9828   000820                     _LEDS_Motor:
  9829                           	callstack 26
  9830                           
  9831                           ;incstack = 0
  9832                           ;LEDS_Motor@quinLed stored from wreg
  9833   000820  6E66               	movwf	LEDS_Motor@quinLed^0,c
  9834                           
  9835                           ;TAD_LEDS.c: 30:     if (intensitat[quinLed] == 0) {
  9836   000822  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9837   000824  0FAD               	addlw	low _intensitat
  9838   000826  6ED9               	movwf	fsr2l,c
  9839   000828  6ADA               	clrf	fsr2h,c
  9840   00082A  50DF               	movf	indf2,w,c
  9841   00082C  A4D8               	btfss	status,2,c
  9842   00082E  D00B               	goto	l4933
  9843                           
  9844                           ;TAD_LEDS.c: 31:         LEDS_setState(quinLed, 0);
  9845   000830  0E00               	movlw	0
  9846   000832  6E52               	movwf	LEDS_setState@estat^0,c
  9847   000834  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9848   000836  ECF3  F00A         	call	_LEDS_setState
  9849   00083A                     l4929:
  9850                           
  9851                           ;TAD_LEDS.c: 32:         state[quinLed] = 0;
  9852   00083A  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9853   00083C  0FB3               	addlw	low _state@TAD_LEDS$F1862
  9854   00083E  6ED9               	movwf	fsr2l,c
  9855   000840  6ADA               	clrf	fsr2h,c
  9856   000842  6ADF               	clrf	indf2,c
  9857   000844  0012               	return	
  9858   000846                     l4933:
  9859                           
  9860                           ;TAD_LEDS.c: 36:     if (intensitat[quinLed] == 10) {
  9861   000846  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9862   000848  0FAD               	addlw	low _intensitat
  9863   00084A  6ED9               	movwf	fsr2l,c
  9864   00084C  6ADA               	clrf	fsr2h,c
  9865   00084E  0E0A               	movlw	10
  9866   000850  18DE               	xorwf	postinc2,w,c
  9867   000852  A4D8               	btfss	status,2,c
  9868   000854  D06D               	goto	l4959
  9869                           
  9870                           ;TAD_LEDS.c: 37:         LEDS_setState(quinLed, 1);
  9871   000856  0E01               	movlw	1
  9872   000858  6E52               	movwf	LEDS_setState@estat^0,c
  9873   00085A  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9874   00085C  ECF3  F00A         	call	_LEDS_setState
  9875   000860  D7EC               	goto	l4929
  9876   000862                     l4941:
  9877                           
  9878                           ;TAD_LEDS.c: 44:             if (TI_GetTics(TimerLed[quinLed]) >= intensitat[quinLed]) {
  9879   000862  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9880   000864  0FAD               	addlw	low _intensitat
  9881   000866  6ED9               	movwf	fsr2l,c
  9882   000868  6ADA               	clrf	fsr2h,c
  9883   00086A  50DF               	movf	indf2,w,c
  9884   00086C  6E5F               	movwf	??_LEDS_Motor^0,c
  9885   00086E  C05F  F060         	movff	??_LEDS_Motor,??_LEDS_Motor+1
  9886   000872  6A61               	clrf	(??_LEDS_Motor+2)^0,c
  9887   000874  6A62               	clrf	(??_LEDS_Motor+3)^0,c
  9888   000876  6A63               	clrf	(??_LEDS_Motor+4)^0,c
  9889   000878  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9890   00087A  0FBB               	addlw	low _TimerLed
  9891   00087C  6ED9               	movwf	fsr2l,c
  9892   00087E  6ADA               	clrf	fsr2h,c
  9893   000880  50DF               	movf	indf2,w,c
  9894   000882  EC92  F00C         	call	_TI_GetTics
  9895   000886  5060               	movf	(??_LEDS_Motor+1)^0,w,c
  9896   000888  5C52               	subwf	?_TI_GetTics^0,w,c
  9897   00088A  5061               	movf	(??_LEDS_Motor+2)^0,w,c
  9898   00088C  5853               	subwfb	(?_TI_GetTics+1)^0,w,c
  9899   00088E  5062               	movf	(??_LEDS_Motor+3)^0,w,c
  9900   000890  5854               	subwfb	(?_TI_GetTics+2)^0,w,c
  9901   000892  5063               	movf	(??_LEDS_Motor+4)^0,w,c
  9902   000894  5855               	subwfb	(?_TI_GetTics+3)^0,w,c
  9903   000896  A0D8               	btfss	status,0,c
  9904   000898  0012               	return	
  9905                           
  9906                           ;TAD_LEDS.c: 45:                 LEDS_setState(quinLed, 0);
  9907   00089A  0E00               	movlw	0
  9908   00089C  6E52               	movwf	LEDS_setState@estat^0,c
  9909   00089E  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9910   0008A0  ECF3  F00A         	call	_LEDS_setState
  9911                           
  9912                           ;TAD_LEDS.c: 46:                 TI_ResetTics(TimerLed[quinLed]);
  9913   0008A4  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9914   0008A6  0FBB               	addlw	low _TimerLed
  9915   0008A8  6ED9               	movwf	fsr2l,c
  9916   0008AA  6ADA               	clrf	fsr2h,c
  9917   0008AC  50DF               	movf	indf2,w,c
  9918   0008AE  EC66  F00E         	call	_TI_ResetTics
  9919                           
  9920                           ;TAD_LEDS.c: 47:                 state[quinLed]++;
  9921   0008B2  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9922   0008B4  0FB3               	addlw	low _state@TAD_LEDS$F1862
  9923   0008B6  6ED9               	movwf	fsr2l,c
  9924   0008B8  6ADA               	clrf	fsr2h,c
  9925   0008BA  2ADF               	incf	indf2,f,c
  9926   0008BC  0012               	return	
  9927   0008BE                     l4949:
  9928                           
  9929                           ;TAD_LEDS.c: 52:             if (TI_GetTics(TimerLed[quinLed]) >= (10 - intensitat[quinL
      +                          ed])) {
  9930   0008BE  0E0A               	movlw	10
  9931   0008C0  6E5F               	movwf	??_LEDS_Motor^0,c
  9932   0008C2  0E00               	movlw	0
  9933   0008C4  6E60               	movwf	(??_LEDS_Motor+1)^0,c
  9934   0008C6  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9935   0008C8  0FAD               	addlw	low _intensitat
  9936   0008CA  6ED9               	movwf	fsr2l,c
  9937   0008CC  6ADA               	clrf	fsr2h,c
  9938   0008CE  50DF               	movf	indf2,w,c
  9939   0008D0  6E61               	movwf	(??_LEDS_Motor+2)^0,c
  9940   0008D2  5061               	movf	(??_LEDS_Motor+2)^0,w,c
  9941   0008D4  5C5F               	subwf	??_LEDS_Motor^0,w,c
  9942   0008D6  6E62               	movwf	(??_LEDS_Motor+3)^0,c
  9943   0008D8  5060               	movf	(??_LEDS_Motor+1)^0,w,c
  9944   0008DA  A0D8               	btfss	status,0,c
  9945   0008DC  0460               	decf	(??_LEDS_Motor+1)^0,w,c
  9946   0008DE  6E63               	movwf	(??_LEDS_Motor+4)^0,c
  9947   0008E0  6A64               	clrf	(??_LEDS_Motor+5)^0,c
  9948   0008E2  BE63               	btfsc	(??_LEDS_Motor+4)^0,7,c
  9949   0008E4  0664               	decf	(??_LEDS_Motor+5)^0,f,c
  9950   0008E6  5064               	movf	(??_LEDS_Motor+5)^0,w,c
  9951   0008E8  6E65               	movwf	(??_LEDS_Motor+6)^0,c
  9952   0008EA  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9953   0008EC  0FBB               	addlw	low _TimerLed
  9954   0008EE  6ED9               	movwf	fsr2l,c
  9955   0008F0  6ADA               	clrf	fsr2h,c
  9956   0008F2  50DF               	movf	indf2,w,c
  9957   0008F4  EC92  F00C         	call	_TI_GetTics
  9958   0008F8  5062               	movf	(??_LEDS_Motor+3)^0,w,c
  9959   0008FA  5C52               	subwf	?_TI_GetTics^0,w,c
  9960   0008FC  5063               	movf	(??_LEDS_Motor+4)^0,w,c
  9961   0008FE  5853               	subwfb	(?_TI_GetTics+1)^0,w,c
  9962   000900  5064               	movf	(??_LEDS_Motor+5)^0,w,c
  9963   000902  5854               	subwfb	(?_TI_GetTics+2)^0,w,c
  9964   000904  5065               	movf	(??_LEDS_Motor+6)^0,w,c
  9965   000906  5855               	subwfb	(?_TI_GetTics+3)^0,w,c
  9966   000908  A0D8               	btfss	status,0,c
  9967   00090A  0012               	return	
  9968                           
  9969                           ;TAD_LEDS.c: 53:                 LEDS_setState(quinLed, 1);
  9970   00090C  0E01               	movlw	1
  9971   00090E  6E52               	movwf	LEDS_setState@estat^0,c
  9972   000910  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9973   000912  ECF3  F00A         	call	_LEDS_setState
  9974                           
  9975                           ;TAD_LEDS.c: 54:                 TI_ResetTics(TimerLed[quinLed]);
  9976   000916  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9977   000918  0FBB               	addlw	low _TimerLed
  9978   00091A  6ED9               	movwf	fsr2l,c
  9979   00091C  6ADA               	clrf	fsr2h,c
  9980   00091E  50DF               	movf	indf2,w,c
  9981   000920  EC66  F00E         	call	_TI_ResetTics
  9982                           
  9983                           ;TAD_LEDS.c: 55:                 state[quinLed]--;
  9984   000924  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9985   000926  0FB3               	addlw	low _state@TAD_LEDS$F1862
  9986   000928  6ED9               	movwf	fsr2l,c
  9987   00092A  6ADA               	clrf	fsr2h,c
  9988   00092C  06DF               	decf	indf2,f,c
  9989   00092E  0012               	return	
  9990   000930                     l4959:
  9991   000930  5066               	movf	LEDS_Motor@quinLed^0,w,c
  9992   000932  0FB3               	addlw	low _state@TAD_LEDS$F1862
  9993   000934  6ED9               	movwf	fsr2l,c
  9994   000936  6ADA               	clrf	fsr2h,c
  9995   000938  50DF               	movf	indf2,w,c
  9996                           
  9997                           ; Switch size 1, requested type "simple"
  9998                           ; Number of cases is 2, Range of values is 0 to 1
  9999                           ; switch strategies available:
 10000                           ; Name         Instructions Cycles
 10001                           ; simple_byte            7     4 (average)
 10002                           ;	Chosen strategy is simple_byte
 10003   00093A  0A00               	xorlw	0	; case 0
 10004   00093C  B4D8               	btfsc	status,2,c
 10005   00093E  D791               	goto	l4941
 10006   000940  0A01               	xorlw	1	; case 1
 10007   000942  A4D8               	btfss	status,2,c
 10008   000944  0012               	return	
 10009   000946  D7BB               	goto	l4949
 10010   000948                     __end_of_LEDS_Motor:
 10011                           	callstack 0
 10012                           
 10013 ;; *************** function _TI_ResetTics *****************
 10014 ;; Defined at:
 10015 ;;		line 56 in file "TAD_TIMER.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;  TimerHandle     1    wreg     unsigned char 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  TimerHandle     1    0[COMRAM] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      void 
 10022 ;; Registers used:
 10023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMRAM   BANK0   BANK1
 10029 ;;      Params:         0       0       0
 10030 ;;      Locals:         1       0       0
 10031 ;;      Temps:          0       0       0
 10032 ;;      Totals:         1       0       0
 10033 ;;Total ram usage:        1 bytes
 10034 ;; Hardware stack levels used: 1
 10035 ;; Hardware stack levels required when called: 3
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_Espera
 10040 ;;		_WaitForBusy
 10041 ;;		_TM_Motor
 10042 ;;		_MENU_MotorHandleHash
 10043 ;;		_LEDS_Motor
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text57
 10048   001CCC                     __ptext57:
 10049                           	callstack 0
 10050   001CCC                     _TI_ResetTics:
 10051                           	callstack 23
 10052                           
 10053                           ;incstack = 0
 10054                           ;TI_ResetTics@TimerHandle stored from wreg
 10055   001CCC  6E52               	movwf	TI_ResetTics@TimerHandle^0,c
 10056                           
 10057                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
 10058   001CCE  9EF2               	bcf	242,7,c	;volatile
 10059   001CD0  5052               	movf	TI_ResetTics@TimerHandle^0,w,c
 10060   001CD2  0D05               	mullw	5
 10061   001CD4  50F3               	movf	243,w,c
 10062   001CD6  0F80               	addlw	low _Timers
 10063   001CD8  6ED9               	movwf	fsr2l,c
 10064   001CDA  6ADA               	clrf	fsr2h,c
 10065   001CDC  C007  FFDE         	movff	_Tics,postinc2	;volatile
 10066   001CE0  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
 10067   001CE4  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
 10068   001CE8  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
 10069   001CEC  8EF2               	bsf	242,7,c	;volatile
 10070   001CEE  0012               	return		;funcret
 10071   001CF0                     __end_of_TI_ResetTics:
 10072                           	callstack 0
 10073                           
 10074 ;; *************** function _TI_GetTics *****************
 10075 ;; Defined at:
 10076 ;;		line 61 in file "TAD_TIMER.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;  TimerHandle     1    wreg     unsigned char 
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;  TimerHandle     1   12[COMRAM] unsigned char 
 10081 ;;  CopiaTicsAct    4    8[COMRAM] unsigned long 
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  4    0[COMRAM] unsigned long 
 10084 ;; Registers used:
 10085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1
 10091 ;;      Params:         4       0       0
 10092 ;;      Locals:         5       0       0
 10093 ;;      Temps:          4       0       0
 10094 ;;      Totals:        13       0       0
 10095 ;;Total ram usage:       13 bytes
 10096 ;; Hardware stack levels used: 1
 10097 ;; Hardware stack levels required when called: 3
 10098 ;; This function calls:
 10099 ;;		Nothing
 10100 ;; This function is called by:
 10101 ;;		_Espera
 10102 ;;		_WaitForBusy
 10103 ;;		_TM_Motor
 10104 ;;		_MENU_MotorHandleHash
 10105 ;;		_LEDS_Motor
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text58
 10110   001924                     __ptext58:
 10111                           	callstack 0
 10112   001924                     _TI_GetTics:
 10113                           	callstack 23
 10114                           
 10115                           ;incstack = 0
 10116                           ;TI_GetTics@TimerHandle stored from wreg
 10117   001924  6E5E               	movwf	TI_GetTics@TimerHandle^0,c
 10118                           
 10119                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
 10120   001926  9EF2               	bcf	242,7,c	;volatile
 10121   001928  C007  F05A         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
 10122   00192C  C008  F05B         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
 10123   001930  C009  F05C         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
 10124   001934  C00A  F05D         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
 10125   001938  8EF2               	bsf	242,7,c	;volatile
 10126                           
 10127                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
 10128   00193A  505E               	movf	TI_GetTics@TimerHandle^0,w,c
 10129   00193C  0D05               	mullw	5
 10130   00193E  50F3               	movf	243,w,c
 10131   001940  0F80               	addlw	low _Timers
 10132   001942  6ED9               	movwf	fsr2l,c
 10133   001944  6ADA               	clrf	fsr2h,c
 10134   001946  CFDE F056          	movff	postinc2,??_TI_GetTics
 10135   00194A  CFDE F057          	movff	postinc2,??_TI_GetTics+1
 10136   00194E  CFDE F058          	movff	postinc2,??_TI_GetTics+2
 10137   001952  CFDE F059          	movff	postinc2,??_TI_GetTics+3
 10138   001956  5056               	movf	??_TI_GetTics^0,w,c
 10139   001958  5C5A               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
 10140   00195A  6E52               	movwf	?_TI_GetTics^0,c
 10141   00195C  5057               	movf	(??_TI_GetTics+1)^0,w,c
 10142   00195E  585B               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
 10143   001960  6E53               	movwf	(?_TI_GetTics+1)^0,c
 10144   001962  5058               	movf	(??_TI_GetTics+2)^0,w,c
 10145   001964  585C               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
 10146   001966  6E54               	movwf	(?_TI_GetTics+2)^0,c
 10147   001968  5059               	movf	(??_TI_GetTics+3)^0,w,c
 10148   00196A  585D               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
 10149   00196C  6E55               	movwf	(?_TI_GetTics+3)^0,c
 10150   00196E  0012               	return		;funcret
 10151   001970                     __end_of_TI_GetTics:
 10152                           	callstack 0
 10153                           
 10154 ;; *************** function _LEDS_setState *****************
 10155 ;; Defined at:
 10156 ;;		line 17 in file "TAD_LEDS.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;  quinLed         1    wreg     unsigned char 
 10159 ;;  estat           1    0[COMRAM] unsigned char 
 10160 ;; Auto vars:     Size  Location     Type
 10161 ;;  quinLed         1    1[COMRAM] unsigned char 
 10162 ;; Return value:  Size  Location     Type
 10163 ;;                  1    wreg      void 
 10164 ;; Registers used:
 10165 ;;		wreg, status,2, status,0
 10166 ;; Tracked objects:
 10167 ;;		On entry : 0/0
 10168 ;;		On exit  : 0/0
 10169 ;;		Unchanged: 0/0
 10170 ;; Data sizes:     COMRAM   BANK0   BANK1
 10171 ;;      Params:         1       0       0
 10172 ;;      Locals:         1       0       0
 10173 ;;      Temps:          0       0       0
 10174 ;;      Totals:         2       0       0
 10175 ;;Total ram usage:        2 bytes
 10176 ;; Hardware stack levels used: 1
 10177 ;; Hardware stack levels required when called: 3
 10178 ;; This function calls:
 10179 ;;		Nothing
 10180 ;; This function is called by:
 10181 ;;		_LEDS_Motor
 10182 ;; This function uses a non-reentrant model
 10183 ;;
 10184                           
 10185                           	psect	text59
 10186   0015E6                     __ptext59:
 10187                           	callstack 0
 10188   0015E6                     _LEDS_setState:
 10189                           	callstack 26
 10190                           
 10191                           ;incstack = 0
 10192                           ;LEDS_setState@quinLed stored from wreg
 10193   0015E6  6E53               	movwf	LEDS_setState@quinLed^0,c
 10194                           
 10195                           ;TAD_LEDS.c: 18:     switch (quinLed) {
 10196   0015E8  D024               	goto	l4561
 10197   0015EA                     l1094:
 10198   0015EA  B052               	btfsc	LEDS_setState@estat^0,0,c
 10199   0015EC  D002               	bra	u3335
 10200   0015EE  9E8A               	bcf	138,7,c	;volatile
 10201   0015F0  D001               	bra	u3336
 10202   0015F2                     u3335:
 10203   0015F2  8E8A               	bsf	138,7,c	;volatile
 10204   0015F4                     u3336:
 10205   0015F4  0012               	return	
 10206   0015F6                     l1096:
 10207   0015F6  B052               	btfsc	LEDS_setState@estat^0,0,c
 10208   0015F8  D002               	bra	u3345
 10209   0015FA  9C8A               	bcf	138,6,c	;volatile
 10210   0015FC  D001               	bra	u3346
 10211   0015FE                     u3345:
 10212   0015FE  8C8A               	bsf	138,6,c	;volatile
 10213   001600                     u3346:
 10214   001600  0012               	return	
 10215   001602                     l1097:
 10216   001602  B052               	btfsc	LEDS_setState@estat^0,0,c
 10217   001604  D002               	bra	u3355
 10218   001606  9A8A               	bcf	138,5,c	;volatile
 10219   001608  D001               	bra	u3356
 10220   00160A                     u3355:
 10221   00160A  8A8A               	bsf	138,5,c	;volatile
 10222   00160C                     u3356:
 10223   00160C  0012               	return	
 10224   00160E                     l1098:
 10225   00160E  B052               	btfsc	LEDS_setState@estat^0,0,c
 10226   001610  D002               	bra	u3365
 10227   001612  988A               	bcf	138,4,c	;volatile
 10228   001614  D001               	bra	u3366
 10229   001616                     u3365:
 10230   001616  888A               	bsf	138,4,c	;volatile
 10231   001618                     u3366:
 10232   001618  0012               	return	
 10233   00161A                     l1099:
 10234   00161A  B052               	btfsc	LEDS_setState@estat^0,0,c
 10235   00161C  D002               	bra	u3375
 10236   00161E  968A               	bcf	138,3,c	;volatile
 10237   001620  D001               	bra	u3376
 10238   001622                     u3375:
 10239   001622  868A               	bsf	138,3,c	;volatile
 10240   001624                     u3376:
 10241   001624  0012               	return	
 10242   001626                     l1100:
 10243   001626  B052               	btfsc	LEDS_setState@estat^0,0,c
 10244   001628  D002               	bra	u3385
 10245   00162A  948A               	bcf	138,2,c	;volatile
 10246   00162C  D001               	bra	u3386
 10247   00162E                     u3385:
 10248   00162E  848A               	bsf	138,2,c	;volatile
 10249   001630                     u3386:
 10250   001630  0012               	return	
 10251   001632                     l4561:
 10252   001632  5053               	movf	LEDS_setState@quinLed^0,w,c
 10253                           
 10254                           ; Switch size 1, requested type "simple"
 10255                           ; Number of cases is 6, Range of values is 0 to 5
 10256                           ; switch strategies available:
 10257                           ; Name         Instructions Cycles
 10258                           ; simple_byte           19    10 (average)
 10259                           ;	Chosen strategy is simple_byte
 10260   001634  0A00               	xorlw	0	; case 0
 10261   001636  B4D8               	btfsc	status,2,c
 10262   001638  D7D8               	goto	l1094
 10263   00163A  0A01               	xorlw	1	; case 1
 10264   00163C  B4D8               	btfsc	status,2,c
 10265   00163E  D7DB               	goto	l1096
 10266   001640  0A03               	xorlw	3	; case 2
 10267   001642  B4D8               	btfsc	status,2,c
 10268   001644  D7DE               	goto	l1097
 10269   001646  0A01               	xorlw	1	; case 3
 10270   001648  B4D8               	btfsc	status,2,c
 10271   00164A  D7E1               	goto	l1098
 10272   00164C  0A07               	xorlw	7	; case 4
 10273   00164E  B4D8               	btfsc	status,2,c
 10274   001650  D7E4               	goto	l1099
 10275   001652  0A01               	xorlw	1	; case 5
 10276   001654  A4D8               	btfss	status,2,c
 10277   001656  0012               	return	
 10278   001658  D7E6               	goto	l1100
 10279   00165A                     __end_of_LEDS_setState:
 10280                           	callstack 0
 10281                           
 10282 ;; *************** function _LEDS_Init *****************
 10283 ;; Defined at:
 10284 ;;		line 7 in file "TAD_LEDS.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  i               2    3[COMRAM] int 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  1    wreg      void 
 10291 ;; Registers used:
 10292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1
 10298 ;;      Params:         0       0       0
 10299 ;;      Locals:         2       0       0
 10300 ;;      Temps:          0       0       0
 10301 ;;      Totals:         2       0       0
 10302 ;;Total ram usage:        2 bytes
 10303 ;; Hardware stack levels used: 1
 10304 ;; Hardware stack levels required when called: 4
 10305 ;; This function calls:
 10306 ;;		_TI_NewTimer
 10307 ;; This function is called by:
 10308 ;;		_main
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           	psect	text60
 10313   0017D8                     __ptext60:
 10314                           	callstack 0
 10315   0017D8                     _LEDS_Init:
 10316                           	callstack 26
 10317                           
 10318                           ;TAD_LEDS.c: 8:     TRISBbits.TRISB7 = TRISBbits.TRISB6 = TRISBbits.TRISB5 = TRISBbits.T
      +                          RISB4 = TRISBbits.TRISB3 = TRISBbits.TRISB2 = 0;
 10319                           
 10320                           ;incstack = 0
 10321   0017D8  9493               	bcf	147,2,c	;volatile
 10322   0017DA  9693               	bcf	147,3,c	;volatile
 10323   0017DC  9893               	bcf	147,4,c	;volatile
 10324   0017DE  9A93               	bcf	147,5,c	;volatile
 10325   0017E0  9C93               	bcf	147,6,c	;volatile
 10326   0017E2  9E93               	bcf	147,7,c	;volatile
 10327                           
 10328                           ;TAD_LEDS.c: 9:     LATBbits.LATB7 = LATBbits.LATB6 = LATBbits.LATB5 = LATBbits.LATB4 = 
      +                          LATBbits.LATB3 = LATBbits.LATB2 = 0;
 10329   0017E4  948A               	bcf	138,2,c	;volatile
 10330   0017E6  968A               	bcf	138,3,c	;volatile
 10331   0017E8  988A               	bcf	138,4,c	;volatile
 10332   0017EA  9A8A               	bcf	138,5,c	;volatile
 10333   0017EC  9C8A               	bcf	138,6,c	;volatile
 10334   0017EE  9E8A               	bcf	138,7,c	;volatile
 10335                           
 10336                           ;TAD_LEDS.c: 11:     for(int i = 0; i < 6; i++) {
 10337   0017F0  0E00               	movlw	0
 10338   0017F2  6E56               	movwf	(LEDS_Init@i+1)^0,c
 10339   0017F4  0E00               	movlw	0
 10340   0017F6  6E55               	movwf	LEDS_Init@i^0,c
 10341   0017F8                     l4609:
 10342                           
 10343                           ;TAD_LEDS.c: 12:         state[i] = intensitat[i] = 0;
 10344   0017F8  5055               	movf	LEDS_Init@i^0,w,c
 10345   0017FA  0FAD               	addlw	low _intensitat
 10346   0017FC  6ED9               	movwf	fsr2l,c
 10347   0017FE  6ADA               	clrf	fsr2h,c
 10348   001800  6ADF               	clrf	indf2,c
 10349   001802  5055               	movf	LEDS_Init@i^0,w,c
 10350   001804  0FB3               	addlw	low _state@TAD_LEDS$F1862
 10351   001806  6EE1               	movwf	fsr1l,c
 10352   001808  6AE2               	clrf	fsr1h,c
 10353   00180A  CFDF FFE7          	movff	indf2,indf1
 10354                           
 10355                           ;TAD_LEDS.c: 13:         TI_NewTimer(&TimerLed[i]);
 10356   00180E  5055               	movf	LEDS_Init@i^0,w,c
 10357   001810  0FBB               	addlw	low _TimerLed
 10358   001812  6E52               	movwf	TI_NewTimer@TimerHandle^0,c
 10359   001814  EC44  F00D         	call	_TI_NewTimer	;wreg free
 10360                           
 10361                           ;TAD_LEDS.c: 14:     }
 10362   001818  4A55               	infsnz	LEDS_Init@i^0,f,c
 10363   00181A  2A56               	incf	(LEDS_Init@i+1)^0,f,c
 10364   00181C  BE56               	btfsc	(LEDS_Init@i+1)^0,7,c
 10365   00181E  D7EC               	goto	l4609
 10366   001820  5056               	movf	(LEDS_Init@i+1)^0,w,c
 10367   001822  E105               	bnz	u3400
 10368   001824  0E06               	movlw	6
 10369   001826  5C55               	subwf	LEDS_Init@i^0,w,c
 10370   001828  B0D8               	btfsc	status,0,c
 10371   00182A  0012               	return	
 10372   00182C  D7E5               	goto	l4609
 10373   00182E                     u3400:
 10374   00182E  0012               	return		;funcret
 10375   001830                     __end_of_LEDS_Init:
 10376                           	callstack 0
 10377                           
 10378 ;; *************** function _TI_NewTimer *****************
 10379 ;; Defined at:
 10380 ;;		line 46 in file "TAD_TIMER.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;  TimerHandle     1    0[COMRAM] PTR unsigned char 
 10383 ;;		 -> TimerLed(6), TimerHash(1), TimerRebots(1), Timer(1), 
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;  Comptador       1    2[COMRAM] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      unsigned char 
 10388 ;; Registers used:
 10389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMRAM   BANK0   BANK1
 10395 ;;      Params:         1       0       0
 10396 ;;      Locals:         1       0       0
 10397 ;;      Temps:          1       0       0
 10398 ;;      Totals:         3       0       0
 10399 ;;Total ram usage:        3 bytes
 10400 ;; Hardware stack levels used: 1
 10401 ;; Hardware stack levels required when called: 3
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		_LcInit
 10406 ;;		_TM_Init
 10407 ;;		_MENU_Init
 10408 ;;		_LEDS_Init
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           	psect	text61
 10413   001A88                     __ptext61:
 10414                           	callstack 0
 10415   001A88                     _TI_NewTimer:
 10416                           	callstack 26
 10417                           
 10418                           ;TAD_TIMER.c: 47:  unsigned char Comptador=0;
 10419                           
 10420                           ;incstack = 0
 10421   001A88  6A54               	clrf	TI_NewTimer@Comptador^0,c
 10422                           
 10423                           ;TAD_TIMER.c: 48:  while (Timers[Comptador].Busy==1) {
 10424   001A8A  D005               	goto	l3975
 10425   001A8C                     l3971:
 10426                           
 10427                           ;TAD_TIMER.c: 49:   if (++Comptador == 9) return (0);
 10428   001A8C  2A54               	incf	TI_NewTimer@Comptador^0,f,c
 10429   001A8E  0E09               	movlw	9
 10430   001A90  1854               	xorwf	TI_NewTimer@Comptador^0,w,c
 10431   001A92  B4D8               	btfsc	status,2,c
 10432   001A94  0012               	return	
 10433   001A96                     l3975:
 10434                           
 10435                           ;TAD_TIMER.c: 48:  while (Timers[Comptador].Busy==1) {
 10436   001A96  5054               	movf	TI_NewTimer@Comptador^0,w,c
 10437   001A98  0D05               	mullw	5
 10438   001A9A  50F3               	movf	243,w,c
 10439   001A9C  0F84               	addlw	low (_Timers+4)
 10440   001A9E  6ED9               	movwf	fsr2l,c
 10441   001AA0  6ADA               	clrf	fsr2h,c
 10442   001AA2  04DE               	decf	postinc2,w,c
 10443   001AA4  B4D8               	btfsc	status,2,c
 10444   001AA6  D7F2               	goto	l3971
 10445                           
 10446                           ;TAD_TIMER.c: 51:  Timers[Comptador].Busy=1;
 10447   001AA8  5054               	movf	TI_NewTimer@Comptador^0,w,c
 10448   001AAA  0D05               	mullw	5
 10449   001AAC  50F3               	movf	243,w,c
 10450   001AAE  0F84               	addlw	low (_Timers+4)
 10451   001AB0  6ED9               	movwf	fsr2l,c
 10452   001AB2  6ADA               	clrf	fsr2h,c
 10453   001AB4  0E01               	movlw	1
 10454   001AB6  6EDF               	movwf	indf2,c
 10455                           
 10456                           ;TAD_TIMER.c: 52:  *TimerHandle=Comptador;
 10457   001AB8  5052               	movf	TI_NewTimer@TimerHandle^0,w,c
 10458   001ABA  6ED9               	movwf	fsr2l,c
 10459   001ABC  6ADA               	clrf	fsr2h,c
 10460   001ABE  C054  FFDF         	movff	TI_NewTimer@Comptador,indf2
 10461   001AC2  0012               	return		;funcret
 10462   001AC4                     __end_of_TI_NewTimer:
 10463                           	callstack 0
 10464                           
 10465 ;; *************** function _Init_Interrupcions *****************
 10466 ;; Defined at:
 10467 ;;		line 81 in file "main.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      void 
 10474 ;; Registers used:
 10475 ;;		None
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMRAM   BANK0   BANK1
 10481 ;;      Params:         0       0       0
 10482 ;;      Locals:         0       0       0
 10483 ;;      Temps:          0       0       0
 10484 ;;      Totals:         0       0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used: 1
 10487 ;; Hardware stack levels required when called: 3
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_main
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text62
 10496   001E1A                     __ptext62:
 10497                           	callstack 0
 10498   001E1A                     _Init_Interrupcions:
 10499                           	callstack 27
 10500                           
 10501                           ;main.c: 82:     RCONbits.IPEN = 1;
 10502                           
 10503                           ;incstack = 0
 10504   001E1A  8ED0               	bsf	208,7,c	;volatile
 10505                           
 10506                           ;main.c: 83:     INTCONbits.PEIE = 1;
 10507   001E1C  8CF2               	bsf	242,6,c	;volatile
 10508                           
 10509                           ;main.c: 84:     INTCONbits.GIE = 1;
 10510   001E1E  8EF2               	bsf	242,7,c	;volatile
 10511   001E20  0012               	return		;funcret
 10512   001E22                     __end_of_Init_Interrupcions:
 10513                           	callstack 0
 10514                           
 10515 ;; *************** function _RSI_High *****************
 10516 ;; Defined at:
 10517 ;;		line 70 in file "main.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;		None
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;		None
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  1    wreg      void 
 10524 ;; Registers used:
 10525 ;;		wreg, status,2, status,0, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1
 10531 ;;      Params:         0       0       0
 10532 ;;      Locals:         0       0       0
 10533 ;;      Temps:          0       0       0
 10534 ;;      Totals:         0       0       0
 10535 ;;Total ram usage:        0 bytes
 10536 ;; Hardware stack levels used: 1
 10537 ;; Hardware stack levels required when called: 2
 10538 ;; This function calls:
 10539 ;;		_MENU_addMinute
 10540 ;;		_RSI_Timer0
 10541 ;; This function is called by:
 10542 ;;		Interrupt level 2
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546                           	psect	intcode
 10547   000008                     __pintcode:
 10548                           	callstack 0
 10549   000008                     _RSI_High:
 10550                           	callstack 22
 10551                           
 10552                           ;incstack = 0
 10553   000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10554                           
 10555                           ;main.c: 71:     RSI_Timer0();
 10556   00000A  EC9E  F00E         	call	_RSI_Timer0	;wreg free
 10557                           
 10558                           ;main.c: 73:     ticsCounter++;
 10559   00000E  4A0F               	infsnz	_ticsCounter^0,f,c
 10560   000010  2A10               	incf	(_ticsCounter+1)^0,f,c
 10561                           
 10562                           ;main.c: 75:     if(ticsCounter == 30000) {
 10563   000012  0E30               	movlw	48
 10564   000014  180F               	xorwf	_ticsCounter^0,w,c
 10565   000016  E10A               	bnz	i2l103
 10566   000018  0E75               	movlw	117
 10567   00001A  1810               	xorwf	(_ticsCounter+1)^0,w,c
 10568   00001C  A4D8               	btfss	status,2,c
 10569   00001E  D006               	goto	i2l103
 10570                           
 10571                           ;main.c: 76:         ticsCounter = 0;
 10572   000020  0E00               	movlw	0
 10573   000022  6E10               	movwf	(_ticsCounter+1)^0,c
 10574   000024  0E00               	movlw	0
 10575   000026  6E0F               	movwf	_ticsCounter^0,c
 10576                           
 10577                           ;main.c: 77:         MENU_addMinute();
 10578   000028  EC41  F00E         	call	_MENU_addMinute	;wreg free
 10579   00002C                     i2l103:
 10580   00002C  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10581   00002E  0011               	retfie		f
 10582   000030                     __end_of_RSI_High:
 10583                           	callstack 0
 10584                           
 10585 ;; *************** function _RSI_Timer0 *****************
 10586 ;; Defined at:
 10587 ;;		line 28 in file "TAD_TIMER.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;		None
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;		None
 10592 ;; Return value:  Size  Location     Type
 10593 ;;                  1    wreg      void 
 10594 ;; Registers used:
 10595 ;;		wreg, status,2, status,0
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMRAM   BANK0   BANK1
 10601 ;;      Params:         0       0       0
 10602 ;;      Locals:         0       0       0
 10603 ;;      Temps:          0       0       0
 10604 ;;      Totals:         0       0       0
 10605 ;;Total ram usage:        0 bytes
 10606 ;; Hardware stack levels used: 1
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_RSI_High
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text64
 10615   001D3C                     __ptext64:
 10616                           	callstack 0
 10617   001D3C                     _RSI_Timer0:
 10618                           	callstack 23
 10619                           
 10620                           ;TAD_TIMER.c: 30:     TMR0=45536;
 10621                           
 10622                           ;incstack = 0
 10623   001D3C  0EB1               	movlw	177
 10624   001D3E  6ED7               	movwf	215,c	;volatile
 10625   001D40  0EE0               	movlw	224
 10626   001D42  6ED6               	movwf	214,c	;volatile
 10627                           
 10628                           ;TAD_TIMER.c: 31:     TMR0IF=0;
 10629   001D44  94F2               	bcf	4082,2,c	;volatile
 10630                           
 10631                           ;TAD_TIMER.c: 32:     Tics++;
 10632   001D46  0E01               	movlw	1
 10633   001D48  2607               	addwf	_Tics^0,f,c	;volatile
 10634   001D4A  0E00               	movlw	0
 10635   001D4C  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
 10636   001D4E  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
 10637   001D50  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
 10638   001D52  0012               	return		;funcret
 10639   001D54                     __end_of_RSI_Timer0:
 10640                           	callstack 0
 10641                           
 10642 ;; *************** function _MENU_addMinute *****************
 10643 ;; Defined at:
 10644 ;;		line 192 in file "TAD_MENU.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, status,2, status,0, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1
 10658 ;;      Params:         0       0       0
 10659 ;;      Locals:         0       0       0
 10660 ;;      Temps:          0       0       0
 10661 ;;      Totals:         0       0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used: 1
 10664 ;; Hardware stack levels required when called: 1
 10665 ;; This function calls:
 10666 ;;		_addHour
 10667 ;; This function is called by:
 10668 ;;		_RSI_High
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text65
 10673   001C82                     __ptext65:
 10674                           	callstack 0
 10675   001C82                     _MENU_addMinute:
 10676                           	callstack 22
 10677                           
 10678                           ;TAD_MENU.c: 193:     actualitzar_lcd = 1;
 10679                           
 10680                           ;incstack = 0
 10681   001C82  0E01               	movlw	1
 10682   001C84  6E17               	movwf	_actualitzar_lcd^0,c
 10683                           
 10684                           ;TAD_MENU.c: 194:     if (minuts_l == 9) {
 10685   001C86  0E09               	movlw	9
 10686   001C88  181A               	xorwf	_minuts_l^0,w,c
 10687   001C8A  A4D8               	btfss	status,2,c
 10688   001C8C  D00B               	goto	i2l2939
 10689                           
 10690                           ;TAD_MENU.c: 195:         minuts_l = 0;
 10691   001C8E  6A1A               	clrf	_minuts_l^0,c
 10692                           
 10693                           ;TAD_MENU.c: 196:         if (minuts_h == 5) {
 10694   001C90  0E05               	movlw	5
 10695   001C92  181B               	xorwf	_minuts_h^0,w,c
 10696   001C94  A4D8               	btfss	status,2,c
 10697   001C96  D004               	goto	i2l2937
 10698                           
 10699                           ;TAD_MENU.c: 197:             minuts_h = 0;
 10700   001C98  6A1B               	clrf	_minuts_h^0,c
 10701                           
 10702                           ;TAD_MENU.c: 198:             addHour();
 10703   001C9A  EC7D  F00D         	call	_addHour	;wreg free
 10704                           
 10705                           ;TAD_MENU.c: 199:         } else {
 10706   001C9E  0012               	return	
 10707   001CA0                     i2l2937:
 10708                           
 10709                           ;TAD_MENU.c: 200:             minuts_h++;
 10710   001CA0  2A1B               	incf	_minuts_h^0,f,c
 10711   001CA2  0012               	return	
 10712   001CA4                     i2l2939:
 10713                           
 10714                           ;TAD_MENU.c: 203:         minuts_l++;
 10715   001CA4  2A1A               	incf	_minuts_l^0,f,c
 10716   001CA6  0012               	return		;funcret
 10717   001CA8                     __end_of_MENU_addMinute:
 10718                           	callstack 0
 10719                           
 10720 ;; *************** function _addHour *****************
 10721 ;; Defined at:
 10722 ;;		line 207 in file "TAD_MENU.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;		None
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;		None
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      void 
 10729 ;; Registers used:
 10730 ;;		wreg, status,2, status,0
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMRAM   BANK0   BANK1
 10736 ;;      Params:         0       0       0
 10737 ;;      Locals:         0       0       0
 10738 ;;      Temps:          0       0       0
 10739 ;;      Totals:         0       0       0
 10740 ;;Total ram usage:        0 bytes
 10741 ;; Hardware stack levels used: 1
 10742 ;; This function calls:
 10743 ;;		Nothing
 10744 ;; This function is called by:
 10745 ;;		_MENU_addMinute
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           	psect	text66
 10750   001AFA                     __ptext66:
 10751                           	callstack 0
 10752   001AFA                     _addHour:
 10753                           	callstack 22
 10754                           
 10755                           ;TAD_MENU.c: 208:     if (hora_l == 9) {
 10756                           
 10757                           ;incstack = 0
 10758   001AFA  0E09               	movlw	9
 10759   001AFC  181C               	xorwf	_hora_l^0,w,c
 10760   001AFE  A4D8               	btfss	status,2,c
 10761   001B00  D009               	goto	i2l2887
 10762                           
 10763                           ;TAD_MENU.c: 209:         hora_l = 0;
 10764   001B02  6A1C               	clrf	_hora_l^0,c
 10765                           
 10766                           ;TAD_MENU.c: 210:         if (hora_h == 2) {
 10767   001B04  0E02               	movlw	2
 10768   001B06  181D               	xorwf	_hora_h^0,w,c
 10769   001B08  A4D8               	btfss	status,2,c
 10770   001B0A  D002               	goto	i2l2885
 10771                           
 10772                           ;TAD_MENU.c: 211:             hora_h = 0;
 10773   001B0C  6A1D               	clrf	_hora_h^0,c
 10774                           
 10775                           ;TAD_MENU.c: 212:         } else {
 10776   001B0E  0012               	return	
 10777   001B10                     i2l2885:
 10778                           
 10779                           ;TAD_MENU.c: 213:             hora_h++;
 10780   001B10  2A1D               	incf	_hora_h^0,f,c
 10781   001B12  0012               	return	
 10782   001B14                     i2l2887:
 10783   001B14  0E02               	movlw	2
 10784   001B16  181D               	xorwf	_hora_h^0,w,c
 10785   001B18  A4D8               	btfss	status,2,c
 10786   001B1A  D007               	goto	i2l2893
 10787   001B1C  0E03               	movlw	3
 10788   001B1E  181C               	xorwf	_hora_l^0,w,c
 10789   001B20  A4D8               	btfss	status,2,c
 10790   001B22  D003               	goto	i2l2893
 10791                           
 10792                           ;TAD_MENU.c: 216:         hora_h = 0;
 10793   001B24  6A1D               	clrf	_hora_h^0,c
 10794                           
 10795                           ;TAD_MENU.c: 217:         hora_l = 0;
 10796   001B26  6A1C               	clrf	_hora_l^0,c
 10797                           
 10798                           ;TAD_MENU.c: 218:     } else {
 10799   001B28  0012               	return	
 10800   001B2A                     i2l2893:
 10801                           
 10802                           ;TAD_MENU.c: 219:         hora_l++;
 10803   001B2A  2A1C               	incf	_hora_l^0,f,c
 10804   001B2C  0012               	return		;funcret
 10805   001B2E                     __end_of_addHour:
 10806                           	callstack 0
 10807                           
 10808                           	psect	rparam
 10809   000001                     ___rparam_used  equ	1
 10810   000000                     ___param_bank   equ	0
 10811   000000                     __Lparam        equ	__Lrparam
 10812   000000                     __Hparam        equ	__Hrparam
 10813                           
 10814                           	psect	temp
 10815   00007F                     btemp:
 10816                           	callstack 0
 10817   00007F                     	ds	1
 10818   00007F                     int$flags       set	btemp
 10819   000080                     wtemp8          set	btemp+1
 10820   000080                     ttemp5          set	btemp+1
 10821   000083                     ttemp6          set	btemp+4
 10822   000087                     ttemp7          set	btemp+8
 10823                           
 10824                           	psect	idloc
 10825                           
 10826                           ;Config register IDLOC0 @ 0x200000
 10827                           ;	unspecified, using default values
 10828   200000                     	org	2097152
 10829   200000  FF                 	db	255
 10830                           
 10831                           ;Config register IDLOC1 @ 0x200001
 10832                           ;	unspecified, using default values
 10833   200001                     	org	2097153
 10834   200001  FF                 	db	255
 10835                           
 10836                           ;Config register IDLOC2 @ 0x200002
 10837                           ;	unspecified, using default values
 10838   200002                     	org	2097154
 10839   200002  FF                 	db	255
 10840                           
 10841                           ;Config register IDLOC3 @ 0x200003
 10842                           ;	unspecified, using default values
 10843   200003                     	org	2097155
 10844   200003  FF                 	db	255
 10845                           
 10846                           ;Config register IDLOC4 @ 0x200004
 10847                           ;	unspecified, using default values
 10848   200004                     	org	2097156
 10849   200004  FF                 	db	255
 10850                           
 10851                           ;Config register IDLOC5 @ 0x200005
 10852                           ;	unspecified, using default values
 10853   200005                     	org	2097157
 10854   200005  FF                 	db	255
 10855                           
 10856                           ;Config register IDLOC6 @ 0x200006
 10857                           ;	unspecified, using default values
 10858   200006                     	org	2097158
 10859   200006  FF                 	db	255
 10860                           
 10861                           ;Config register IDLOC7 @ 0x200007
 10862                           ;	unspecified, using default values
 10863   200007                     	org	2097159
 10864   200007  FF                 	db	255
 10865                           
 10866                           	psect	config
 10867                           
 10868                           ; Padding undefined space
 10869   300000                     	org	3145728
 10870   300000  FF                 	db	255
 10871                           
 10872                           ;Config register CONFIG1H @ 0x300001
 10873                           ;	Oscillator
 10874                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10875                           ;	Fail-Safe Clock Monitor Enable bit
 10876                           ;	FCMEN = 0x0, unprogrammed default
 10877                           ;	Internal/External Oscillator Switchover bit
 10878                           ;	IESO = 0x0, unprogrammed default
 10879   300001                     	org	3145729
 10880   300001  06                 	db	6
 10881                           
 10882                           ;Config register CONFIG2L @ 0x300002
 10883                           ;	Power-up Timer Enable bit
 10884                           ;	PWRT = OFF, PWRT disabled
 10885                           ;	Brown-out Reset Enable bits
 10886                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10887                           ;	Brown-out Reset Voltage bits
 10888                           ;	BORV = 0x3, unprogrammed default
 10889   300002                     	org	3145730
 10890   300002  19                 	db	25
 10891                           
 10892                           ;Config register CONFIG2H @ 0x300003
 10893                           ;	Watchdog Timer Enable bit
 10894                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10895                           ;	Watchdog Timer Postscale Select bits
 10896                           ;	WDTPS = 0xF, unprogrammed default
 10897   300003                     	org	3145731
 10898   300003  1E                 	db	30
 10899                           
 10900                           ; Padding undefined space
 10901   300004                     	org	3145732
 10902   300004  FF                 	db	255
 10903                           
 10904                           ;Config register CONFIG3H @ 0x300005
 10905                           ;	CCP2 MUX bit
 10906                           ;	CCP2MX = 0x1, unprogrammed default
 10907                           ;	PORTB A/D Enable bit
 10908                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10909                           ;	Low-Power Timer1 Oscillator Enable bit
 10910                           ;	LPT1OSC = 0x0, unprogrammed default
 10911                           ;	MCLR Pin Enable bit
 10912                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10913   300005                     	org	3145733
 10914   300005  81                 	db	129
 10915                           
 10916                           ;Config register CONFIG4L @ 0x300006
 10917                           ;	Stack Full/Underflow Reset Enable bit
 10918                           ;	STVREN = 0x1, unprogrammed default
 10919                           ;	Single-Supply ICSP Enable bit
 10920                           ;	LVP = OFF, Single-Supply ICSP disabled
 10921                           ;	Boot Block Size Select bits
 10922                           ;	BBSIZ = 0x0, unprogrammed default
 10923                           ;	Extended Instruction Set Enable bit
 10924                           ;	XINST = 0x0, unprogrammed default
 10925                           ;	Background Debugger Enable bit
 10926                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10927   300006                     	org	3145734
 10928   300006  81                 	db	129
 10929                           
 10930                           ; Padding undefined space
 10931   300007                     	org	3145735
 10932   300007  FF                 	db	255
 10933                           
 10934                           ;Config register CONFIG5L @ 0x300008
 10935                           ;	unspecified, using default values
 10936                           ;	Code Protection bit
 10937                           ;	CP0 = 0x1, unprogrammed default
 10938                           ;	Code Protection bit
 10939                           ;	CP1 = 0x1, unprogrammed default
 10940   300008                     	org	3145736
 10941   300008  03                 	db	3
 10942                           
 10943                           ;Config register CONFIG5H @ 0x300009
 10944                           ;	unspecified, using default values
 10945                           ;	Boot Block Code Protection bitProtect Boot
 10946                           ;	CPB = 0x1, unprogrammed default
 10947                           ;	Data EEPROM Code Protection bit
 10948                           ;	CPD = 0x1, unprogrammed default
 10949   300009                     	org	3145737
 10950   300009  C0                 	db	192
 10951                           
 10952                           ;Config register CONFIG6L @ 0x30000A
 10953                           ;	unspecified, using default values
 10954                           ;	Write Protection bit
 10955                           ;	WRT0 = 0x1, unprogrammed default
 10956                           ;	Write Protection bit
 10957                           ;	WRT1 = 0x1, unprogrammed default
 10958   30000A                     	org	3145738
 10959   30000A  03                 	db	3
 10960                           
 10961                           ;Config register CONFIG6H @ 0x30000B
 10962                           ;	unspecified, using default values
 10963                           ;	Configuration Register Write Protection bit
 10964                           ;	WRTC = 0x1, unprogrammed default
 10965                           ;	Boot Block Write Protection bit
 10966                           ;	WRTB = 0x1, unprogrammed default
 10967                           ;	Data EEPROM Write Protection bit
 10968                           ;	WRTD = 0x1, unprogrammed default
 10969   30000B                     	org	3145739
 10970   30000B  E0                 	db	224
 10971                           
 10972                           ;Config register CONFIG7L @ 0x30000C
 10973                           ;	unspecified, using default values
 10974                           ;	Table Read Protection bit
 10975                           ;	EBTR0 = 0x1, unprogrammed default
 10976                           ;	Table Read Protection bit
 10977                           ;	EBTR1 = 0x1, unprogrammed default
 10978   30000C                     	org	3145740
 10979   30000C  03                 	db	3
 10980                           
 10981                           ;Config register CONFIG7H @ 0x30000D
 10982                           ;	unspecified, using default values
 10983                           ;	Boot Block Table Read Protection bit
 10984                           ;	EBTRB = 0x1, unprogrammed default
 10985   30000D                     	org	3145741
 10986   30000D  40                 	db	64
 10987                           tosu	equ	0xFFF
 10988                           tosh	equ	0xFFE
 10989                           tosl	equ	0xFFD
 10990                           stkptr	equ	0xFFC
 10991                           pclatu	equ	0xFFB
 10992                           pclath	equ	0xFFA
 10993                           pcl	equ	0xFF9
 10994                           tblptru	equ	0xFF8
 10995                           tblptrh	equ	0xFF7
 10996                           tblptrl	equ	0xFF6
 10997                           tablat	equ	0xFF5
 10998                           prodh	equ	0xFF4
 10999                           prodl	equ	0xFF3
 11000                           indf0	equ	0xFEF
 11001                           postinc0	equ	0xFEE
 11002                           postdec0	equ	0xFED
 11003                           preinc0	equ	0xFEC
 11004                           plusw0	equ	0xFEB
 11005                           fsr0h	equ	0xFEA
 11006                           fsr0l	equ	0xFE9
 11007                           wreg	equ	0xFE8
 11008                           indf1	equ	0xFE7
 11009                           postinc1	equ	0xFE6
 11010                           postdec1	equ	0xFE5
 11011                           preinc1	equ	0xFE4
 11012                           plusw1	equ	0xFE3
 11013                           fsr1h	equ	0xFE2
 11014                           fsr1l	equ	0xFE1
 11015                           bsr	equ	0xFE0
 11016                           indf2	equ	0xFDF
 11017                           postinc2	equ	0xFDE
 11018                           postdec2	equ	0xFDD
 11019                           preinc2	equ	0xFDC
 11020                           plusw2	equ	0xFDB
 11021                           fsr2h	equ	0xFDA
 11022                           fsr2l	equ	0xFD9
 11023                           status	equ	0xFD8

Data Sizes:
    Strings     112
    Constant    314
    Data        112
    BSS         173
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41     126
    BANK0           128      0     128
    BANK1           256      0      72

Pointer List with Targets:

    checkUID@UID_detectat	PTR unsigned char  size(1) Largest target is 5
		 -> motorRFIDcoop@UID(BANK0[5]), motorRFIDcoop_NOU@UID(BANK0[5]), 

    findLastLetterUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> UID_CURRENT(BANK0[5]), 

    mateixaTargeta@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motorRFIDcoop@UID(BANK0[5]), motorRFIDcoop_NOU@UID(BANK0[5]), 

    MENU_SaveUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motorRFIDcoop@UID(BANK0[5]), motorRFIDcoop_NOU@UID(BANK0[5]), 

    MFRC522_AntiColl$0	PTR unsigned char  size(2) Largest target is 0

    MFRC522_CRC_NOU@dataIn	PTR unsigned char  size(1) Largest target is 4
		 -> motorRFIDcoop_NOU@buff(BANK0[4]), 

    MFRC522_CRC_NOU@dataOut	PTR unsigned char  size(1) Largest target is 4
		 -> motorRFIDcoop_NOU@buff(BANK0[4]), 

    MFRC522_ToCard_NOU@backData	PTR unsigned char  size(1) Largest target is 5
		 -> motorRFIDcoop_NOU@buff(BANK0[4]), motorRFIDcoop_NOU@UID(BANK0[5]), NULL(NULL[0]), 

    MFRC522_ToCard_NOU@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> motorRFIDcoop_NOU@backBits(COMRAM[2]), motorRFIDcoop_NOU@unLen(COMRAM[2]), 

    MFRC522_ToCard_NOU@sendData	PTR unsigned char  size(1) Largest target is 5
		 -> motorRFIDcoop_NOU@buff(BANK0[4]), motorRFIDcoop_NOU@UID(BANK0[5]), NULL(NULL[0]), 

    SIO_Receive@character	PTR unsigned char  size(1) Largest target is 1
		 -> MENU_Motor@received_char(COMRAM[1]), 

    SIO_SendString@str	PTR const unsigned char  size(2) Largest target is 172
		 -> canvis_aplicats(CODE[19]), enter_aplicar(CODE[24]), hora_sistema(CODE[21]), menu_principal(CODE[172]), 
		 -> printHex@hex_out(COMRAM[3]), res_a_mostrar(CODE[16]), separador_hora(CODE[2]), showConfigLeds@buffer(COMRAM[4]), 
		 -> STR_1(CODE[3]), STR_10(CODE[2]), STR_11(CODE[2]), STR_12(CODE[2]), 
		 -> STR_13(CODE[2]), STR_14(CODE[4]), STR_15(CODE[4]), STR_2(CODE[12]), 
		 -> STR_3(CODE[23]), STR_4(CODE[15]), STR_5(CODE[14]), STR_6(CODE[35]), 
		 -> STR_7(CODE[2]), STR_8(CODE[12]), STR_9(CODE[9]), 

    TagType	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 6
		 -> Timer(COMRAM[1]), TimerHash(COMRAM[1]), TimerLed(BANK0[6]), TimerRebots(COMRAM[1]), 

    TM_GetTecla@c	PTR unsigned char  size(1) Largest target is 1
		 -> key@TAD_MENU$F1730(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motorRFIDcoop_NOU
    _motorRFIDcoop_NOU->_MENU_SaveUID
    _MFRC522_ToCard_NOU->_MFRC522_Rd
    _MFRC522_CRC_NOU->_MFRC522_Clear_Bit
    _MFRC522_CRC_NOU->_MFRC522_Set_Bit
    _MFRC522_Wr_2->_delay_us
    _MFRC522_Wr_1->_delay_us
    _MENU_SaveUID->_showUID
    _TM_Motor->_TI_GetTics
    _TM_Init->_TI_NewTimer
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_AntennaOff->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_delay_us
    _MENU_MotorHandleSetIntensity->_LEDS_setIntensitat
    _MENU_MotorHandleHash->_TI_GetTics
    _MENU_MotorActualitzarLCD->_printLCD
    _printLCD->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcClear->_Espera
    _MENU_Motor->_showUID
    _showUID->_printHex
    _printHex->_SIO_SendString
    _showConfigLeds->_SIO_SendString
    _option3->_SIO_SendString
    _handleMainMenu->_SIO_SendString
    _SIO_SendString->_SIO_Send
    _handleIntensity->_LEDS_setIntensitat
    _MENU_Init->_TI_NewTimer
    _LcInit->_Espera
    _Espera->_TI_GetTics
    _LcCursorOn->_WaitForBusy
    _WaitForBusy->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _LEDS_Motor->_TI_GetTics
    _LEDS_Init->_TI_NewTimer

Critical Paths under _RSI_High in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   15921
                                             40 COMRAM     1     1      0
                 _Init_Interrupcions
                          _LEDS_Init
                         _LEDS_Motor
                            _LcClear
                         _LcCursorOn
                             _LcInit
                          _MENU_Init
                         _MENU_Motor
           _MENU_MotorActualitzarLCD
               _MENU_MotorHandleHash
       _MENU_MotorHandleSetIntensity
                          _RFID_Init
                           _SIO_Init
                            _TI_Init
                            _TM_Init
                           _TM_Motor
                  _motorRFIDcoop_NOU
 ---------------------------------------------------------------------------------
 (1) _motorRFIDcoop_NOU                                    2     2      0    5734
                                             38 COMRAM     2     2      0
                       _MENU_SaveUID
                    _MFRC522_CRC_NOU
                  _MFRC522_Clear_Bit
                 _MFRC522_ToCard_NOU
                       _MFRC522_Wr_1
                       _MFRC522_Wr_2
 ---------------------------------------------------------------------------------
 (2) _MFRC522_ToCard_NOU                                  17    13      4     694
                                              9 COMRAM    17    13      4
                         _MFRC522_Rd
                       _MFRC522_Wr_1
                       _MFRC522_Wr_2
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC_NOU                                      3     0      3    1440
                                             13 COMRAM     3     0      3
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                       _MFRC522_Wr_1
                       _MFRC522_Wr_2
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr_2                                         2     2      0      84
                                              5 COMRAM     2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr_1                                         2     2      0      82
                                              5 COMRAM     2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MENU_SaveUID                                        12    11      1    2834
                                             26 COMRAM    12    11      1
                 _LEDS_setIntensitat
                            _LcClear
                     _SIO_SendString
                           _checkUID
                     _mateixaTargeta
                           _printHex
                     _showConfigLeds
                            _showUID
 ---------------------------------------------------------------------------------
 (3) _mateixaTargeta                                       6     5      1     113
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (3) _checkUID                                            12    11      1     227
                                              0 COMRAM    12    11      1
 ---------------------------------------------------------------------------------
 (1) _TM_Motor                                             2     2      0     105
                                             13 COMRAM     2     2      0
                         _TI_GetTics
                       _TI_ResetTics
                    _TM_IsKeyPressed
 ---------------------------------------------------------------------------------
 (1) _TM_Init                                              0     0      0     115
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SIO_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RFID_Init                                            0     0      0    1697
                 _InitPortDirections
                       _MFRC522_Init
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Init                                         0     0      0    1697
                 _MFRC522_AntennaOff
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Reset                                        0     0      0     283
                         _MFRC522_Wr
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOn                                    1     1      0     676
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Set_Bit                                      3     2      1     505
                                             10 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_AntennaOff                                   0     0      0     508
                  _MFRC522_Clear_Bit
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Clear_Bit                                    3     2      1     508
                                             10 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           5     4      1     230
                                              5 COMRAM     5     4      1
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     5      0      53
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Rd                                           9     9      0     170
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (2) _InitPortDirections                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MENU_MotorHandleSetIntensity                         2     2      0     138
                                              2 COMRAM     2     2      0
                 _LEDS_setIntensitat
                        _TM_GetTecla
                    _TM_IsKeyPressed
 ---------------------------------------------------------------------------------
 (1) _MENU_MotorHandleHash                                 4     4      0     288
                                             13 COMRAM     4     4      0
                         _TI_GetTics
                       _TI_ResetTics
                        _TM_GetTecla
                    _TM_IsKeyPressed
 ---------------------------------------------------------------------------------
 (2) _TM_IsKeyPressed                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TM_GetTecla                                          1     0      1      25
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _MENU_MotorActualitzarLCD                             0     0      0    2708
                           _printLCD
 ---------------------------------------------------------------------------------
 (2) _printLCD                                            12    12      0    2708
                                             23 COMRAM    12    12      0
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                  _findLastLetterUID
 ---------------------------------------------------------------------------------
 (3) _findLastLetterUID                                    6     5      1     225
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    1100
                                             22 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1     677
                                             14 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     290
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0     562
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _MENU_Motor                                           3     3      0    2196
                                             26 COMRAM     3     3      0
                        _SIO_Receive
                           _SIO_Send
                     _SIO_SendString
                       _handleEscKey
                    _handleIntensity
                     _handleMainMenu
                            _option3
                     _showConfigLeds
                            _showUID
 ---------------------------------------------------------------------------------
 (3) _showUID                                              1     1      0     519
                                             25 COMRAM     1     1      0
                     _SIO_SendString
                           _printHex
 ---------------------------------------------------------------------------------
 (4) _printHex                                            22    22      0     276
                                              3 COMRAM    22    22      0
                     _SIO_SendString
 ---------------------------------------------------------------------------------
 (3) _showConfigLeds                                      10    10      0     458
                                              3 COMRAM    10    10      0
                     _SIO_SendString
 ---------------------------------------------------------------------------------
 (2) _option3                                              1     1      0     620
                                              3 COMRAM     1     1      0
                           _SIO_Send
                     _SIO_SendString
 ---------------------------------------------------------------------------------
 (2) _handleMainMenu                                       0     0      0      98
                     _SIO_SendString
 ---------------------------------------------------------------------------------
 (5) _SIO_SendString                                       2     0      2      98
                                              1 COMRAM     2     0      2
                           _SIO_Send
 ---------------------------------------------------------------------------------
 (6) _SIO_Send                                             1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _handleIntensity                                      0     0      0      65
                 _LEDS_setIntensitat
 ---------------------------------------------------------------------------------
 (3) _LEDS_setIntensitat                                   2     1      1      65
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _handleEscKey                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SIO_Receive                                          1     0      1      23
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _MENU_Init                                            0     0      0     115
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     835
                                             20 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _Espera                                               7     5      2     168
                                             13 COMRAM     7     5      2
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LcCursorOn                                           0     0      0     394
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0     104
                                             13 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LEDS_Motor                                           8     8      0     739
                                             13 COMRAM     8     8      0
                      _LEDS_setState
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (5) _TI_ResetTics                                         1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TI_GetTics                                          13     9      4      52
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _LEDS_setState                                        2     1      1     165
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LEDS_Init                                            2     2      0     227
                                              3 COMRAM     2     2      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     115
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Init_Interrupcions                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             0     0      0       0
                     _MENU_addMinute
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (8) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MENU_addMinute                                       0     0      0       0
                            _addHour
 ---------------------------------------------------------------------------------
 (9) _addHour                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Interrupcions
   _LEDS_Init
     _TI_NewTimer
   _LEDS_Motor
     _LEDS_setState
     _TI_GetTics
     _TI_ResetTics
   _LcClear
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _WaitForBusy
       _TI_GetTics
       _TI_ResetTics
   _LcCursorOn
     _CantaIR
     _WaitForBusy
   _LcInit
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
     _TI_NewTimer
     _WaitForBusy
   _MENU_Init
     _TI_NewTimer
   _MENU_Motor
     _SIO_Receive
     _SIO_Send
     _SIO_SendString
       _SIO_Send
     _handleEscKey
     _handleIntensity
       _LEDS_setIntensitat
     _handleMainMenu
       _SIO_SendString
     _option3
       _SIO_Send
       _SIO_SendString
     _showConfigLeds
       _SIO_SendString
     _showUID
       _SIO_SendString
       _printHex
         _SIO_SendString
   _MENU_MotorActualitzarLCD
     _printLCD
       _LcClear
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _LcPutChar
         _CantaData
           _CantaPartAlta
           _CantaPartBaixa
         _LcGotoXY
         _WaitForBusy
       _findLastLetterUID
   _MENU_MotorHandleHash
     _TI_GetTics
     _TI_ResetTics
     _TM_GetTecla
     _TM_IsKeyPressed
   _MENU_MotorHandleSetIntensity
     _LEDS_setIntensitat
     _TM_GetTecla
     _TM_IsKeyPressed
   _RFID_Init
     _InitPortDirections
     _MFRC522_Init
       _MFRC522_AntennaOff
         _MFRC522_Clear_Bit
           _MFRC522_Rd
           _MFRC522_Wr
             _delay_us
       _MFRC522_AntennaOn
         _MFRC522_Rd
         _MFRC522_Set_Bit
           _MFRC522_Rd
           _MFRC522_Wr
       _MFRC522_Reset
         _MFRC522_Wr
         _delay_us
       _MFRC522_Wr
   _SIO_Init
   _TI_Init
   _TM_Init
     _TI_NewTimer
   _TM_Motor
     _TI_GetTics
     _TI_ResetTics
     _TM_IsKeyPressed
   _motorRFIDcoop_NOU
     _MENU_SaveUID
       _LEDS_setIntensitat
       _LcClear
       _SIO_SendString
       _checkUID
       _mateixaTargeta
       _printHex
       _showConfigLeds
       _showUID
     _MFRC522_CRC_NOU
       _MFRC522_Clear_Bit
       _MFRC522_Rd
       _MFRC522_Set_Bit
       _MFRC522_Wr_1
         _delay_us
       _MFRC522_Wr_2
         _delay_us
     _MFRC522_Clear_Bit
     _MFRC522_ToCard_NOU
       _MFRC522_Rd
       _MFRC522_Wr_1
       _MFRC522_Wr_2
     _MFRC522_Wr_1
     _MFRC522_Wr_2

 _RSI_High (ROOT)
   _MENU_addMinute
     _addHour
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      72     28.1%
BITBANK0           128      0       0      0.0%
BANK0              128      0     128    100.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     41     126    100.0%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         40      0       0      0.0%
BITBIGSFRll          2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     326      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Apr 24 18:23:43 2025

                  _LEDS_setIntensitat 1DB2                                     _i 0042  
                                   _t 0045                       _TM_IsKeyPressed 1D7C  
                          _RSI_Timer0 1D3C                           ?_LEDS_Motor 0052  
                         MFRC522_Rd@i 0059                          MFRC522_CRC@i 0041  
                         MFRC522_Wr@i 005B                          MFRC522_CRC@n 0040  
                          _TI_GetTics 1924                  ??_InitPortDirections 0052  
                 ?_LEDS_setIntensitat 0052                                   l171 11DC  
                                 l178 121C                                   l700 09D8  
                                 l541 12B4                                   l701 09E2  
                                 l286 1BEC                                   l703 09EA  
                                 l535 02F2                                   l493 0162  
                                 l915 0B9A                                   l683 094A  
                                 l693 09AE                                   l685 095A  
                                 l686 096C                                   l687 097E  
                                 l688 0990                         printHex@value 006A  
                                 l985 0B1A            __end_of_MFRC522_ToCard_NOU 03AC  
                                 u700 1516                                   u720 1530  
                                 u740 1548                                   u718 1518  
                                 u760 155E                                   u738 1532  
                                 u758 154A                                   u778 1560  
                                 _key 0028                      ??_CantaPartBaixa 0052  
                                 prod 0FF3                                   wreg 0FE8  
                     MENU_SaveUID@UID 006C                        ??_MFRC522_Init 005F  
                      ??_MFRC522_Wr_1 0057                        ??_MFRC522_Wr_2 0057  
                         ?_MENU_Motor 0052                         MFRC522_Wr_1@i 002D  
                       MFRC522_Wr_2@i 002B                          _row_selected 0026  
                                l1100 1626                                  l1094 15EA  
                                l1096 15F6                                  l1097 1602  
                                l4001 0FDA                                  l1098 160E  
                                l1099 161A                                  l4011 0FFA  
                                l4003 0FE0                                  l4023 1016  
                                l4111 00DE                                  l4103 00CC  
                                l4017 1008                                  l4009 0FF4  
                                l4201 01C0                                  l4041 0040  
                                l5001 0738                                  l4035 104E  
                                l4107 00D4                                  l5011 075A  
                                l5003 0752                                  l4029 1028  
                                l4205 01CE                                  l4133 011C  
                                l4053 0068                                  l4045 004A  
                                l5021 077C                                  l4231 021A  
                                l4223 01FC                                  l4215 01E4  
                                l4151 014A                                  l4143 0134  
                                l4127 010E                                  l4119 00F8  
                                l4063 007C                                  l4055 006E  
                                l4047 0058                                  l4039 0038  
                                l5031 0796                                  l4313 0594  
                                l4305 0580                                  l4217 01EC  
                                l4209 01DA                                  l4081 009C  
                                l4073 0092                                  l4057 0076  
                                l4049 005C                                  l5041 07BA  
                                l3515 1D9C                                  l4411 0A72  
                                l3507 1BF0                                  l4251 0288  
                                l4243 0244                                  l4235 0224  
                                l4227 020C                                  l4147 0142  
                                l4139 0124                                  l4091 00B2  
                                l4067 0084                                  l4059 0078  
                                l5043 07D4                                  l5027 078C  
                                l3541 1A14                                  l4413 0A76  
                                l3621 127A                                  l4325 05DE  
                                l4261 02AE                                  l4245 0270  
                                l4181 018E                                  l4165 0168  
                                l4157 0158                                  l4093 00BA  
                                l4085 00A4                                  l4423 0A90  
                                l4511 048A                                  l4351 0654  
                                l4239 0230                                  l4191 01A6  
                                l5231 1422                                  l4433 0AAA  
                                l4409 0A66                                  l4513 0492  
                                l4257 0294                                  l4185 0198  
                                l4169 0170                                  l4097 00BE  
                                l5049 07E0                           _TI_NewTimer 1A88  
                                l3651 1782                                  l4339 061C  
                                l4347 0646                                  l4283 0300  
                                l4461 0AFA                                  l4437 0AB8  
                                l4541 04FE                                  l4525 04C0  
                                l4381 1D8A                                  l4365 0692  
                                l4269 02D8                                  l4197 01B0  
                                l4277 02FC                                  l3655 17B0  
                                l4447 0AD2                                  l3663 11B8  
                                l4527 04C8                                  l4711 0CB0  
                                l3575 12F6                                  l3903 117C  
                                l4359 0668                                  l4609 17F8  
                                l4561 1632                                  l4633 0EF6  
                                l4457 0AEC                                  l3753 159A  
                                l4553 052C                                  l4705 0CA8  
                                l3593 1330                                  l3913 119C  
                                l3659 1ACC                                  l4467 0B10  
                                l4475 0B22                                  l4803 0DE4  
                                l3675 11EC                                  l3667 11C6  
                                l3755 15A6                                  l4555 0534  
                                l4539 04F6                                  l4483 041A  
                                l4811 0B6C                                  l3819 1A4C  
                                l4397 14BC                                  l3685 1224  
                                l3773 15DA                                  l3765 15C0  
                                l4485 0422                                  l4717 0CB8  
                                l4733 0D04                                  l3933 1768  
                                l3855 1086                                  l3679 11FC  
                                l3687 123A                                  l3767 15CC  
                                l4831 0BA4                                  l4815 0B78  
                                l4807 0B5E                                  l3927 172E  
                                l3873 10EA                                  l3961 18C8  
                                l4497 0450                                  l4681 0C58  
                                l4737 0D0A                                  l4569 1B94  
                                l3971 1A8C                                  l3875 10F2  
                                l3859 109A                                  l4771 0D7C  
                                l3955 18BC                                  l3947 188E  
                                l4499 0458                                  l4683 0C5C  
                                l4851 0BEA                                  l4835 0BAA  
                                l4827 0B9E                                  l4915 09FA  
                                l4923 0A2E                                  l4941 0862  
                                l4933 0846                                  l4773 0D80  
                                l4765 0D62                                  l4749 0D3A  
                                l4677 0C48                                  l4909 09F2  
                                l3893 111E                                  l3975 1A96  
                                l3799 1982                                  l4929 083A  
                                l4793 0DBE                                  l4769 0D70  
                                l4689 0C7C                                  l4849 0BE2  
                                l4865 0C1E                                  l4795 0DD4  
                                l4779 0D88                                  l4699 0C9A  
                                l4891 09B4                                  l4883 09A0  
                                l3899 112E                                  l3995 0FC6  
                                l4963 06B8                                  l4949 08BE  
                                l4789 0DB6                                  l4885 09A4  
                                l4869 0954                                  l3989 0FAA  
                                l4959 0930                                  l4991 071A  
                                l4975 06DA                                  l4967 06C4  
                                l4985 070C                                  l4977 06DE  
                                l4969 06CA                                  l4979 06F8  
            _MENU_MotorActualitzarLCD 1DD2                                  STR_1 1FFA  
                                STR_2 1FE6                                  STR_3 1FB2  
                                STR_4 1FC9                                  STR_5 1FD8  
                                STR_6 1F8F                                  STR_7 1FFD  
                                STR_8 1FE6                                  STR_9 1FA9  
                                u2100 16FE                                  u2120 1714  
                                u2200 16AE                                  u2060 16CC  
                                u2140 1666                                  u2118 1700  
                                u2080 16E6                                  u2160 1680  
                                u2320 1284                                  u3040 05D6  
                                u2138 1716                                  u2218 16B0  
                                u3050 060C                                  u2180 1698  
                                u2308 133C                                  u2260 1300  
                                u3060 0642                                  u2078 16CE  
                                u2158 1668                                  u2350 12C6  
                                u3070 0686                                  u3400 182E  
                                u3160 1C48                                  u3080 06A6  
                                u2098 16E8                                  u2178 1682  
                                u3410 0FA6                                  u2370 17A2  
                                u2338 1286                                  u2290 133A  
                                u2460 1840                                  u2198 169A  
                                u2390 17D0                                  u2630 1114  
                                u2358 12C8                                  u2278 1302  
                                u2550 198C                                  u3335 15F2  
                                u3336 15F4                                  u3440 0C74  
                                u3345 15FE                                  u2377 1798  
                                u3346 1600                                  u3530 0D52  
                                u2650 1190                                  u3355 160A  
                                u3356 160C                                  u3700 099A  
                                u2580 1A56                                  u3365 1616  
                                u2397 17C6                                  u3366 1618  
                                u2670 11B0                                  u3375 1622  
                                u3376 1624                                  u3480 0CE6  
                                u3560 0B68                                  u3720 09CA  
                                u2568 198E                                  u3385 162E  
                                u3386 1630                                  u3490 0CFA  
                                u3650 0BC4                                  u2690 177C  
                                u3660 0BCC                                  u2598 1A58  
                                u3870 0708                                  u3960 142C  
                                u3978 142E                                  _TMR0 0FD6  
                                _Tics 0007                                  _Rows 0049  
                ??_LEDS_setIntensitat 0053                                  _hash 0027  
                                _main 13F2                                  fsr1h 0FE2  
                                fsr2h 0FDA                                  indf1 0FE7  
                                indf2 0FDF                                  fsr1l 0FE1  
                                fsr2l 0FD9                            _LcCursorOn 1E04  
                                btemp 007F                       _handleIntensity 1478  
                     __end_of_TI_Init 1BBC                                  prodh 0FF4  
                                prodl 0FF3                           _TM_GetTecla 1DF8  
                     __end_of_LcClear 1D24                       mateixaTargeta@i 0056  
                                start 0030                       __end_of_CantaIR 1B92  
                     __end_of_TM_Init 1C36                          _start_system 0021  
                       _LEDS_setState 15E6                         LcInit@columns 0066  
                       _state_option3 0022                          ___param_bank 0000  
             _MFRC522_ToCard_NOU$1120 0069               _MFRC522_ToCard_NOU$1116 0061  
             _MFRC522_ToCard_NOU$1117 0063               _MFRC522_ToCard_NOU$1118 0065  
             _MFRC522_ToCard_NOU$1119 0067                       ??_MFRC522_Reset 005C  
                     printHex@hex_out 0067                           Espera@Timer 0065  
                     MFRC522_CRC@step 007E                                 ?_main 0052  
                               STR_10 1FFD                                 STR_11 1FFD  
                               STR_12 1FFD                                 STR_13 1FFD  
                               STR_14 1FF2                       __end_of_addHour 1B2E  
                               STR_15 1FF6                                 _T0CON 0FD5  
                               i2l103 002C                                 _RCREG 0FAE  
                               _SPBRG 0FAF                  MFRC522_ToCard_NOU@rd 0031  
                               _TXREG 0FAD                                 _Timer 0051  
                    __end_of_SIO_Init 1D6A                                 _enter 0019  
                    __end_of_SIO_Send 1DA0                          _TI_ResetTics 1CCC  
                               _state 0044                      __end_of_RSI_High 0030  
                     __end_of_showUID 0ED2                                 tablat 0FF5  
                   _MFRC522_Clear_Bit 1CF0                       __end_of_option3 0B5C  
                               ttemp5 0080                                 ttemp6 0083  
                               ttemp7 0087                                 status 0FD8  
                               wtemp8 0080                      __end_of_TM_Motor 0A62  
                    __end_of_T_REBOTS 1E91                    ?_MFRC522_Clear_Bit 005C  
                    __end_of_LcGotoXY 1250               __end_of_TM_IsKeyPressed 1D8E  
                       checkUID@match 0058                        ?_LEDS_setState 0052  
               __end_of_res_a_mostrar 1F8D                     _MFRC522_AntennaOn 1D6A  
             EscriuPrimeraOrdre@ordre 0053                       __initialization 136C  
                        __end_of_main 1478                    ?_MFRC522_AntennaOn 0052  
                 ??_MFRC522_Clear_Bit 005D                           ?_RSI_Timer0 0052  
                      TI_Init@counter 0052                  __end_of_handleEscKey 1DB2  
                    ??_SIO_SendString 0055                           ?_TI_GetTics 0052  
                       _enter_aplicar 1F3D                  LEDS_setState@quinLed 0053  
                              ??_main 007A                         ?_MENU_SaveUID 006C  
                 ??_MFRC522_AntennaOn 005F                         __activetblptr 0002  
                   __end_of_LEDS_Init 1830                       MFRC522_ToCard@j 00B9  
                     MFRC522_ToCard@n 0039                     MENU_SaveUID@index 0077  
                  MFRC522_Rd@ucResult 0057            MFRC522_ToCard_NOU@backData 005D  
                    MFRC522_CRC_NOU@i 003F                      MFRC522_CRC_NOU@n 003E  
                     MFRC522_Wr@value 0057                     __end_of_MENU_Init 1C82  
           __end_of_MFRC522_Clear_Bit 1D0A                 MFRC522_ToCard@_status 007C  
             __end_of_handleIntensity 14FA                             ??_TI_Init 0052  
                           ??_LcClear 0066                             ??_CantaIR 0054  
                           ??_TM_Init 0055                                i2l2937 1CA0  
                              i2l2939 1CA4                                i2l2893 1B2A  
                              i2l2885 1B10                                i2l2887 1B14  
                      LcGotoXY@Fisics 0065                        LcGotoXY@Column 0067  
                   __end_of_RFID_Init 1E1A                         ??_WaitForBusy 005F  
                              _TMR0IF 7F92                 MFRC522_ToCard@waitIRq 003B  
                    __end_of_checkUID 11B4                           ?_LcCursorOn 0052  
           __end_of_MFRC522_AntennaOn 1D7C                 MFRC522_ToCard_NOU@tmp 002F  
        motorRFIDcoop_NOU@serNumCheck 0078                                _LcInit 0ED2  
                    __end_of_delay_us 1C10                           MENU_Motor@i 006C  
                              _Espera 1AC4                          _LcGotoXY$682 0063  
                              _RowAct 0047                                _Timers 0080  
          MFRC522_ToCard_NOU@lastBits 0033                  __end_of_MFRC522_Init 1924  
                           ??_addHour 0052                  __end_of_MFRC522_Wr_1 19BA  
                __end_of_MFRC522_Wr_2 1A88                                _hora_h 001D  
                              _hora_l 001C                   _showConfigLeds$1797 0056  
          MFRC522_ToCard_NOU@sendData 005B                                clear_0 13D2  
                              clear_1 13DE                                isa$std 0001  
                      ??_MENU_SaveUID 006D                                _option 001E  
                _TM_IsKeyPressed$1388 0052                 MENU_MotorHandleHash@i 005F  
               MENU_MotorHandleHash@j 0061                          __pdataCOMRAM 007B  
                    __end_of_printLCD 053C                          __mediumconst 1E54  
                    __end_of_printHex 1886                                tblptrh 0FF7  
                              tblptrl 0FF6                                tblptru 0FF8  
                           ??_showUID 006B                          ?_SIO_Receive 0052  
           motorRFIDcoop_NOU@backBits 004C                     mateixaTargeta@UID 0052  
                           ??_option3 0055            MFRC522_ToCard_NOU@wr_state 002E  
                   __end_of_CantaData 1B60                            __accesstop 0080  
             __end_of__initialization 13E4                       ??_LEDS_setState 0053  
                   __end_of_LcPutChar 15E6                       delay_us@howMany 0055  
                       ___rparam_used 0001                     ??_MFRC522_CRC_NOU 0062  
                        ??_MFRC522_Rd 0052                          ??_MFRC522_Wr 0058  
                    ?_TM_IsKeyPressed 0052                    _MFRC522_AntennaOff 1DE0  
   _MENU_MotorHandleSetIntensity$1751 0054                        __pcstackCOMRAM 0052  
                 __end_of_WaitForBusy 1A46                          __pidataBANK0 1CA8  
                        __pidataBANK1 19BA                          ??_LEDS_Motor 005F  
                 ?_MFRC522_AntennaOff 0052                             ?_SIO_Init 0052  
                           ?_SIO_Send 0052                  TI_NewTimer@Comptador 0054  
                           ?_RSI_High 0052                      MFRC522_Rd@ucAddr 0055  
          ??_MENU_MotorActualitzarLCD 0075                             ?_TM_Motor 0052  
                           ?_LcGotoXY 0060                         _TECLAT_MATRIU 1E84  
                   ??_MFRC522_Set_Bit 005D                    __end_of_MFRC522_Rd 12E4  
                  __end_of_MFRC522_Wr 136C             motorRFIDcoop_NOU@wr_state 002A  
                  MENU_SaveUID@i_1771 0075                    MENU_SaveUID@i_1768 0071  
                  MENU_SaveUID@i_1769 0073                          ??_MENU_Motor 006C  
                   printHex@hex_chars 0056                      ?_handleIntensity 0052  
                ??_MFRC522_AntennaOff 005F                          ?_TI_NewTimer 0052  
                          __pbssBANK0 0080                    _MFRC522_ToCard_NOU 0034  
                  __end_of_LEDS_Motor 0948                      MFRC522_ToCard@rd 0038  
                             ?_LcInit 0066                    MFRC522_Wr_1@ucAddr 002C  
                        ?_TM_GetTecla 0052                         _CantaPartAlta 16C0  
              TI_NewTimer@TimerHandle 0052                               ?_Espera 005F  
                   LEDS_Motor@quinLed 0066                   ?_MFRC522_ToCard_NOU 005B  
          __end_of_Init_Interrupcions 1E22                    MFRC522_Set_Bit@tmp 005D  
                    MFRC522_Wr@ucAddr 005A                     SIO_Send@character 0052  
             TI_ResetTics@TimerHandle 0052                            ??_SIO_Init 0052  
                          ??_SIO_Send 0052                    __end_of_MENU_Motor 0DFA  
                          ??_RSI_High 0052          __end_of_MENU_MotorHandleHash 0D20  
              MFRC522_ToCard@lastBits 003A                             ?_checkUID 0052  
                             LcInit@i 0068                            ??_TM_Motor 005F  
                          ??_LcGotoXY 0061                  ??_MFRC522_ToCard_NOU 005F  
                           ?_delay_us 0052                          TM_GetTecla@c 0052  
                   motorRFIDcoop@buff 00D4                   MFRC522_CRC_NOU@step 007D  
                        _handleEscKey 1DA0        MENU_MotorHandleHash@state_hash 0012  
                             _TI_Init 1B92                    findLastLetterUID@i 0056  
                             _LcClear 1D0A                               _CantaIR 1B60  
                             _TM_Init 1C10                           _WaitForBusy 1A02  
                __end_of_MENU_SaveUID 06B4                        ?_CantaPartAlta 0052  
                             _Columns 0048                            _leds_saved 0124  
         findLastLetterUID@highNibble 0054                        _separador_hora 1F8D  
                             _TagType 000D                               __Hparam 0000  
                checkUID@UID_detectat 0052                               __Lparam 0000  
                MFRC522_Clear_Bit@tmp 005D                             ?_printLCD 0052  
                           ?_printHex 0052                          ??_RSI_Timer0 0052  
                             _addHour 1AFA                  __end_of_hora_sistema 1F6A  
                        ??_TI_GetTics 0056                               __pcinit 136C  
               __end_of_MFRC522_Reset 1BE6                               __ramtop 0200  
                             __ptext0 13F2                               __ptext1 06B4  
                             __ptext2 0034                               __ptext3 0FA8  
                             __ptext4 1A46                               __ptext5 1970  
                             __ptext6 053C                               __ptext7 1726  
                             __ptext8 1116                               __ptext9 0948  
                         _TimerRebots 0050                               __status 0043  
                             _esc_key 0020                             CantaIR@IR 0054  
                          ??_checkUID 0053                      _state_main_motor 0023  
                          _intensitat 00AD                            ??_delay_us 0052  
                             _showUID 0DFA                          _hash_less_3s 001F  
                             _option3 0A62                       _actualitzar_lcd 0017  
                             _quinLed 0016                             _LEDS_Init 17D8  
                             _someone 0018                       WaitForBusy@Busy 005F  
                     _canvis_aplicats 1F6A                          _col_selected 0025  
                        _MFRC522_Init 18D6                          _MFRC522_Wr_1 1970  
                        _MFRC522_Wr_2 1A46                  end_of_initialization 13E4  
                  __end_of_RSI_Timer0 1D54                __end_of_separador_hora 1F8F  
                           _MENU_Init 1C5C                         __Lmediumconst 1E54  
                        ??_LcCursorOn 0060                    __end_of_TI_GetTics 1970  
                   __end_of_uid_saved 1E73                          _LEDS_CURRENT 0001  
                           _RFID_Init 1E10           MFRC522_ToCard_NOU@state_aux 0030  
                          ??_printLCD 0069                             _RCSTAbits 0FAB  
                          ??_printHex 0055                               postdec1 0FE5  
                             postdec2 0FDD                               postinc0 0FEE  
                             postinc2 0FDE                 MFRC522_CRC_NOU@dataIn 005F  
                     showConfigLeds@i 005D                 MFRC522_CRC_NOU@length 0060  
                           _PORTCbits 0F82                             _PORTDbits 0F83  
                           _PORTEbits 0F84                        _mateixaTargeta 1726  
                  __end_of_LcCursorOn 1E10                 TI_GetTics@TimerHandle 005E  
                           _TRISAbits 0F92                             _TRISBbits 0F93  
                           _TRISCbits 0F94                             _TRISDbits 0F95  
                           _TRISEbits 0F96                       _MFRC522_CRC_NOU 0FA8  
                          ?_LEDS_Init 0052                  showConfigLeds@buffer 0058  
                findLastLetterUID@UID 0052                        _handleMainMenu 1C36  
                     ??_CantaPartAlta 0052                             _CantaData 1B2E  
                          ?_MENU_Init 0052                  _MENU_MotorHandleHash 0C46  
                           _TXSTAbits 0FAC                 __end_ofprintHex@F2821 1E84  
                   _motorRFIDcoop_NOU 06B4                            ?_RFID_Init 0052  
                          LEDS_Init@i 0055                        __end_of_LcInit 0FA8  
                   MFRC522_Rd@Address 0054                    ?_motorRFIDcoop_NOU 0052  
                           _LcPutChar 1572                        __end_of_Espera 1AFA  
                      _MENU_addMinute 1C82                       _MFRC522_Set_Bit 1D24  
                 MFRC522_ToCard@irqEn 003C            __end_of_EscriuPrimeraOrdre 1572  
                 MFRC522_ToCard_NOU@j 000B                   MFRC522_ToCard_NOU@n 0032  
                         _BAUDCONbits 0FB8                         __pidataCOMRAM 1E22  
                 ??_motorRFIDcoop_NOU 0078                             _ColumnAct 0046  
              __end_of_mateixaTargeta 1780               __end_of_canvis_aplicats 1F7D  
                 start_initialization 136C                __end_of_handleMainMenu 1C5C  
           __end_of_motorRFIDcoop_NOU 0820                 ?_MENU_MotorHandleHash 0052  
                          ?_CantaData 0052             MFRC522_ToCard_NOU@backLen 005E  
                            ??_LcInit 0067                 __end_of_LEDS_setState 165A  
                            ??_Espera 0061                     SIO_SendString@str 0053  
              __end_of_MENU_addMinute 1CA8             MFRC522_ToCard_NOU@_status 007B  
           MFRC522_ToCard_NOU@command 006B                         _res_a_mostrar 1F7D  
                          ?_LcPutChar 0052                        _showConfigLeds 1070  
                           _TimerHash 004E                   MFRC522_Wr_1@Address 0058  
           MFRC522_ToCard_NOU@sendLen 005C             MFRC522_ToCard_NOU@waitIRq 0034  
                         __pdataBANK0 00DC                           __pdataBANK1 0100  
       MENU_MotorHandleHash@bug_timer 0011               __end_of_MFRC522_CRC_NOU 1070  
                     ?_mateixaTargeta 0052                          _MENU_SaveUID 053C  
                  _Init_Interrupcions 1E1A                           __pbssCOMRAM 0001  
                   MFRC522_Wr@Address 0059                           ??_LEDS_Init 0055  
                   MFRC522_ToCard@tmp 0036                         ?_TI_ResetTics 0052  
                     ?_handleMainMenu 0052                   ?_Init_Interrupcions 0052  
                            ?_TI_Init 0052                          _hora_sistema 1F55  
                            ?_LcClear 0052                              ?_CantaIR 0052  
                            ?_TM_Init 0052                        _CantaPartBaixa 165A  
                         ??_MENU_Init 0055                          ?_WaitForBusy 0052  
           ?_MENU_MotorActualitzarLCD 0052                __end_of_showConfigLeds 1116  
             __end_of_MFRC522_Set_Bit 1D3C                           ??_RFID_Init 005F  
                     ?_MENU_addMinute 0052                   MFRC522_Set_Bit@addr 005E  
                   MFRC522_Wr_2@value 0058                   MFRC522_Set_Bit@mask 005C  
                           __pintcode 0008                         __pmediumconst 1E54  
          __end_of_InitPortDirections 1DF8                              ?_addHour 0052  
                ??_Init_Interrupcions 0052                 __end_of_enter_aplicar 1F55  
                     CantaPartBaixa@c 0053  __end_of_MENU_MotorHandleSetIntensity 0C46  
        _MENU_MotorHandleSetIntensity 0B5C                      motorRFIDcoop@UID 00CB  
                   _findLastLetterUID 1886          _state@TAD_TECLATMATRIU$F1368 0029  
                         __smallconst 1E54             _leds_saved@TAD_MENU$F1001 0100  
                  ?_findLastLetterUID 0052             _leds_saved@TAD_MENU$F1708 00DC  
                           checkUID@i 005A                             checkUID@j 005C  
             MENU_Motor@received_char 006E                             _index_row 0024  
                            ?_showUID 0052                        ??_TI_ResetTics 0052  
                            ?_option3 0052                   ??_findLastLetterUID 0053  
              __end_of_CantaPartBaixa 16C0            __end_of_LEDS_setIntensitat 1DC2  
              ??_MENU_MotorHandleHash 005F                           ??_CantaData 0054  
                            _LATAbits 0F89                              _LATBbits 0F8A  
           handleEscKey@received_char 0052                              _LATCbits 0F8B  
                            _LATDbits 0F8C                              _LATEbits 0F8D  
                           delay_us@x 0056                       ?_showConfigLeds 0052  
                            _PIR1bits 0F9E                           ??_LcPutChar 0068  
                           _uid_saved 1E55            findLastLetterUID@lowNibble 0055  
                            _RCONbits 0FD0             __end_of_findLastLetterUID 18D6  
                            _SIO_Init 1D54                    motorRFIDcoop@unLen 00D8  
                            _SIO_Send 1D8E                    motorRFIDcoop_NOU@i 0079  
                            _RSI_High 0008         ?_MENU_MotorHandleSetIntensity 0052  
             MFRC522_ToCard_NOU@irqEn 0035                    _key@TAD_MENU$F1730 004F  
                 showConfigLeds@index 005C                      ?_MFRC522_CRC_NOU 005F  
                       MENU_SaveUID@i 006F                              _TM_Motor 0948  
                            Espera@ms 005F                              _T_REBOTS 1E90  
             MFRC522_ToCard@state_aux 0037                              _LcGotoXY 11B4  
                   ??_TM_IsKeyPressed 0052                         ??_SIO_Receive 0053  
                      _SIO_SendString 1780             LEDS_setIntensitat@quinLed 0053  
                         LcGotoXY@Row 0060                             copy_data0 1380  
                           copy_data1 13A0                             copy_data2 13C0  
                     ?_CantaPartBaixa 0052                        _menu_principal 1E91  
                  LEDS_setState@estat 0052               LEDS_setIntensitat@valor 0052  
                    ?_MFRC522_Set_Bit 005C                              __Hrparam 0000  
               MFRC522_Clear_Bit@addr 005E                         _printLCD$1810 006B  
                       _printLCD$1811 006D                         _printLCD$1812 006F  
                       _printLCD$1813 0071                         _printLCD$1814 0073  
                       _printLCD$1809 0069                 MFRC522_Clear_Bit@mask 005C  
                            __Lrparam 0000                              _TimerLed 00BB  
                   ??_handleIntensity 0054                  SIO_Receive@character 0052  
              __end_of_SIO_SendString 17D8                              _checkUID 1116  
               __end_of_TECLAT_MATRIU 1E90                  option3@received_char 0055  
                            _delay_us 1BE6                __end_of_menu_principal 1F3D  
                            __ptext10 1C10                              __ptext11 1B92  
                  _EscriuPrimeraOrdre 14FA                              __ptext20 12E4  
                            __ptext12 1D54                              __ptext21 1BE6  
                            __ptext13 1E10                              __ptext30 1886  
                            __ptext22 1250                              __ptext14 18D6  
                            __ptext31 1572                              __ptext23 1DEC  
                            __ptext15 1BBC                              __ptext40 1C36  
                            __ptext32 11B4                              __ptext24 0B5C  
                            __ptext16 1D6A                              __ptext41 1780  
                            __ptext33 1B2E                              __ptext25 0C46  
                            __ptext17 1D24                              __ptext50 14FA  
                            __ptext42 1D8E                              __ptext34 1D0A  
                            __ptext26 1D7C                              __ptext18 1DE0  
                            __ptext51 1E04                              __ptext43 1478  
                            __ptext35 0D20                              __ptext27 1DF8  
                            __ptext19 1CF0                              __ptext60 17D8  
                            __ptext52 1A02                              __ptext44 1DB2  
                            __ptext36 0DFA                              __ptext28 1DD2  
                            __ptext61 1A88                              __ptext53 1B60  
                            __ptext45 1DA0                              __ptext37 1830  
                            __ptext29 03AC                              __ptext62 1E1A  
                            __ptext54 165A                              __ptext46 1DC2  
                            __ptext38 1070                              __ptext55 16C0  
                            __ptext47 1C5C                              __ptext39 0A62  
                            __ptext64 1D3C                              __ptext56 0820  
                            __ptext48 0ED2                              __ptext65 1C82  
                            __ptext57 1CCC                              __ptext49 1AC4  
                            __ptext66 1AFA                              __ptext58 1924  
                            __ptext59 15E6                         ??_TI_NewTimer 0053  
                      CantaPartAlta@c 0053                   __end_of_SIO_Receive 1DD2  
                 ?_EscriuPrimeraOrdre 0052                 __end_of_CantaPartAlta 1726  
                       CantaData@Data 0054                         ??_TM_GetTecla 0053  
                          _MFRC522_Rd 1250                            _MFRC522_Wr 12E4  
                            _minuts_h 001B                              _minuts_l 001A  
                            isa$xinst 0000                              _printLCD 03AC  
                        showUID@index 006B                              _printHex 1830  
                __end_of_TI_ResetTics 1CF0                      ??_mateixaTargeta 0053  
                            int$flags 007F                            _LEDS_Motor 0820  
                _state@TAD_LEDS$F1862 00B3                  ??_EscriuPrimeraOrdre 0052  
                          LcInit@rows 0067                         _MFRC522_Reset 1BBC  
                    ??_handleMainMenu 0055                       ?_SIO_SendString 0053  
                          _INTCONbits 0FF2      __end_of_MENU_MotorActualitzarLCD 1DE0  
           TI_GetTics@CopiaTicsActual 005A        ??_MENU_MotorHandleSetIntensity 0054  
                          _MENU_Motor 0D20                         ?_handleEscKey 0052  
                            intlevel2 0000                         _INDEX_CURRENT 0013  
                    ??_MENU_addMinute 0052                           _UID_CURRENT 00C1  
                         _ticsCounter 000F                            LcPutChar@c 0068  
               motorRFIDcoop@backBits 00DA                   __end_of_TI_NewTimer 1AC4  
                     _quinaIntensitat 0015                   __end_of_TM_GetTecla 1E04  
                      ?_MFRC522_Reset 0052                    _state_setIntensity 0014  
              MFRC522_CRC_NOU@dataOut 0061                motorRFIDcoop_NOU@unLen 004A  
                  _InitPortDirections 1DEC            __end_of_MFRC522_AntennaOff 1DEC  
                         _SIO_Receive 1DC2                        ??_handleEscKey 0052  
             MFRC522_CRC_NOU@wr_state 003D                         ?_MFRC522_Init 0052  
                       ?_MFRC522_Wr_1 0052                         ?_MFRC522_Wr_2 0052  
               motorRFIDcoop_NOU@buff 00D0                      ??_showConfigLeds 0055  
                 ?_InitPortDirections 0052                  motorRFIDcoop_NOU@UID 00C6  
                         ?_MFRC522_Rd 0052                           ?_MFRC522_Wr 0057  
                       printHex@F2821 1E73  
